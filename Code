This is my Download.aspx.cs

//-----------------------------------------------------------------------
// <copyright file="Download.aspx.cs" company="Special pay">
//     Copyright (c) Special pay Enterprises. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

/*About me
 *******************************************************
 * Namespace        : SPayWebApp
 * Class Name       : Download.apsx
 * Version          : 1.065
 * Type             : WebPage
 * Purpose          : To handle download from SAN
 * Created date     : 2013-June-23
 * Author           : 290050
 * Reviewed by      :
 *------------------------------------------------------
 *                  Change history
 *------------------------------------------------------
 * Date             :
 * Author           :
 * Signature        :
 * Reviewed by      :`
 * Change details   :
 * -----------------------------------------------------
 *******************************************************
*/

namespace SPayWebApp
{
    #region Namespaces

    using System;
    using System.Configuration;
    using System.Data;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web;
    using ECMSharedServices;
    using SPay.BAL.UtilityBAL;

    #endregion Namespaces

    /// <summary>
    /// Download class
    /// </summary>
    public partial class Download : System.Web.UI.Page
    {
        /// <summary>
        /// Page Load
        /// </summary>
        /// <param name="sender">the sender</param>
        /// <param name="e">the e</param>
        protected void Page_Load(object sender, EventArgs e)
        {
            var regexItem = new Regex(@"^[a-zA-Z0-9_\-\s]*$");
            string versionkey = ConfigurationManager.AppSettings["Version"].ToString();
            string downloadUrl = ConfigurationManager.AppSettings["FileDownloadUIOCM"].ToString();
            string ocm = ConfigurationManager.AppSettings["IsOCMEnabled"].ToString();
            string associateID = HttpContext.Current.Session["UserId"].ToString();

            string ClientIdkey = SendMailer.FetchKeyVaultSecret("OCMClientId");
            string encryptAssociateid = UtilityBAL.Encrypt(associateID, ClientIdkey);
            //string ocmcontenid = "CONT6BE08832C7334B89A22C9E61E036E522";
            if (Request.QueryString["fileUploadId"].ToString() != "null")
            {
                try
                {
                    string fileUploadId = string.Empty;
                    if (regexItem.IsMatch(Request.QueryString["fileUploadId"].ToString().Trim()))
                    {
                        fileUploadId = CAS.Security.Application.EncodeHelper.HtmlEncode(
                            HttpUtility.UrlEncode(Request.QueryString["fileUploadId"]));
                    }

                    if (ocm == "1")
                    {
                        string stFinalQueryString = string.Format("?OCMContentID={0}&AssociateID={1}", fileUploadId, encryptAssociateid);
                        string finalurl = string.Format(downloadUrl + stFinalQueryString);
                        Response.Redirect(finalurl);
                    }
                    else
                    {
                        ErrorLogger loggerECM = new ErrorLogger();
                        loggerECM.LogErrorECM("Download", fileUploadId, associateID, "ECM Download Triggered");

                        var ecmAppid =
                        Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["ECMAppID"]);
                        ECMCommon.IdcFile downloadFile = new ECMCommon.IdcFile();
                        WrapperUICheckIn checkIn = new WrapperUICheckIn(ecmAppid);
                        downloadFile = checkIn.DownloadFileContent(fileUploadId, ecmAppid);
                        var filename = downloadFile.Filename;                        

                        if (!string.IsNullOrEmpty(filename))
                        {
                            string fileType = System.IO.Path.GetExtension(filename).ToString().ToLower();
                            filename = filename.Split('.').Length - 1 >= 2 ? filename.Split('.')[0] + fileType : filename;
                            this.Session["NoFile"] = "0";
                            HttpContext.Current.Response.Clear();
                            HttpContext.Current.Response.ClearContent();
                            HttpContext.Current.Response.ClearHeaders();
                            HttpContext.Current.Response.Buffer = true;
                            HttpContext.Current.Response.AddHeader("Content-Type", "application/octet-stream");
                            HttpContext.Current.Response.AddHeader("Content-Disposition",
                                "attachment;filename=\"" + filename + "\"");
                            HttpContext.Current.Response.BinaryWrite(downloadFile.Filecontent);
                            HttpContext.Current.Response.Flush();
                            HttpContext.Current.ApplicationInstance.CompleteRequest();
                            HttpContext.Current.Response.End();
                        }
                        else
                        {
                            this.Session["NoFile"] = "1";
                            string errormsg = "The server is down to Upload/ Download templates. Please try after sometime";
                            string url = Request.UrlReferrer.AbsolutePath.ToString();
                            ClientScript.RegisterStartupScript(GetType(), "alert", "callAlert('" +HttpUtility.HtmlEncode(errormsg) + "','" + HttpUtility.HtmlEncode(url) + "');", true);
                        }
                    }
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                    return;
                }
            }
            else
            {
                return;
            }
        }
    }
}

This is my FileUpload.aspx.cs

//-----------------------------------------------------------------------
// <copyright file="FileUpload.aspx.cs" company="Special pay">
//     Copyright (c) Special pay Enterprises. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

/*About me
 *******************************************************
 * Namespace        : SPayWebApp
 * Class Name       : PopupUpload.apsx
 * Version          : 1.0
 * Type             : WebPage
 * Purpose          : This is the page where Uploader has to upload files for Processing
 * Created date     : 2013-June-17
 * Author           : 290050
 * Reviewed by      :
 *------------------------------------------------------
 *                  Change history
 *------------------------------------------------------
 * Date             :
 * Author           :
 * Signature        :
 * Reviewed by      :`
 * Change details   :
 * -----------------------------------------------------
 *******************************************************
*/
[module: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.NamingRules",
    "SA1305:FieldNamesMustNotUseHungarianNotation", Justification = "Reviewed.")]

namespace SPayWebApp
{
    #region Namespace

    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Data;
    using System.IO;
    using System.Linq;
    using System.Text.RegularExpressions;
    using System.Web;
    using System.Web.UI;
    using System.Xml.Linq;
    using CAS.Security.Application;
    using DocumentFormat.OpenXml.Spreadsheet;
    using ECMCommon;
    using ECMSharedServices;
    using SPay.BAL.UtilityBAL;
    using SPay.DC.UtilityDC;

    #endregion Namespace

    /// <summary>
    /// FileUpload class
    /// </summary>
    public partial class FileUpload : System.Web.UI.Page
    {
        #region Declarations

        /// <summary>
        /// User ID, Role ID and Component ID
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.MaintainabilityRules",
            "SA1401:FieldsMustBePrivate", Justification = "Reviewed.")]
        protected string userId, RoleID, componentId;

        /// <summary>
        /// IsReversal value
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.MaintainabilityRules",
            "SA1401:FieldsMustBePrivate", Justification = "Reviewed.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.StyleCop.CSharp.NamingRules",
           "SA1305:FieldNamesMustNotUseHungarianNotation", Justification = "Reviewed.")]
        protected bool isReversal = false;

        /// <summary>
        /// IsReversal value
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.MaintainabilityRules",
            "SA1401:FieldsMustBePrivate", Justification = "Reviewed.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.StyleCop.CSharp.NamingRules",
           "SA1305:FieldNamesMustNotUseHungarianNotation", Justification = "Reviewed.")]
        protected bool isVerify = false;

        /// <summary>
        /// Wrapper CheckIn
        /// </summary>
        private WrapperCheckIn objCheckInServices;

        /// <summary>
        /// Used to assign result from Wrapper
        /// </summary>
        private string uploadContext = string.Empty;

        /// <summary>
        /// Used to final query string
        /// </summary>
        private string finalQueryString = string.Empty;

        /// <summary>
        /// app Id
        /// </summary>
        private int appId = Convert.ToInt32(ConfigurationManager.AppSettings.Get("ECMAppID"));


        /// <summary>
        /// upload URL
        /// </summary>
        private string uploadURL = ConfigurationManager.AppSettings.Get("ECMUploadURL").ToString();

        /// <summary>
        ///  one cognizant QueryURL
        /// </summary>
        //private string clientURL = ConfigurationManager.AppSettings.Get("ECMOnecQueryURL").ToString();

        /// <summary>
        /// fileConfig
        /// </summary>

        private int fileConfig = Convert.ToInt32(ConfigurationManager.AppSettings.Get("FileSize"));

        /// <summary>
        /// full path value
        /// </summary>
        private string fullpath = string.Empty;

        #endregion Declarations

        #region Page Load

        /// <summary>
        /// 290050: Page Load
        /// </summary> 
        /// <param name="sender">sender object</param>
        /// <param name="e">EventArgs e</param>
        protected void Page_Load(object sender, EventArgs e)
        {
            string versionkey = ConfigurationManager.AppSettings["Version"].ToString();
            if (HttpContext.Current.Session["UserId"] != null)
            {
                this.userId = HttpContext.Current.Session["UserId"].ToString();
            }
            else
            {
                ////divSession.Style.Add("display", "block");
                ////divPopUp.Style.Add("display", "none");
            }

            if (HttpContext.Current.Session["UserRoles"] != null)
            {
                if (HttpContext.Current.Session["RoleId"] != null)
                {
                    this.RoleID = HttpContext.Current.Session["RoleId"].ToString();
                }
                else
                {
                    ////divSession.Style.Add("display", "block");
                    ////divPopUp.Style.Add("display", "none");
                }

                string[] roles = HttpContext.Current.Session["UserRoles"].ToString().Split(',');
                if (!roles.Contains(this.RoleID))
                {
                    Response.Redirect("HTML/AccessDenied.htm");
                }
            }
            else
            {
                ////divSession.Style.Add("display", "block");
                ////divPopUp.Style.Add("display", "none");
            }

            if (Request.QueryString["componentId"] != null)
            {
                this.componentId = Request.QueryString["componentId"].ToString();
            }

            if (Request.QueryString["isReversal"] != null)
            {
                this.isReversal = true;
            }

            if (Request.QueryString["isVerify"] != null)
            {
                this.isVerify = true;
            }

            if (Request.QueryString["Label"] != null)
            {
                var regexItem = new Regex(@"^[a-zA-Z0-9_.\s]*$");
                if (regexItem.IsMatch(this.hdnlbl.Value))
                {
                    this.hdnlbl.Value = HttpUtility.HtmlEncode(Convert.ToString(Request.QueryString["Label"]));
                }
            }

            //ErrorLogger loggerECM = new ErrorLogger();
            //loggerECM.LogErrorECM("Upload - FileUpload - Page_Load", "Country " + 1 + "Role " + this.RoleID + "ComponentGroupID "
            //                        + 0 + "ComponentID " + this.componentId + "ProjectID " + 0, this.userId, "ECM Upload Triggered");
        }

        #endregion Page Load

        #region Upload Button Click

        /// <summary>
        /// 290050: Uploading the file to SAN and add an entry in DB with isProcessed=0
        /// </summary> 
        /// <param name="sender">sender object</param>
        /// <param name="e">EventArgs e</param>
        protected void BtnUpload_Click(object sender, EventArgs e)
        {
            ErrorLogger loggerECM = new ErrorLogger();
            loggerECM.LogErrorECM("Upload - FileUpload - BtnUpload_Click", "Country " + 1 + "Role " + this.RoleID + "ComponentGroupID "
                       + 0 + "ComponentID " + this.componentId + "ProjectID " + 0, this.userId, "ECM Upload Triggered");

            try
            {
                if (this.filUploadIcon.HasFile)
                {
                    string fileName = EncodeHelper.HtmlEncode(Path.GetFileName(this.filUploadIcon.FileName));
                    string strFileName = fileName.Replace("'", string.Empty).Replace(@"\", string.Empty);
                    string strFileType = System.IO.Path.GetExtension(strFileName).ToString().ToLower();
                   
                    if ((strFileType.ToUpper() == ".MSG" || strFileType.ToUpper() == ".ZIP")
                        && string.IsNullOrEmpty(this.componentId))
                    {
                        string[] strfileTypes = new string[] { ".msg", ".zip" };
                        string[] result = checkFileUpload(strfileTypes, 0);

                        this.fullpath = result[0].ToString();

                        if (result[1] == "")
                        {
                            this.filUploadIcon.PostedFile.SaveAs(EncodeHelper.HtmlEncode(this.fullpath));
                            ////string fileUploadId = this.UploadFiletoSAN(this.fullpath, strFileType, strFileName);
                            string fileUploadId = this.UploadFiletoECM(this.fullpath, strFileType, strFileName);
                            this.textFileName.Value = fileUploadId;
                        }
                        else
                        {
                            throw new SystemException(result[1]);
                        }
                        
                        if (this.hdnframeID.Value.ToString() == "frame")
                        {
                            string script =
         "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandler');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                        else if (this.hdnframeID.Value.ToString() == "frameforhide")
                        {
                            string script =
         "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandlerhide');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                        else if (this.hdnframeID.Value.ToString() == "frame2")
                        {
                            string script =
           "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandler2');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                        else if (this.hdnframeID.Value.ToString() == "frame3")
                        {
                            string script =
            "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandler3');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }            
                        else if (this.hdnframeID.Value.ToString() == "frame1")
                        {
                            string script =
          "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandler1');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                        else if (this.hdnframeID.Value.ToString() == "frame4")
                        {
                            string script =
    "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandler4');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                        else if (this.hdnframeID.Value.ToString() == "frame5")
                        {
                            string script =
       "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandler5');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                        else if (this.hdnframeID.Value.ToString() == "frame6")
                        {
                            string script =
             "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandler6');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                        else if (this.hdnframeID.Value.ToString() == "frame7")
                        {
                            string script =
             "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandler7');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                        else if (this.hdnframeID.Value.ToString() == "frame8")
                        {
                            string script =
             "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandler8');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                        else if (this.hdnframeID.Value.ToString() == "frame9")
                        {
                            string script =
             "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandlerTRT');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }


                        this.hdnframeID.Value = string.Empty;
                    }
                    else if ((strFileType.ToUpper() == ".MSG" || strFileType.ToUpper() == ".DOC"
                         || strFileType.ToUpper() == ".DOCX" || strFileType.ToUpper() == ".XLS"
                         || strFileType.ToUpper() == ".XLSX" || strFileType.ToUpper() == ".ZIP"
                         || strFileType.ToUpper() == ".NSF" || strFileType.ToUpper() == ".GIF"
                         || strFileType.ToUpper() == ".PNG" || strFileType.ToUpper() == ".PDF"
                         || strFileType.ToUpper() == ".JPG" || strFileType.ToUpper() == ".JPEG")
                     && (!string.IsNullOrEmpty(this.componentId)))
                    {
                        string[] strfileTypes = new string[] { ".msg", ".zip" };
                        string[] result = checkFileUpload(strfileTypes, 0);

                        this.fullpath = result[0].ToString();

                        if (result[1] == "")
                        {
                            this.filUploadIcon.PostedFile.SaveAs(EncodeHelper.HtmlEncode(this.fullpath));
                            ////string fileUploadId = this.UploadFiletoSAN(this.fullpath, strFileType, strFileName);
                            string fileUploadId = this.UploadFiletoECM(this.fullpath, strFileType, strFileName);
                            this.textFileName.Value = fileUploadId;
                        }
                        else
                        {
                            throw new SystemException(result[1]);
                        }

                        if (this.hdnframeID.Value.ToString() == "frameMBInvoice")
                        {
                            string script =
             "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandlerMBInvoice');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                    }
                    else
                    {
                        string script =
     "<script type='text/javascript'>parent.$(parent.document).trigger('popupprogresseventshow');</script>";
                        Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);

                        this.hdnframeID.Value = string.Empty;
                    }
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
                if (!(ex.Message.Equals("Uploaded file is empty") ||
              ex.Message.Equals("Number of columns in uploaded file does not match") ||
             ex.Message.Equals("Please fill the mandatory columns")))
                {
                    SendMailer.SendErrorMaileronFailure("Upload data", ex);
                }

                string script = string.Concat("<script type='text/javascript'>Message('", ex.Message, "');", "</script>");
                Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
            }
        }

        #endregion Upload Button Click

        #region UploadFiletoSAN

        /// <summary>
        /// 290050: Upload Validated file to SAN for further processing
        /// </summary>
        /// <param name="fullpath">Server path of file where it is saved locally</param>
        /// <param name="strFileType">File Extension</param>
        /// <param name="fileName">File Name</param>
        /// <returns>Response value</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability",
            "CA1500:VariableNamesShouldNotMatchFieldNames", MessageId = "fullpath", Justification = "Reviewed")]
        private string UploadFiletoSAN(string fullpath, string strFileType, string fileName)
        {
            try
            {
                string response;
                DataSet dsappTemplateId = UtilityBAL.FetchAppTemplateIdforSAN();
                string appTemplateId = dsappTemplateId.Tables[0].Rows[0]["KeyValue"].ToString();
                int appId = Convert.ToInt32(dsappTemplateId.Tables[0].Rows[0]["AppID"]);
                string candidateId = this.userId;
                ////SAST fix Improper Resource Shutdown or Release
                using (System.IO.FileStream objFileStream =
                     new System.IO.FileStream(fullpath, System.IO.FileMode.Open, System.IO.FileAccess.Read))
                {
                    ////SAST fix Improper Resource Shutdown or Release
                    using (System.IO.BinaryReader objBinaryReader = new System.IO.BinaryReader(objFileStream))
                    {
                        long totalBytes = new System.IO.FileInfo(fullpath).Length;
                        byte[] buffer = objBinaryReader.ReadBytes((int)totalBytes);

                        FileUploadService.FileUploadDetailsRequest objFileUploadDetailsRequest =
                            new FileUploadService.FileUploadDetailsRequest();
                        FileUploadService.MFileuploadResponse objMFileuploadResponse =
                            new FileUploadService.MFileuploadResponse();

                        FileUploadService.DocumentUploadServiceClient objDocumentUploadServiceClient =
                            new FileUploadService.DocumentUploadServiceClient();
                        objFileUploadDetailsRequest.AppId = appId;
                        objFileUploadDetailsRequest.AppTemplateId = appTemplateId;
                        objFileUploadDetailsRequest.FileName = fileName + strFileType;
                        objFileUploadDetailsRequest.IncomingFile = buffer;
                        objFileUploadDetailsRequest.AssociateId = Convert.ToInt32(candidateId.ToString());
                        objFileUploadDetailsRequest.CreatedBy = candidateId.ToString();
                        objFileUploadDetailsRequest.CreatedDate = DateTime.UtcNow;

                        objMFileuploadResponse =
                            objDocumentUploadServiceClient.UploadFile_WithResponse(objFileUploadDetailsRequest);
                        if (objMFileuploadResponse.Filestatus.ToUpper() == "SUCCESS")
                        {
                            response = objMFileuploadResponse.FileUploadId.ToString();
                        }
                        else
                        {
                            response = "0";
                        }
                        ////SaveFileUploadDetailstoDB(objMFileuploadResponse, strFileType);    
                        //// objFileStream.Close();
                        objFileStream.Dispose();
                        objBinaryReader.Close();
                        buffer = null;

                        if (File.Exists(fullpath))
                        {
                            File.Delete(fullpath);
                        }
                    }
                }

                return response;
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
                throw ex;
            }
        }

        #endregion UploadFiletoSAN

        #region UploadFiletoECM

        /// <summary>
        /// 290050: Upload Validated file to SAN for further processing
        /// </summary>
        /// <param name="fullpath">Server path of file where it is saved locally</param>
        /// <param name="strFileType">File Extension</param>
        /// <param name="fileName">File Name</param>
        /// <returns>Response value</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability",
            "CA1500:VariableNamesShouldNotMatchFieldNames", MessageId = "fullpath", Justification = "Reviewed")]
        private string UploadFiletoECM(string fullpath, string strFileType, string fileName)
        {
            try
            {
                string response;
                DataSet dsappTemplateId = UtilityBAL.FetchAppTemplateIdforSAN();
                string appTemplateId = dsappTemplateId.Tables[0].Rows[0]["KeyValue"].ToString();
                int appId = Convert.ToInt32(dsappTemplateId.Tables[0].Rows[0]["AppID"]);
                string candidateId = this.userId;

                ECMIntegration objUtilityECM = new ECMIntegration();
                objUtilityECM = this.UploadtoECM(fullpath);
                response = objUtilityECM.EcmContentId;

                if (File.Exists(fullpath))
                {
                    File.Delete(fullpath);
                }

                return response;
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
                throw ex;
            }
        }

        #endregion UploadFiletoECM

        /// <summary>
        /// Upload file to ECM
        /// </summary>
        /// <param name="fullpath">path details</param>
        /// <returns>ECM object content</returns>
        private ECMIntegration UploadtoECM(string fullpath)
        {
            string fileName = Path.GetFileName(fullpath);
            ECMIntegration objUtilityECM = new ECMIntegration();
            try
            {
                XDocument xmetadataDoc = XDocument.Load(Server.MapPath(".") + @"\ECMMetaData.xml");
                int fileSize = File.ReadAllBytes(fullpath).Length;
                //fileConfig is in MB and converting into Byte 
                int limitsize = this.fileConfig * 1024 * 1024;
                if (fileSize > limitsize)
                {
                    throw new SystemException("Files size exceeded");

                }
                if (xmetadataDoc != null)
                {
                    if (this.IsContentValid(fullpath, fileName))
                    {
                        IdcFile primaryFile = new IdcFile();
                        WrapperUICheckIn uicheckIn = new WrapperUICheckIn(this.appId);
                        primaryFile.Filename = EncodeHelper.HtmlEncode(fileName);
                        primaryFile.Filecontent = File.ReadAllBytes(fullpath);
                        XDocument ecmResult = uicheckIn.UploadFile_RevisionLabel(primaryFile, xmetadataDoc);

                        XElement returnElement = ecmResult != null ? ecmResult.Root.Element("ECMStatus") : null;
                        if (returnElement != null)
                        {
                            var responseData = from datas in ecmResult.Descendants("ECMStatus")
                                               select new
                                               {
                                                   dContentId = datas.Element("ECMContentId").Value,
                                                   dAppDocId = datas.Element("AppDocId").Value,
                                                   dID = datas.Element("ECMdID").Value
                                               };
                            objUtilityECM.EcmContentId = Convert.ToString(responseData.FirstOrDefault().dContentId);
                            objUtilityECM.EcmAppDocId = Convert.ToString(responseData.FirstOrDefault().dAppDocId);
                        }
                    }
                }
            }
            catch (SystemException ex)
            {
                string script = String.Empty;
                if (ex.Message == "Files size exceeded")
                {

                    script = "<script type='text/javascript'>parent.$(parent.document).trigger('popupprogresseventshowfilesize',[{size:" + this.fileConfig + "}]);</script>";


                }
                Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);

                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);

            }

            return objUtilityECM;
        }

        /// <summary>
        /// Content valid
        /// </summary>
        /// <param name="fullpath">full path detail</param>
        /// <param name="fileName">file name detail</param>
        /// <returns>return valid</returns>
        private bool IsContentValid(string fullpath, string fileName)
        {
            string suppFormat = string.Empty;
            string unsuppFormat = string.Empty;
            string formatErrMsg = string.Empty;
            string sizeErrMsg = string.Empty;
            int size = 0;
            string[] supportedextns = null;
            string[] unsupportedextns = null;
            int fileSize = 0;
            int limit;
            string extension = null;
            var regexItem = new Regex(@"^[a-zA-Z0-9_.()@#$%^&!+,;:\-\\\s]*$");
            ECMApplicationSpecification objECMAppSpecification;
            Dictionary<string, ECMApplicationSpecification> appSpec =
                new Dictionary<string, ECMApplicationSpecification>();

            try
            {
                if (Request.QueryString["UploadContext"] != null)
                {
                    this.uploadContext = Convert.ToString(Request.QueryString["UploadContext"]);
                }
                else
                {
                    this.uploadContext = "Common";
                }

                DataSet dsappSpec = new DataSet();
                this.objCheckInServices = new WrapperCheckIn(this.appId);
                dsappSpec = this.objCheckInServices.GetAppSpecificValue(this.appId);

                if (dsappSpec != null && dsappSpec.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsappSpec.Tables["ECMAppSpecfn"].Rows)
                    {
                        objECMAppSpecification = new ECMApplicationSpecification();
                        objECMAppSpecification.FormatErrorMessage =
                            CAS.Security.Application.EncodeHelper.HtmlEncode(Convert.ToString(dr["FormatErrorMessage"]));
                        objECMAppSpecification.FormatsSupported =
                            CAS.Security.Application.EncodeHelper.HtmlEncode(Convert.ToString(dr["FormatsSupported"]));
                        objECMAppSpecification.FormatsUnsupported =
                            CAS.Security.Application.EncodeHelper.HtmlEncode(Convert.ToString(dr["FormatsNotSupported"]));
                        objECMAppSpecification.Size =
                            CAS.Security.Application.EncodeHelper.HtmlEncode(Convert.ToString(dr["SupportedSizeInKb"]));
                        objECMAppSpecification.SizeErrorMessage =
                            CAS.Security.Application.EncodeHelper.HtmlEncode(Convert.ToString(dr["SizeErrorMessage"]));
                        appSpec.Add(Convert.ToString(dr["UploadContext"]), objECMAppSpecification);
                    }
                }

                size = int.Parse(objECMAppSpecification.Size);
                if (regexItem.IsMatch(objECMAppSpecification.FormatsSupported))
                {
                    suppFormat = objECMAppSpecification.FormatsSupported;
                }
                if (regexItem.IsMatch(objECMAppSpecification.FormatsUnsupported))
                {
                    unsuppFormat = objECMAppSpecification.FormatsUnsupported;
                }
                if (regexItem.IsMatch(objECMAppSpecification.FormatErrorMessage))
                {
                    formatErrMsg = objECMAppSpecification.FormatErrorMessage;
                }
                if (regexItem.IsMatch(objECMAppSpecification.SizeErrorMessage))
                {
                    sizeErrMsg = objECMAppSpecification.SizeErrorMessage;
                }

                supportedextns = suppFormat.Split(',');
                unsupportedextns = unsuppFormat.Split(',');

                fileSize = File.ReadAllBytes(fullpath).Length; // System.IO.FileInfo(filename).Length;
                extension = System.IO.Path.GetExtension(fullpath).ToLower();

                limit = size * 1024;

                if (fileSize > limit)
                {
                    Response.Write(string.Concat(sizeErrMsg, " ", size, " KB"));
                    return false;
                }
                else if (extension == ".exe" || extension == ".dll")
                {
                    Response.Write("Executable files(.exe/.dll) are not supported for upload");
                    return false;
                }
                else if ((suppFormat == "*") && (unsuppFormat == ".exe"))
                {
                    return true;
                }
                else if ((suppFormat == "*") && (unsuppFormat != ".exe") && unsupportedextns.Contains(extension))
                {
                    Response.Write(string.Concat(formatErrMsg, " ", unsuppFormat));
                    return false;
                }
                else if ((suppFormat != "*") && (unsuppFormat == ".exe") && (!supportedextns.Contains(extension)))
                {
                    Response.Write(string.Concat(formatErrMsg, " ", suppFormat));
                    return false;
                }
                else if ((suppFormat != "*") && (unsuppFormat != ".exe") && unsupportedextns.Contains(extension))
                {
                    Response.Write(string.Concat(formatErrMsg, " ", suppFormat));
                    return false;
                }
                else
                {
                    return true;
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
                return false;
            }
        }

        /// <summary>
        /// 923568 - To validate bulk upload file
        /// </summary>
        /// <param name="filetypes"> file types </param>
        /// <param name="file"> file to upload </param>
        /// <returns>string filename and exception</returns>
        private string[] checkFileUpload(string[] filetypes, int file)
        {

            string exception = string.Empty;

            HttpPostedFile selectFile = Request.Files[file];

            //check fileName is encrypt
            string fileName = EncodeHelper.HtmlEncode(Path.GetFileName(selectFile.FileName));
            string extension = Path.GetExtension(fileName.Replace("'", string.Empty).
                                    Replace(@"\", string.Empty)).ToString().ToLower();
            var rootPath = Server.MapPath("~/ExcelFile/");
            string strFileName = DateTime.Now.ToString("ddMMyyyy_HHmmss");

            var nameExt = string.Concat(fileName, extension);
            string fullpath = Path.Combine(rootPath, nameExt);

            //1.check file type
            if (!filetypes.Contains(extension))
            {
                exception += "Upload a file in " + string.Join(",", filetypes) + " format/";
            }
            //2.double extension

            else if (fileName.Count(t => t == '.') >= 2)
            {
                exception += "upload a file in single extension/";
            }
            //3.check file size
            else if (selectFile.ContentLength > 5242880)
            {
                exception += "uploaded file should be less than 5MB/";
            }
            exception = exception != "" ? exception.Remove(exception.Length - 1, 1) : exception;
            string[] retval = new string[3] { fullpath, exception, fileName };

            return retval;
        }
    }
}

This is my Spay.BAL(APACUtilityBAL.cs)

//-----------------------------------------------------------------------
// <copyright file="APACUtilityBAL.cs" company="Special pay">
//     Copyright (c) Special pay Enterprises. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace SPay.BAL.APAC_UtilityBAL
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using System.Text;
    using OneC.Spay.DC.UtilityDC;
    using SPay.DAL.APAC_UtilityDAL;
    using SPay.DC.UtilityDC;

    /// <summary>
    /// Utility Business Layer for APAC region
    /// </summary>
    public sealed class APACUtilityBAL : IDisposable
    {
        /// <summary>
        /// Method to get the Policy Page details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>status on getting the Policy Page details</returns>
        public static DataSet GetPolicyPageDetails(ComponentDetails objcompDet)
        {
            return APACUtilityDAL.GetPolicyPageDetails(objcompDet);
        }

        /// <summary>
        /// Method to get the SetID details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>SetID details</returns>
        public static DataSet GetSetIdDetails(ComponentDetails objCompDet)
        {
            return APACUtilityDAL.GetSetIdDetails(objCompDet);
        }
        /// <summary>
        /// Method to get the RTT details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>RTT details</returns>
        public static DataSet GetRTTDetails(ComponentDetails objCompDet)
        {
            return APACUtilityDAL.GetRTTDetails(objCompDet);
        }

        /// <summary>
        /// The Get Shift Details
        /// </summary>
        /// <param name="objCompDet">The obj CompDet</param>
        /// <returns>Return the value</returns>
        public static DataSet GetShiftDetails(ComponentDetails objCompDet)
        {
            return APACUtilityDAL.GetShiftDetails(objCompDet);
        }

        /// <summary>
        /// Method to get the Grade details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>Grade Details</returns>
        public static DataSet GetGradeDetails(ComponentDetails objcompDet)
        {
            return APACUtilityDAL.GetGradeDetails(objcompDet);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetUploaderValidDataSGP(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidDataSGP(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetUploaderValidDataAPAC(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidDataAPAC(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetUploaderValidDataCE(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidDataCE(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetUploaderValidDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidDataNLD(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetOCAPolicyData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetOCAPolicyData(objCompDetails);
        }

        /// <summary>Method to get the empty template url</summary>
        /// <param name="objdetails"> passing object </param> 
        /// <returns>empty template url</returns>
        public static DataSet GetEmptyTemplateURL(FileUploadDetails objdetails)
        {
            return APACUtilityDAL.GetEmptyTemplateURL(objdetails);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveUploaderNewData(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.SaveUploaderNewData(objUploadData);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveUploaderNewDataNLD(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.SaveUploaderNewDataNLD(objUploadData);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveUploaderDataCE(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.SaveUploaderDataCE(objUploadData);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveUploaderNewDataCE(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.SaveUploaderNewDataCE(objUploadData);
        }


        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="franceSFUpdate"> List of Shift Data </param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> StopPaymentUploaderValidData(UploaderData objShiftDetails, List<string> franceSFUpdate)
        {
            return APACUtilityDAL.StopPaymentUploaderValidData(objShiftDetails, franceSFUpdate);
        }


        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateValidDataNLD(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateValidDataNLD(objUploadData);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateValidDataCE(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateValidDataCE(objUploadData);
        }

       
        /// <summary>Method to update the joining bonus exception data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the joining bonus exception data </returns>
        public static DataSet UpdateExceptionDataNLD(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateExceptionDataNLD(objUploadData);
        }

        /// <summary>Method to update the joining bonus exception data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the joining bonus exception data </returns>
        public static DataSet UpdateExceptionDataCE(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateExceptionDataCE(objUploadData);
        }

        /// <summary>
        /// 298312: Method to get My pay TRT Payment Mailer Details
        /// </summary>
        /// <param name="flag">Flag number</param>
        /// <param name="componentId">component Id</param>
        /// <param name="compName">component Name</param>
        /// <param name="countryID">country ID</param>
        /// <returns>My pay status Mailer</returns>
        public static DataSet GetFreezePayrollMailerDetails(int flag, string componentId, string compName, int countryID)
        {
            return APACUtilityDAL.GetFreezePayrollMailerDetails(flag, componentId, compName, countryID);
        }

        /// <summary>Method to get the report with valid data in push to my pay page</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>Valid data report</returns>
        public static DataSet GenerateReportDataAPAC(ReportDetails objreport)
        {
            return APACUtilityDAL.GenerateReportDataAPAC(objreport);
        }

        /// <summary>Method to get the report with valid data in push to my pay page</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>Valid data report</returns>
        public static DataSet GenerateReportDataNLD(ReportDetails objreport)
        {
            return APACUtilityDAL.GenerateReportDataNLD(objreport);
        }

        /// <summary>Method to get the report with valid data in push to my pay page</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>Valid data report</returns>
        public static DataSet GenerateReportData(ReportDetails objreport)
        {
            return APACUtilityDAL.GenerateReportData(objreport);
        }

        /// <summary>Method to get the report with valid data in push to my pay page</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>Valid data report</returns>
        public static DataSet GenerateReportDataCE(ReportDetails objreport)
        {
            return APACUtilityDAL.GenerateReportDataCE(objreport);
        }

        /// <summary>
        /// to Get consolidated Approved Data Report for country wise
        /// </summary>
        /// <param name="objreport"></param>
        /// <returns></returns>
        public static DataSet GenerateConsolidatedApprovedDataReportDataCE(ReportDetails objreport)
        {
            return APACUtilityDAL.GenerateConsolidatedApprovedDataReportDataCE(objreport);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateValidData(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateValidData(objUploadData);
        }

        /// <summary>Method to get the Tech team recipients</summary>
        /// <param name="objContAccess">passing object </param>
        /// <returns>Tech team recipients</returns>
        public static DataSet GetTechTeamRecipients(ControlAccess objContAccess)
        {
            return APACUtilityDAL.GetTechTeamRecipients(objContAccess);
        }

        /// <summary>Method to get the rejected data in valid tab for the uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Rejected data</returns>
        public static string RejectUploaderValidData(UploaderData objUploadData)
        {
            return APACUtilityDAL.RejectUploaderValidData(objUploadData);
        }

        /// <summary>Method to get the rejected data in valid tab for the uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Rejected data</returns>
        public static string RejectUploaderValidDataNLD(UploaderData objUploadData)
        {
            return APACUtilityDAL.RejectUploaderValidDataNLD(objUploadData);
        }

        /// <summary>Method to get the reject mailer recipients</summary>
        /// <param name="objContAccess">passing object </param>
        /// <returns>Tech team recipients</returns>
        public static DataSet GetRejectMailerDetails(ControlAccess objContAccess)
        {
            return APACUtilityDAL.GetRejectMailerDetails(objContAccess);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet ApproveUploaderValidData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.ApproveUploaderValidData(objCompDetails);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet ApproveUploaderValidDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.ApproveUploaderValidDataNLD(objCompDetails);
        }

        /// <summary>Method to get the Approve mailer recipients</summary>
        /// <param name="objContAccess">passing object </param>
        /// <returns>Tech team recipients</returns>
        public static DataSet GetApproveMailerDetails(ControlAccess objContAccess)
        {
            return APACUtilityDAL.GetApproveMailerDetails(objContAccess);
        }

        /// <summary>
        /// Method to get mailers that is active
        /// </summary>
        /// <param name="objMail">passing object</param>
        /// <returns>active mailer status</returns>
        public static int GetMailerActiveDetails(MailerLog objMail)
        {
            return APACUtilityDAL.GetMailerActiveDetails(objMail);
        }

        /// <summary>
        /// Method to log mailer details
        /// </summary>
        /// <param name="objMailerLog"> passing object</param>
        public static void LogMailerDetails(MailerLog objMailerLog)
        {
            APACUtilityDAL.LogMailerDetails(objMailerLog);
        }

        /// <summary>Method to update the joining bonus exception data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the joining bonus exception data </returns>
        public static DataSet UpdateExceptionData(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateExceptionData(objUploadData);
        }

        /// <summary>Method to get the recruitment type for referral bonus</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Recruitment type for referral bonus</returns>
        public static DataSet GetRecruitmentType(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetRecruitmentType(objCompDetails);
        }

        /// <summary>Method to get the recruitment type for referral bonus</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Recruitment type for referral bonus</returns>
        public static DataSet GetDeductionType(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetDeductionType(objCompDetails);
        }

        /// <summary>Method to get the recruitment type for referral bonus</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Recruitment type for referral bonus</returns>
        public static DataSet GetInstallmentType(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetInstallmentType(objCompDetails);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param>
        /// <param name="countryID">country ID </param>
        /// <returns>valid data pushed</returns>
        public static DataSet SGPGetValidData(int componentid, int countryID)
        {
            return APACUtilityDAL.SGPGetValidData(componentid, countryID);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param> 
        /// <param name="countryID">CountryID ID </param> 
        /// <returns>valid data pushed</returns>
        public static DataSet NLDGetValidData(int componentid, int countryID)
        {
            return APACUtilityDAL.NLDGetValidData(componentid, countryID);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param> 
        /// <param name="countryID">Country Id </param> 
        /// <param name="componentName">Component Name</param> 
        /// <returns>valid data pushed</returns>
        public static DataSet APACGetValidData(int componentid, int countryID, string componentName)
        {
            return APACUtilityDAL.APACGetValidData(componentid, countryID, componentName);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param> 
        /// <param name="countryID">Country Id </param> 
        /// <param name="componentName">Component Name</param> 
        /// <returns>valid data pushed</returns>
        public static DataSet CEGetValidData(int componentid, int countryID, string componentName)
        {
            return APACUtilityDAL.CEGetValidData(componentid, countryID, componentName);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param> 
        /// <param name="countryID">Country Id </param> 
        /// <param name="componentName">Component Name</param> 
        /// <returns>valid data pushed</returns>
        public static DataSet UKIGetValidData(int componentid, int countryID, string componentName)
        {
            return APACUtilityDAL.UKIGetValidData(componentid, countryID, componentName);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param> 
        /// <param name="countryID">Country Id </param> 
        /// <param name="componentName">Component Name</param> 
        /// <returns>valid data pushed</returns>
        public static DataSet PHLGetValidData(int componentid, int countryID, string componentName)
        {
            return APACUtilityDAL.PHLGetValidData(componentid, countryID, componentName);
        }

        /// <summary>Method to get the recruitment type for referral bonus</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Recruitment type for referral bonus</returns>
        public static DataSet GetCurrencyCode(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetCurrencyCode(objCompDetails);
        }

        /// <summary>Method to view the exception data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the exception data for uploader</returns>
        public static DataSet GetUploaderExceptionViewData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionViewData(objCompDetails);
        }

        /// <summary>Method to view the exception data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the exception data for uploader</returns>
        public static DataSet GetUploaderExceptionViewDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionViewDataNLD(objCompDetails);
        }

        /// <summary>Method to view the exception data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the exception data for uploader</returns>
        public static DataSet GetAPACUploaderExceptionViewData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACUploaderExceptionViewData(objCompDetails);
        }

        /// <summary>
        /// Method to get the Special case reason
        /// </summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Special Case Reason</returns>
        public static DataSet GetSpecialCaseReasons(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetSpecialCaseReasons(objCompDetails);
        }

        /// <summary>
        /// Method to get the Special case reason
        /// </summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Special Case Reason</returns>
        public static DataSet GetNLDSSpecialCaseReason(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetNLDSSpecialCaseReason(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetBGstatus(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetBGstatus(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetSignonBonusDropdownDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetSignonBonusDropdownDetails(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetPayoutTypeonchangeofsubcomponent(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetPayoutTypeonchangeofsubcomponent(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetDropdownDetailsAPAC(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetDropdownDetailsAPAC(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetDropdownDetailsCE(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetDropdownDetailsCE(objCompDetails);
        }

        /// <summary>Method to call popup details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Returns Reversal POPUP details</returns>
        public static DataSet GetReversalDropdownDetailsNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetReversalDropdownDetailsNLD(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetRelocationDropdownDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetRelocationDropdownDetails(objCompDetails);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet GetUploaderValidViewData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidViewData(objCompDetails);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet GetAPACUploaderValidViewData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACUploaderValidViewData(objCompDetails);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet GetUploaderValidViewDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidViewDataNLD(objCompDetails);
        }

        /// <summary>
        /// Method to get data for other geography tab
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>data in other geography</returns>
        public static DataSet GetOtherGeographyUploaderData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetOtherGeographyUploaderData(objCompDetails);
        }

        /// <summary>Method to get the template for  currency template</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetCurrencyDataTemplateSGP(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetCurrencyDataTemplateSGP(objuploaderData);
        }

        /// <summary>
        /// Method to Cut off date details
        /// </summary>
        /// <param name="objinputs"> passing object</param>
        public static void SaveCuttOffDateDetails(SaveCuttOffDateDetails objinputs)
        {
            APACUtilityDAL.SaveCuttOffDateDetails(objinputs);
        }

        /// <summary>
        /// Method to get the other details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>status on getting the other details</returns>
        public static DataSet GetOtherDetails(ComponentDetails objcompDet)
        {
            return APACUtilityDAL.GetOtherDetails(objcompDet);
        }

        /// <summary>
        /// Method to get the other details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>status on getting the other details</returns>
        public static DataSet GetNLDPolicyDetails(ComponentDetails objcompDet)
        {
            return APACUtilityDAL.GetNLDPolicyDetails(objcompDet);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetDataTemplateSGP(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetDataTemplateSGP(objuploaderData);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetDataTemplateGradeAmount(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetDataTemplateGradeAmount(objuploaderData);
        }

        /// <summary>
        /// Method to get the grade amount details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>grade amount details</returns>
        public static DataSet GetGradeAmountDetails(ComponentDetails objcompDet)
        {
            return APACUtilityDAL.GetGradeAmountDetails(objcompDet);
        }

        /// <summary>
        /// 311556: Method to move Singapore special pay out
        /// </summary>
        /// <param name="objpolicyDetails">policy object</param>
        /// <returns>string status</returns>
        public static string UpdateSGPPolicyDetails(SPay.DC.UtilityDC.PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdateSGPPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to get the SetID details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>SetID details</returns>
        public static DataSet GetSDADetails(ComponentDetails objCompDet)
        {
            using (APACUtilityDAL objDAL = new APACUtilityDAL())
            {
                return APACUtilityDAL.GetSDADetails(objCompDet);
            }
        }

        /// <summary>
        /// Method to get the Statutory holiday details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>Statutory holiday details</returns>
        public static DataSet GetStatutoryhoildayDetails(ComponentDetails objCompDet)
        {
            return APACUtilityDAL.GetStatutoryhoildayDetails(objCompDet);
        }

        /// <summary>
        /// Method to get the Statutory holiday details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>Statutory holiday details</returns>
        public static DataSet GetStatutoryAmountDetails(ComponentDetails objCompDet)
        {
            return APACUtilityDAL.GetStatutoryAmountDetails(objCompDet);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetAPACProjectDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACProjectDetails(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetServiceApartmentRecoveryPolicyDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetServiceApartmentRecoveryPolicyDetails(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetSchoolFeesPolicyDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetSchoolFeesPolicyDetails(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetPolicyComponentDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetPolicyComponentDetails(objCompDetails);
        }

        /// <summary>Method to get the valid data for Exception Associates</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetExceptionAssociateDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetExceptionAssociateDetails(objCompDetails);
        }



        /// <summary>Method to update the policy details for referral bonus</summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the referral bonus policy details </returns>
        public static string UpdateRBPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdateRBPolicyDetails(objpolicyDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetAPACProjectDetailssearch(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACProjectDetailssearch(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetAPACSchoolFeeAssociateSearch(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACSchoolFeeAssociateSearch(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetSARGuestHouseSearch(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetSARGuestHouseSearch(objCompDetails);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet ActivateProjectDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.ActivateProjectDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet InsertSchoolFeesPolicyDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertSchoolFeesPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet InsertAPACSchoolFeesPolicyDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertAPACSchoolFeesPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet InsertServiceApartmentRecoveryPolicyDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertServiceApartmentRecoveryPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet InsertTransportAllowancePolicyDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertTransportAllowancePolicyDetails(objinputs);
        }
        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet InsertLunchVoucherAllownceDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertLunchVoucherAllownceDetails(objinputs);
        }
        /// <summary>
        /// Component Details
        /// </summary>
        /// <param name="objinputs">object details</param>
        /// <returns>component name details</returns>
        public static DataSet InsertComponentDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertComponentDetails(objinputs);
        }


        /// <summary>
        /// Exception Associate Details
        /// </summary>
        /// <param name="objinputs">object details</param>
        /// <returns>Exception Associate ID details</returns>
        public static DataSet InsertExpAssociateDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertExpAssociateDetails(objinputs);
        }


        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static string UpdateAPACSchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            return APACUtilityDAL.UpdateAPACSchoolFeesPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="franceSFUpdate"> List of Shift Data </param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateFranceSchoolFeesPolicyDetails
        (PolicyDetails objShiftDetails, List<string> franceSFUpdate)
        {
            return APACUtilityDAL.UpdateFranceSchoolFeesPolicyDetails(objShiftDetails, franceSFUpdate);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static string UpdateCESchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            return APACUtilityDAL.UpdateCESchoolFeesPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static string UpdateSchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            return APACUtilityDAL.UpdateSchoolFeesPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static string UpdateServiceApartmentRecoveryPolicyDetails(PolicyDetails objinputs)
        {
            return APACUtilityDAL.UpdateServiceApartmentRecoveryPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static string UpdateFranceTransportPolicyDetails(PolicyDetails objinputs)
        {
            return APACUtilityDAL.UpdateFranceTransportPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        public static void ChangeUserStatus(ChangeUserStatus objinputs)
        {
            APACUtilityDAL.ChangeUserStatus(objinputs);
        }

        /// <summary>
        /// Method to update the policy details for Joining Bonus
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Joining Bonus Policy details  </returns>
        public static string UpdatePolicyDetails(PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdatePolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to update the Statutory Holiday for policy details 
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Statutory Holiday Policy details  </returns>
        public static string UpdateStatutoryHolidayPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdateStatutoryHolidayPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to update the policy details for Joining Bonus
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Joining Bonus Policy details  </returns>
        public static string UpdateJBPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdateJBPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to update the policy details for Joining Bonus
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Joining Bonus Policy details  </returns>
        public static string UpdatePolicyGridDetails(SGPUploadData objpolicyDetails)
        {
            return APACUtilityDAL.UpdatePolicyGridDetails(objpolicyDetails);
        }

        /// <summary>
        /// 311556: Method to move Singapore special pay out
        /// </summary>
        /// <param name="dtexcel">Excel records to be processed</param>
        /// <param name="componentID">Component Group details</param>
        /// <param name="loginId">User details</param>
        /// <param name="criteriaType">Criteria Type</param>
        /// <param name="countryID">country ID </param>
        public static void MoveAPACDatatabletoDB(
            DataTable dtexcel,
            string componentID,
            string loginId,
            string criteriaType,
            int countryID,
            int GradeAmount)
        {
            APACUtilityDAL.MoveAPACDatatabletoDB(dtexcel, componentID, loginId, criteriaType, countryID, GradeAmount);
        }

        /// <summary>
        /// 311556: Method to move Singapore special pay out
        /// </summary>
        /// <param name="dtexcel">Excel records to be processed</param>
        /// <param name="componentID">Component Group details</param>
        /// <param name="loginId">User details</param>
        /// <param name="criteriaType">Criteria Type</param>
        /// <param name="countryID">country ID </param>
        public static void MoveAPACSFDatatabletoDB(
            DataTable dtexcel,
            string componentID,
            string loginId,
            string criteriaType,
            int countryID)
        {
            APACUtilityDAL.MoveAPACSFDatatabletoDB(dtexcel, componentID, loginId, criteriaType, countryID);
        }

        /// <summary>
        /// Method to update the policy details for Sixth day allowance
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the policy details on Sixth Day Allowance</returns>
        public static string UpdateSixthDayPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdateSixthDayPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to Create the User Role
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        public static void CreateUserRole(CreateUserRole objinputs)
        {
            APACUtilityDAL.CreateUserRole(objinputs);
        }

        /// <summary>
        /// Method to get the mailer details
        /// </summary>
        /// <param name="objinputs">passing object </param>
        /// <returns>valid data for Total rewards team</returns>
        public static DataSet FetchRoleGridDetails(CreateUserRole objinputs)
        {
            return APACUtilityDAL.FetchRoleGridDetails(objinputs);
        }


        /// <summary>
        /// Method to get the valid data for Total rewards team
        /// </summary>
        /// <param name="objCompDetails">passing object </param>
        /// <returns>valid data for Total rewards team</returns>
        public static DataSet GetTotalRewardsTeamValidData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetTotalRewardsTeamValidData(objCompDetails);
        }

        /// <summary>
        /// Method to get the HCM cut off end date
        /// </summary>
        /// <param name="objRoles"> passing object</param>
        /// <returns>HCM cut off end date</returns>
        public static DataSet GetComponentGroupNames(CreateUserRole objRoles)
        {
            return APACUtilityDAL.GetComponentGroupNames(objRoles);
        }

        /// <summary>Method to get dynamic data</summary>
        /// <param name="objUser">passing object </param>
        /// <returns>Dynamic data</returns>
        public static DataSet Getdatadynamic(CreateUserRole objUser)
        {
            return APACUtilityDAL.Getdatadynamic(objUser);
        }

        /// <summary>
        /// Method to get the duplicate data for Total rewards team
        /// </summary>
        /// <param name="objCompDetails">passing object </param>
        /// <returns>duplicate data for Total rewards team</returns>
        public static DataSet GetTotalRewardsTeamDuplicatesData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetTotalRewardsTeamDuplicatesData(objCompDetails);
        }

        /// <summary>Method to Get Currency Drop Down Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Currency details</returns>
        public static DataSet GetCurrencyDropDownDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetCurrencyDropDownDetails(objCompDetails);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objCurrencyData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveCurrencyNewData(CurrencyData objCurrencyData)
        {
            return APACUtilityDAL.SaveCurrencyNewData(objCurrencyData);
        }

        /// <summary>Method to update the currency new data into the table </summary>
        /// <param name="objCurrencyData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet ValidateExceptionCurrencyUpdateData(CurrencyData objCurrencyData)
        {
            return APACUtilityDAL.ValidateExceptionCurrencyUpdateData(objCurrencyData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeleteUploaderValidData(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderValidData(objUploadData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeleteUploaderValidDataNLD(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderValidDataNLD(objUploadData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeleteUploaderValidDataAPAC(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderValidDataAPAC(objUploadData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeletePolicyData(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeletePolicyData(objUploadData);
        }

        /// <summary>Method to Delete the exception data by Uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>data that is present in exception for uploader</returns>
        public static DataSet DeleteUploaderExceptionData(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderExceptionData(objUploadData);
        }

        /// <summary>Method to Delete the exception data by Uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>data that is present in exception for uploader</returns>
        public static DataSet DeleteUploaderExceptionDataNLD(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderExceptionDataNLD(objUploadData);
        }

        /// <summary>Method to Delete the exception data by Uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>data that is present in exception for uploader</returns>
        public static DataSet DeleteUploaderExceptionDataAPAC(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderExceptionDataAPAC(objUploadData);
        }

        /// <summary>Method to Get customize grid Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Customize grid details</returns>
        public static DataSet GetComponentTypeandName(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetComponentTypeandName(objCompDetails);
        }

        /// <summary>Method to Get customize grid Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Customize grid details</returns>
        public static DataSet GetAPACComponentTypeandName(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACComponentTypeandName(objCompDetails);
        }

        /// <summary>Method to view the valid data for an currency</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data</returns>
        public static DataSet GetValidViewDataCurrency(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetValidViewDataCurrency(objCompDetails);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGrid(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGrid(userID, roleID, countryID);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGridNLD(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGridNLD(userID, roleID, countryID);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGridAPAC(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGridAPAC(userID, roleID, countryID);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGridCE(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGridCE(userID, roleID, countryID);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGridUKI(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGridUKI(userID, roleID, countryID);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGridPHL(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGridPHL(userID, roleID, countryID);
        }

        /// <summary>Method to push data to my pay</summary>
        /// <param name="compId"> string data type </param>
        /// <param name="userid"> integer data type </param> 
        /// <param name="countryID"> Country ID </param> 
        public static void FreezePayrollData(string compId, int userid, int countryID)
        {
            APACUtilityDAL.FreezePayrollData(compId, userid, countryID);
        }

        /// <summary>Method to push data to my pay</summary>
        /// <param name="compId"> string data type </param>
        /// <param name="userid"> integer data type </param> 
        /// <param name="countryID"> Country ID </param> 
        /// <param name="compName"> Component Name </param> 
        public static void FreezePayrollDataAPAC(string compId, int userid, int countryID, string compName)
        {
            APACUtilityDAL.FreezePayrollDataAPAC(compId, userid, countryID, compName);
        }

        /// <summary>Method to push data to my pay</summary>
        /// <param name="compId"> string data type </param>
        /// <param name="userid"> integer data type </param> 
        /// <param name="countryID"> Country ID </param> 
        /// <param name="compName"> Component Name </param> 
        public static void FreezePayrollDataCE(string compId, int userid, int countryID, string compName)
        {
            APACUtilityDAL.FreezePayrollDataCE(compId, userid, countryID, compName);
        }

        /// <summary>
        /// Freeze data for UK & I
        /// </summary>
        /// <param name="userid">User ID.</param>
        /// <param name="countryID">Country ID</param>
        /// <returns>Freeze Data</returns>
        public static DataSet FreezePayrollDataUKI(int userid, int countryID)
        {
            return APACUtilityDAL.FreezePayrollDataUKI(userid, countryID);
        }

        /// <summary>
        /// Freeze data for PHL
        /// </summary>
        /// <param name="userid">User ID.</param>
        /// <param name="countryID">Country ID</param>
        /// <returns>Freeze Data</returns>
        public static DataSet FreezePayrollDataPHL(int userid, int countryID)
        {
            return APACUtilityDAL.FreezePayrollDataPHL(userid, countryID);
        }

        /// <summary>
        /// Freeze data pushed update
        /// </summary>
        /// <param name="userid">User ID.</param>
        /// <param name="countryID">Country ID</param>
        /// <param name="status">push status</param>
        public static void FreezePayrollDataPushUpdate(int userid, int countryID, int status)
        {
            APACUtilityDAL.FreezePayrollDataPushUpdate(userid, countryID, status);
        }

        /// <summary>Method to push data to my pay</summary>
        /// <param name="compId"> string data type </param>
        /// <param name="userid"> integer data type </param> 
        /// <param name="countryID"> Country ID </param> 
        public static void FreezePayrollDataNLD(string compId, int userid, int countryID)
        {
            APACUtilityDAL.FreezePayrollDataNLD(compId, userid, countryID);
        }

        /// <summary>
        /// Method to get allowance and the corresponding shift type
        /// </summary> 
        /// <param name="objUploadData">passing object</param> 
        /// <returns>allowance and the corresponding shift type</returns>
        public static DataSet GetAllowanceandShiftType(UploaderData objUploadData)
        {
            return APACUtilityDAL.GetAllowanceandShiftType(objUploadData);
        }

        /// <summary>
        /// Method to get days type
        /// </summary> 
        /// <param name="objUploadData">passing object</param> 
        /// <returns>allowance and the corresponding shift type</returns>
        public static DataSet GetDaysType(UploaderData objUploadData)
        {
            return APACUtilityDAL.GetDaysType(objUploadData);
        }

        /// <summary>Method to update the currency new data into the table </summary>
        /// <param name="objCurrencyData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateCurrencyData(CurrencyData objCurrencyData)
        {
            return APACUtilityDAL.UpdateCurrencyData(objCurrencyData);
        }

        /// <summary>
        /// Method to valid data for shift allowance to Uploader
        /// </summary>
        /// <param name="objCompDetails"> passing object</param>
        /// <returns>Shift allowance valid data</returns>
        public static DataSet GetUploaderShiftAllowanceValidData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderShiftAllowanceValidData(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionData(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionDataSGP(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionDataSGP(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionDataAPAC(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionDataAPAC(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionDataCE(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionDataCE(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionDataNLD(objCompDetails);
        }

        /// <summary>
        /// Method to get the cut off date details
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>cut off date details</returns>
        public static DataSet GetCuttOffDateDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetCuttOffDateDetails(objCompDetails);
        }

        /// <summary>
        /// Method to Check Project Mapping
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>project details</returns>
        public static DataSet CheckProjectMapping(PolicyDetails objCompDetails)
        {
            return APACUtilityDAL.CheckProjectMapping(objCompDetails);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetDataTemplate(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetDataTemplate(objuploaderData);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetNLDDataTemplate(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetNLDDataTemplate(objuploaderData);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetAPACDataTemplate(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetAPACDataTemplate(objuploaderData);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetCEDataTemplate(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetCEDataTemplate(objuploaderData);
        }

        /// <summary>Method to get the Processed Report</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Processed Report</returns>
        public static DataSet GetProcessedReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetProcessedReport(objuploaderData);
        }

        /// <summary>Method to get the Processed Report</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Processed Report</returns>
        public static DataSet GetNLDProcessedReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetNLDProcessedReport(objuploaderData);
        }

        /// <summary>Method to get the Processed Report</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Processed Report</returns>
        public static DataSet GetAPACProcessedReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetAPACProcessedReport(objuploaderData);
        }

        /// <summary>Method to get the Processed Report</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Processed Report</returns>
        public static DataSet GetCEProcessedReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetCEProcessedReport(objuploaderData);
        }

        /// <summary>
        /// Method to get allowance type and approval type with expiry date
        /// </summary>
        /// <param name="objUploadData"> passing object</param>
        /// <returns>gets approval expiry date with approval type</returns>
        public static DataSet GetEditData(UploaderData objUploadData)
        {
            return APACUtilityDAL.GetEditData(objUploadData);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetAssociateProjectIdAndNameForUploader(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetAssociateProjectIdAndNameForUploader(objcompDetails);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetCustomerName(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetCustomerName(objcompDetails);
        }

        /// <summary>Method to get the associate details for joining bonus</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>associate details for joining bonus</returns>
        public static DataSet GetAssociateDetailsforJB(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetAssociateDetailsforJB(objcompDetails);
        }

        /// <summary>Method to get the associate details for joining bonus</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>associate details for joining bonus</returns>
        public static DataSet GetAPACSchoolFeesAssociateDetails(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetAPACSchoolFeesAssociateDetails(objcompDetails);
        }

        /// <summary>Method to get the associate details for joining bonus</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>associate details for joining bonus</returns>
        public static DataSet GetCELunchVoucherLeaveDetails(SGPUploadData objcompDetails)
        {
            return APACUtilityDAL.GetCELunchVoucherLeaveDetails(objcompDetails);
        }
        /// <summary>
        /// Method to get the reversal valid data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>reversal valid data</returns>
        public static DataSet GetReversalValidData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetReversalValidData(objCompDetails);
        }

        /// <summary>
        /// Method to get the reversal valid data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>reversal valid data</returns>
        public static DataSet GetReversalValidDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetReversalValidDataNLD(objCompDetails);
        }

        /// <summary>
        /// Method to get the reversal exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>reversal exception data</returns>
        public static DataSet GetReversalExceptionData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetReversalExceptionData(objCompDetails);
        }

        /// <summary>
        /// Method to get the reversal exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>reversal exception data</returns>
        public static DataSet GetReversalExceptionDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetReversalExceptionDataNLD(objCompDetails);
        }

        /// <summary>
        /// Method to delete the reversal data
        /// </summary>
        /// <param name="objUploadData"> passing object</param>
        /// <returns>status of the delete reversal data </returns>
        public static DataSet DeleteReversalData(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteReversalData(objUploadData);
        }

        /// <summary>
        /// Method to get the processed reversal report
        /// </summary>
        /// <param name="objuploaderData">passing object</param>
        /// <returns>processed reversal report</returns>
        public static DataSet GetReversalProcessedReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetReversalProcessedReport(objuploaderData);
        }
        /// <summary>
        /// Method to get the Lunch Voucher year report
        /// </summary>
        /// <param name="objuploaderData">passing object</param>
        /// <returns>Lunch Voucher Year Report</returns>
        public static DataSet GetLunchVoucherYearReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetLunchVoucherYearReport(objuploaderData);
        }
        /// <summary>
        /// Method to get the reversal data template
        /// </summary>
        /// <param name="objuploaderData">passing object</param>
        /// <returns>reversal data template</returns>
        public static DataSet GetReversalDataTemplate(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetReversalDataTemplate(objuploaderData);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetAssociateProjectIdAndName(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetAssociateProjectIdAndName(objcompDetails);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveNLDReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveNLDReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveAPACReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveAPACReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveJBReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveJBReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveShiftPayoutReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveShiftPayoutReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveSARReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveSARReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveAPReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveAPReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateNLDReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateNLDReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateShiftTimepayoutReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateShiftTimepayoutReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateSARReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateSARReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateAPReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateAPReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateAPACReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateAPACReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateNLDExceptionReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateNLDExceptionReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateExceptionReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionShiftTimepayoutReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateExceptionShiftTimepayoutReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionSARReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateExceptionSARReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionAPReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateExceptionAPReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionAPACReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateExceptionAPACReversalData(objReversalData);
        }

        /// <summary>Method to view the valid data for an currency</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data</returns>
        public static DataSet GetSGPReversalViewData(TrtReversal objCompDetails)
        {
            return APACUtilityDAL.GetSGPReversalViewData(objCompDetails);
        }

        /// <summary>Method to view the valid data for an currency</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data</returns>
        public static DataSet GetNLDReversalViewData(TrtReversal objCompDetails)
        {
            return APACUtilityDAL.GetNLDReversalViewData(objCompDetails);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetAssociateProjectIdAndNameForReversal(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetAssociateProjectIdAndNameForReversal(objcompDetails);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateUploaderValidData(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateUploaderValidData(objUploadData);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateUploaderExceptionData(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateUploaderExceptionData(objUploadData);
        }

        /// <summary>Method to save the file upload details to database</summary>
        /// <param name="objFileUploadDetails"> passing object </param> 
        /// <returns>file upload details</returns>
        public static object SaveSGPFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            return APACUtilityDAL.SaveSGPFileUploadDetailstoDB(objFileUploadDetails);
        }

        /// <summary>Method to save the file upload details to database</summary>
        /// <param name="objFileUploadDetails"> passing object </param> 
        /// <returns>file upload details</returns>
        public static object SaveCEFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            return APACUtilityDAL.SaveCEFileUploadDetailstoDB(objFileUploadDetails);
        }

        /// <summary>Method to get the app template ID for SAN</summary>
        /// <returns>app template ID for SAN</returns>
        public static DataSet FetchAppTemplateIdforSAN()
        {
            return APACUtilityDAL.FetchAppTemplateIdforSAN();
        }

        /// <summary>
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification = "Reviewed."),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1002:DoNotExposeGenericLists", Justification = "Reviewed")]
        public static List<List<string>> SaveNewSDAShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return APACUtilityDAL.SaveNewSDAShiftGrid(objShiftDetails, shiftData);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="bpsSda">List of Shift Data</param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateSDAGridData(ShiftDetails objShiftDetails, List<string> bpsSda)
        {
            return APACUtilityDAL.UpdateSDAGridData(objShiftDetails, bpsSda);
        }

        /// <summary>
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification = "Reviewed."),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<List<string>> SaveNewNSAShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return APACUtilityDAL.SaveNewNSAShiftGrid(objShiftDetails, shiftData);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="cliNsa"> List of Shift Data </param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateNSAGridData(ShiftDetails objShiftDetails, List<string> cliNsa)
        {
            return APACUtilityDAL.UpdateNSAGridData(objShiftDetails, cliNsa);
        }

        /// <summary>
        /// Method to save the shift details
        /// </summary>
        /// <param name="objpolicyDetails"> passing object</param>
        /// <param name="policyData"> List of Shift Data </param>
        /// <returns>returns the status</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewPolicyGrid(ShiftDetails objpolicyDetails, List<string> policyData)
        {
            return APACUtilityDAL.SaveNewPolicyGrid(objpolicyDetails, policyData);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet GetAccountNameDetails(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.GetAccountNameDetails(objUploadData);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetDropdownSPDDataUK(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetDropdownSPDDataUK(objCompDetails);
        }

        /// <summary>Method to get the empty template url</summary>
        /// <param name="objdetails"> passing object </param> 
        /// <returns>empty template url</returns>
        public static DataSet GetFAQDocument(FileUploadDetails objdetails)
        {
            return APACUtilityDAL.GetFAQDocument(objdetails);
        }

        /// <summary>
        /// Method to check associate is servian or contino of Australia
        /// </summary>
        /// <param name="objdetails">passing object </param>
        /// <returns>servian assocites</returns>
        public static DataSet IsAssociateServianContino(ComponentDetails objdetails)
        {
            return APACUtilityDAL.IsAssociateServianContino(objdetails);
        }


        public static string IsAssociateExist(string associateId)
        {
            return APACUtilityDAL.IsAssociateExist(associateId);
        }
        /// <summary>
        /// Method to check associate is servian or contino of Australia
        /// </summary>
        /// <param name="objdetails">passing object </param>
        /// <returns>servian assocites</returns>
        public static DataSet GetAPACProject(ComponentDetails objdetails)
        {
            return APACUtilityDAL.GetAPACProject(objdetails);
        }

        /// <summary>
        /// Method to Dispose
        /// </summary>
        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }
    }
}

This is my Spay.DAL(APACUtilityDAL.cs)

// <copyright file="APACUtilityDAL.cs" company="CTS">
//     Company copyright tag.
// </copyright>

namespace SPay.DAL.APAC_UtilityDAL
{
    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Data;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Text;
    using Microsoft.ApplicationBlocks.Data;
    using OneC.Spay.DC.UtilityDC;
    using SPay.DC.UtilityDC;
    using AzureSQLHelper;
    using SPay.DAL.UtilityDAL;
    using System.Runtime.Remoting.Metadata.W3cXsd2001;

    /// <summary>
    /// Utility Data Layer for APAC region
    /// </summary>
    public class APACUtilityDAL : IDisposable
    {
        /// <summary>
        /// 311556: Connection string from Config.
        /// </summary>
        private static byte[] sqlManagedAzureAD1 = Convert.FromBase64String(ConfigurationManager.ConnectionStrings
        ["SQLManagedAzureAD"].ConnectionString);

        /// <summary>
        /// Decrypted Connection String
        /// </summary>
        private static string conString = Encoding.UTF8.GetString(sqlManagedAzureAD1);

        /// <summary>
        /// 311556: Disposes unused memory.
        /// </summary>        
        public void Dispose()
        {
            ////this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// 311556: Gets Policy page details for components.
        /// </summary>
        /// <param name="objcompDet">Component details.</param> 
        /// <returns>Policy Page details.</returns>
        public static DataSet GetPolicyPageDetails(ComponentDetails objcompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[AccessPolicyPage]", objcompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Set ID details for referral Bonus.
        /// </summary>
        /// <param name="objCompDet">Component details.</param> 
        /// <returns>Set ID details.</returns>
        public static DataSet GetSetIdDetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("Policy.usp_GetSetId", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 930165: Gets RTT details for referral Bonus.
        /// </summary>
        /// <param name="objCompDet">Component details.</param> 
        /// <returns>RTT details.</returns>
        public static DataSet GetRTTDetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetCE_RTTDays", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// The Get Shift Details
        /// </summary>
        /// <param name="objCompDet">The obj CompDet</param>
        /// <returns>Return the value</returns>
        public static DataSet GetShiftDetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_GetShift]", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// To save the cut off date details
        /// </summary>
        /// <param name="objinputs">Cut off date details</param>
        public static void SaveCuttOffDateDetails(SaveCuttOffDateDetails objinputs)
        {
            try
            {
                DBHelper.ExecuteNonQuery("usp_APACSaveCuttOffDateDetails", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidDataSGP(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderValidRecordSGP", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidDataAPAC(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderValidRecordAPAC", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 445918: Gets Uploader data for valid grid for CE region
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidDataCE(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderValidRecord_CE", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidDataNLD(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderValidRecord_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets OCA policy details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetOCAPolicyData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetOCAPolicyData]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Rejects Uploader valid data.
        /// </summary>
        /// <param name="objUploadData">Upload Details.</param> 
        /// <returns>Success message</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1062:Validate arguments of public methods", MessageId = "0", Justification = "Reviewed")]
        public static string RejectUploaderValidData(UploaderData objUploadData)
        {
            try
            {
                string[] pkey = objUploadData.SelectedValues.Split(',');
                string[] reason = objUploadData.RejectionReasonText.Split(',');
                for (int i = 0; i < pkey.Length; i++)
                {
                    objUploadData.SelectedData = pkey[i];
                    objUploadData.RejectionReason = reason[i].ToString();
                    DBHelper.ExecuteNonQuery("usp_RejectData", objUploadData);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Rejects Uploader valid data.
        /// </summary>
        /// <param name="objUploadData">Upload Details.</param> 
        /// <returns>Success message</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1062:Validate arguments of public methods", MessageId = "0", Justification = "Reviewed")]
        public static string RejectUploaderValidDataNLD(UploaderData objUploadData)
        {
            try
            {
                string[] pkey = objUploadData.SelectedValues.Split(',');
                string[] reason = objUploadData.RejectionReasonText.Split(',');
                for (int i = 0; i < pkey.Length; i++)
                {
                    objUploadData.SelectedData = pkey[i];
                    objUploadData.RejectionReason = reason[i].ToString();
                    DBHelper.ExecuteNonQuery("usp_RejectDataNLD", objUploadData);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Rejects Uploader valid data.
        /// </summary>
        /// <param name="objUploadData">Upload Details.</param> 
        /// <returns>Success message</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1062:Validate arguments of public methods", MessageId = "0", Justification = "Reviewed")]
        public static string RejectUploaderValidDataAPAC(UploaderData objUploadData)
        {
            try
            {
                string[] pkey = objUploadData.SelectedValues.Split(',');
                string[] reason = objUploadData.RejectionReasonText.Split(',');
                for (int i = 0; i < pkey.Length; i++)
                {
                    objUploadData.SelectedData = pkey[i];
                    objUploadData.RejectionReason = reason[i].ToString();
                    DBHelper.ExecuteNonQuery("usp_RejectDataAPAC", objUploadData);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Method to get the Tech team recipients
        /// </summary>
        /// <param name="objContAccess">object Access Details</param> 
        /// <returns>Technical team Ids.</returns>
        public static DataSet GetRejectMailerDetails(ControlAccess objContAccess)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetSGPRejectMailerDetails", objContAccess);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet ApproveUploaderValidData(ComponentDetails objCompDetails)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_ApproveData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@componentGroupId", objCompDetails.COMPONENTGROUPID);
                    processCmd.Parameters.AddWithValue("@selectedData", objCompDetails.SelectedData);
                    processCmd.Parameters.AddWithValue("@LoginId", objCompDetails.LoginId);
                    processCmd.Parameters.AddWithValue("@RoleID", objCompDetails.RoleID);
                    processCmd.Parameters.AddWithValue("@CountryId", objCompDetails.CountryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }


        /// <summary>
        /// 311556: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet ApproveUploaderValidDataNLD(ComponentDetails objCompDetails)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_ApproveDataNLD", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@componentGroupId", objCompDetails.COMPONENTGROUPID);
                    processCmd.Parameters.AddWithValue("@selectedData", objCompDetails.SelectedData);
                    processCmd.Parameters.AddWithValue("@LoginId", objCompDetails.LoginId);
                    processCmd.Parameters.AddWithValue("@RoleID", objCompDetails.RoleID);
                    processCmd.Parameters.AddWithValue("@CountryId", objCompDetails.CountryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet ApproveUploaderValidDataAPAC(ComponentDetails objCompDetails)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_ApproveDataAPAC", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@componentGroupId", objCompDetails.COMPONENTGROUPID);
                    processCmd.Parameters.AddWithValue("@selectedData", objCompDetails.SelectedData);
                    processCmd.Parameters.AddWithValue("@LoginId", objCompDetails.LoginId);
                    processCmd.Parameters.AddWithValue("@RoleID", objCompDetails.RoleID);
                    processCmd.Parameters.AddWithValue("@CountryId", objCompDetails.CountryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 311556: Method to get the Tech team recipients
        /// </summary>
        /// <param name="objContAccess">object Access Details</param> 
        /// <returns>Technical team Ids.</returns>
        public static DataSet GetApproveMailerDetails(ControlAccess objContAccess)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_ApproveMailerDetails", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ApprovedBy", objContAccess.ApprovedBy);
                    processCmd.Parameters.AddWithValue("@selectedData", objContAccess.SelectedDataValue);
                    processCmd.Parameters.AddWithValue("@componentgroupid", objContAccess.Componentgroupid);
                    processCmd.Parameters.AddWithValue("@ApprovedRoleID", objContAccess.ApprovedRoleid);
                    processCmd.Parameters.AddWithValue("@CountryID", objContAccess.CountryId);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 298312: Method to get data for sending MY PAY payment mailer
        /// </summary>
        /// <param name="flag">Flag number</param>
        /// <param name="componentId">component Id</param>
        /// <param name="compName">component Name </param>
        /// <param name="countryID">country ID</param>
        /// <returns>Mailer Details</returns>
        public static DataSet GetFreezePayrollMailerDetails(int flag, string componentId, string compName, int countryID)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollStatusMailerDetails", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@flag", flag);
                    processCmd.Parameters.AddWithValue("@componentId", componentId);
                    processCmd.Parameters.AddWithValue("@SelectedData", compName);
                    processCmd.Parameters.AddWithValue("@CountryId", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 260947: Update Referral Bonus Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateValidData(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_UpdateValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Update NLD Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateValidDataNLD(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_NLD_UpdateValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 445918: Update NLD Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateValidDataCE(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_CE_UpdateValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

       

        /// <summary>
        /// 311556: Update NLD Exception data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionDataNLD(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_NLD_MoveExpToValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Update NLD Exception data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionDataCE(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_CE_MoveExpToValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Update Referral Bonus Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateSARValidData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_SAR_InsertValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Update Referral Bonus Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateSARExceptionData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_SAR_MoveExpToValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Update Referral Bonus Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet NewSARValidData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_SAR_InsertValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Update Joining Bonus Exception data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionData(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_MoveExpToValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Technical team recipients for mail.
        /// </summary>
        /// <param name="objContAccess">object Access Details</param> 
        /// <returns>Technical team Ids.</returns>
        public static DataSet GetTechTeamRecipients(ControlAccess objContAccess)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetTechTeamRecipientsAndMailerURL", objContAccess);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Get Mailer Active Details
        /// </summary>
        /// <param name="objMail">object mail</param>      
        /// <returns>Mailer status</returns>
        public static int GetMailerActiveDetails(MailerLog objMail)
        {
            try
            {
                return Convert.ToInt32(DBHelper.ExecuteScalar("USP_GETMAILERSENDSTATUS", objMail));
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Logs mailer details.
        /// </summary>
        /// <param name="objMailerLog">object mailer log details</param>       
        public static void LogMailerDetails(MailerLog objMailerLog)
        {
            try
            {
                DBHelper.ExecuteNonQuery("usp_InsertMailerDetails", objMailerLog);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">country ID</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet SGPGetValidData(int componentid, int countryID)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_SGPGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 311556: Saves New Uploader Data.
        /// </summary>;
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveUploaderNewData(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("dbo.usp_SGP_InsertValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Uploader Data.
        /// </summary>;
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveUploaderNewDataNLD(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("dbo.usp_NLD_InsertValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Uploader Data.
        /// </summary>;
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveUploaderDataCE(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("dbo.usp_CE_ValidateUploadData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Uploader Data.
        /// </summary>;
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveUploaderNewDataCE(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("dbo.usp_CE_InsertValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// TO update grid data
        /// </summary>
        /// <param name="objinputs">passing object</param>
        /// <param name="franceUpdateRemarks">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> StopPaymentUploaderValidData(UploaderData objinputs, List<string> franceUpdateRemarks)
        {
            try
            {
                List<string> objStatus = new List<string>();
                UploaderData objUpdate = new UploaderData();
                for (int i = 0; i < franceUpdateRemarks.Count; i++)
                {
                    string[] gradeAmt = franceUpdateRemarks[i].Split(',');
                    objUpdate.ComponentGroupId = Convert.ToInt32(gradeAmt[0]);
                    objUpdate.SelectedData = gradeAmt[1];
                    objUpdate.SelectedEndDate = gradeAmt[2].ToString();
                    objUpdate.LoginId = objinputs.LoginId;
                    objUpdate.CountryId= objinputs.CountryId;
                    DataSet dstemp = DBHelper.ExecuteDataset("usp_NLDPFSSStopPayment", objUpdate);
                }
                objStatus.Add("success");
                return objStatus;

            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }


        /// <summary>
        /// 311556: updates New policy Data.
        /// </summary>;
        /// <param name="objpolicyData">policy details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdatePolicyData(SGPUploadData objpolicyData)
        {
            try
            {
                return DBHelper.ExecuteDataset("dbo.usp_SGP_InsertValidUploaderData", objpolicyData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets recruitment type.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Recruitment Type details.</returns>
        public static DataSet GetRecruitmentType(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetRecruitmentType", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets recruitment type.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Recruitment Type details.</returns>
        public static DataSet GetDeductionType(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDeductionType", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets recruitment type.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Recruitment Type details.</returns>
        public static DataSet GetInstallmentType(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetInstallmentType", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets recruitment type.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Recruitment Type details.</returns>
        public static DataSet GetCurrencyCode(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetCurrencyCode", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in Exception grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Exception details.</returns>
        public static DataSet GetUploaderExceptionViewData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetViewExceptionRecordForUploader", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in Exception grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Exception details.</returns>
        public static DataSet GetUploaderExceptionViewDataNLD(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetViewExceptionRecordForUploader_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in Exception grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Exception details.</returns>
        public static DataSet GetAPACUploaderExceptionViewData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetAPACViewExceptionRecordForUploader", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Special Case reasons.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Special Cases.</returns>
        public static DataSet GetSpecialCaseReasons(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetSpecialCaseReason", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Special Case reasons.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Special Cases.</returns>
        public static DataSet GetNLDSSpecialCaseReason(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetNLDSpecialCaseReason", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Background Status.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Background Status details.</returns>
        public static DataSet GetBGstatus(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetBGStatus", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Sign on bonus drop down details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetSignonBonusDropdownDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDropDownData_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Sign on bonus drop down details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetPayoutTypeonchangeofsubcomponent(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("Sp_SubcomponentChangeType", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Dropdown Details APAC
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetDropdownDetailsAPAC(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDropDownData_APAC", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Dropdown Details APAC
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetDropdownDetailsCE(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDropDownData_CE", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Dropdown Details NLD- Reversal
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetReversalDropdownDetailsNLD(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDropDownData_Reversal_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Sign on bonus drop down details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetRelocationDropdownDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDropDownData_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidViewData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetViewValidRecordForUploader", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetAPACUploaderValidViewData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetAPACViewValidRecordForUploader", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidViewDataNLD(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetViewValidRecordForUploader_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets other Geography grid details for referral bonus.
        /// </summary>
        /// <param name="objCompDetails">object Component Details</param> 
        /// <returns>Other Geography grid details to bind.</returns>
        public static DataSet GetOtherGeographyUploaderData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetOtherGeographyUploaderDataSGP", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 316271: Gets Currency template report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetCurrencyDataTemplateSGP(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DataCurrencyTemplateReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets data template report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetDataTemplateSGP(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DataTemplateUploaderReportSGP", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 877840: Gets data template report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetDataTemplateGradeAmount(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DataTemplateUploaderReportGradeAmount", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Gets grade details for policy.
        /// </summary>
        /// <param name="objcompDet">Component details.</param> 
        /// <returns>Grade details.</returns>
        public static DataSet GetGradeDetails(ComponentDetails objcompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_GetGradeDetails]", objcompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Other tab details for components.
        /// </summary>
        /// <param name="objcompDet">Component details.</param> 
        /// <returns>Other details.</returns>
        public static DataSet GetOtherDetails(ComponentDetails objcompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_GetOtherDetails]", objcompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Netherland Policy details for components.
        /// </summary>
        /// <param name="objcompDet">Component details.</param> 
        /// <returns>Netherland Policy details.</returns>
        public static DataSet GetNLDPolicyDetails(ComponentDetails objcompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_GetNLDPolicyDetails]", objcompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Gets grade details for policy.
        /// </summary>
        /// <param name="objcompDet">Component details.</param> 
        /// <returns>Grade details.</returns>
        public static DataSet GetGradeAmountDetails(ComponentDetails objcompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_GetGradeAmount]", objcompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Empty template url.
        /// </summary>
        /// <param name="objdetails">File Upload details.</param> 
        /// <returns>url to fetch corresponding excel.</returns>
        public static DataSet GetEmptyTemplateURL(FileUploadDetails objdetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_RetrieveSPayKeys", objdetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets APAC project details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetAPACProjectDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetAPACProjectDetails]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets APAC project details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetServiceApartmentRecoveryPolicyDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetServiceApartmentRecoveryPolicyDetails]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        
        /// <summary>
        /// 311556: Gets School fees policy details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetSchoolFeesPolicyDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetSchoolFeesPolicyDetails]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets component details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetPolicyComponentDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetPolicyComponentDetails]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Exception Associate details
        /// </summary>
        /// <param name="objCompDetails">Exception Associate details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetExceptionAssociateDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_APAC_GetExceptionAssociateDetails]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }


        /// <summary>
        /// 311556: Gets Set ID details for referral Bonus.
        /// </summary>
        /// <param name="objCompDet">Component details.</param> 
        /// <returns>Set ID details.</returns>
        public static DataSet GetSDADetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("Policy.usp_SGP_GetSDADetails", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Statutory holiday details for referral Bonus.
        /// </summary>
        /// <param name="objCompDet">Component details.</param> 
        /// <returns>Statutory holiday details.</returns>
        public static DataSet GetStatutoryhoildayDetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("Policy.usp_SGP_GetStatutoryHoildayDetails", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Statutory holiday details for referral Bonus.
        /// </summary>
        /// <param name="objCompDet">Component details.</param> 
        /// <returns>Statutory holiday details.</returns>
        public static DataSet GetStatutoryAmountDetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("Policy.usp_SGP_GetStatutoryPayoutAmountDetails", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        public static string UpdateSGPPolicyDetails(SPay.DC.UtilityDC.PolicyDetails objpolicyDetails)
        {
            try
            {
                DBHelper.ExecuteNonQuery("[dbo].[Usp_SGP_UpdateMangePolicies]", objpolicyDetails);
                DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyGradeAmount]", objpolicyDetails);
                DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyDetails]", objpolicyDetails);
                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Updates policy details for referral bonus.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        public static string UpdateRBPolicyDetails(PolicyDetails objpolicyDetails)
        {
            try
            {
                DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyDetails]", objpolicyDetails);
                for (int i = 0; i < objpolicyDetails.GradeAmtDetails.Count; i++)
                {
                    string[] gradeAmt = objpolicyDetails.GradeAmtDetails[i].Split(',');
                    objpolicyDetails.GradeforAmt = Convert.ToInt32(gradeAmt[0].ToString());
                    objpolicyDetails.FIXEDAMOUNT = Convert.ToInt32(gradeAmt[1].ToString());
                    DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyGradeAmount]", objpolicyDetails);
                }

                for (int j = 0; j < objpolicyDetails.SetIdProjectIdDetails.Count; j++)
                {
                    string[] setIdPjtId = objpolicyDetails.SetIdProjectIdDetails[j].Split(',');
                    objpolicyDetails.SetId = null;
                    objpolicyDetails.GradeId = null;
                    objpolicyDetails.DepartmentId = null;
                    objpolicyDetails.InactiveDepartmentId = null;
                    objpolicyDetails.RBSetId = setIdPjtId[0].ToString();
                    ////objpolicyDetails.RBProjectId = setIdPjtId[1].ToString();
                    DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyDetails]", objpolicyDetails);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Updates policy details for joining bonus.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status2", Justification = "Reviewed"),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status1", Justification = "Reviewed")]
        public static string UpdatePolicyDetails(PolicyDetails objpolicyDetails)
        {
            try
            {
                DataSet status = new DataSet();
                DataTable status1 = new DataTable();
                DataTable status2 = new DataTable();
                string policyStatus;

                policyStatus = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyDetails]",
                               objpolicyDetails).Tables[0].Rows[0].ItemArray[0].ToString();
                if (policyStatus.Equals("Success"))
                {                    
                    if (objpolicyDetails.ComponentId == 3)
                    {
                        for (int i = 0; i < objpolicyDetails.GradeAmtDetails.Count; i++)
                        {
                            string[] gradeAmt = objpolicyDetails.GradeAmtDetails[i].Split(',');
                            objpolicyDetails.GradeforAmt = Convert.ToInt64(gradeAmt[0].ToString());
                            objpolicyDetails.CampusMinAmount = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[1])
                                                               ? gradeAmt[1] : "0");
                            objpolicyDetails.CampusMaxAmount = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[2]) 
                                                               ? gradeAmt[2] : "0");
                            objpolicyDetails.LateralMinAmount = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[3]) 
                                                               ? gradeAmt[3] : "0");
                            objpolicyDetails.LateralMaxAmount = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[4]) 
                                                               ? gradeAmt[4] : "0");
                            status = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyAmountDetails]", 
                                     objpolicyDetails);
                            policyStatus = status.Tables[0].Rows[0].ItemArray[0].ToString();

                            if (!status.Tables[0].Rows[0].ItemArray[0].Equals("Success"))
                            {
                                break;
                            }
                        }
                    }
                    else if (objpolicyDetails.ComponentId == 2 || objpolicyDetails.ComponentId == 90)
                    {
                        for (int i = 0; i < objpolicyDetails.RBGradeAmtDetails.Count; i++)
                        {
                            string[] gradeAmt = objpolicyDetails.RBGradeAmtDetails[i].Split(',');
                            objpolicyDetails.GradeforAmt = Convert.ToInt32(!string.IsNullOrEmpty(gradeAmt[0]) 
                                                           ? gradeAmt[0] : "0");
                            objpolicyDetails.FIXEDAMOUNT = Convert.ToDecimal(!string.IsNullOrEmpty(gradeAmt[1])
                                                           ? gradeAmt[1] : "0");
                            status = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyAmountDetails]",
                                     objpolicyDetails);
                            policyStatus = status.Tables[0].Rows[0].ItemArray[0].ToString();

                            if (!status.Tables[0].Rows[0].ItemArray[0].Equals("Success"))
                            {
                                break;
                            }
                        }
                    }
                    else if (objpolicyDetails.ComponentId == 55)
                    {
                        for (int i = 0; i < objpolicyDetails.SDAGradeAmtDetails.Count; i++)
                        {
                            string[] gradeAmt = objpolicyDetails.SDAGradeAmtDetails[i].Split(',');
                            objpolicyDetails.UptoShiftHour = Convert.ToInt32(!string.IsNullOrEmpty(gradeAmt[0]) 
                                                            ? gradeAmt[0] : "0");
                            objpolicyDetails.GradeforAmt = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[1])
                                                            ? gradeAmt[1] : "0");
                            objpolicyDetails.FIXEDAMOUNT = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[2])
                                                            ? gradeAmt[2] : "0");
                            status = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyAmountDetails]",
                                     objpolicyDetails);
                            policyStatus = status.Tables[0].Rows[0].ItemArray[0].ToString();

                            if (!status.Tables[0].Rows[0].ItemArray[0].Equals("Success"))
                            {
                                break;
                            }
                        }
                    }
                    else if (objpolicyDetails.ComponentId == 88)
                    {
                        for (int i = 0; i < objpolicyDetails.StatutoryHoli.Count; i++)
                        {
                            if (objpolicyDetails.StatutoryHoli[i] != null)
                            {
                                string[] statPayout = objpolicyDetails.StatutoryHoli[i].Split(',');
                                objpolicyDetails.PkeyId = !string.IsNullOrEmpty(statPayout[0]) ? statPayout[0] : "0";
                                objpolicyDetails.Statutorydays = !string.IsNullOrEmpty(statPayout[1]) 
                                                                ? statPayout[1] : "0";
                                objpolicyDetails.IsActive = Convert.ToInt32(!string.IsNullOrEmpty(statPayout[2]) 
                                                            ? statPayout[2] : "0");
                                status = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyAmountDetails]", 
                                    objpolicyDetails);
                                policyStatus = status.Tables[0].Rows[0].ItemArray[0].ToString();
                                if (!status.Tables[0].Rows[0].ItemArray[0].Equals("Success"))
                                {
                                    break;
                                }
                            }
                        }
                    }

                    return policyStatus;
                }
                else
                {
                    return policyStatus;
                }
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Updates policy details for joining bonus.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        public static string UpdateJBPolicyDetails(PolicyDetails objpolicyDetails)
        {
            try
            {
                DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyDetails]", objpolicyDetails);
                for (int i = 0; i < objpolicyDetails.GradeAmtDetails.Count; i++)
                {
                    string[] gradeAmt = objpolicyDetails.GradeAmtDetails[i].Split(',');
                    objpolicyDetails.GradeforAmt = Convert.ToInt64(gradeAmt[0].ToString());
                    objpolicyDetails.CampusMinAmount = Convert.ToInt64(gradeAmt[1].ToString());
                    objpolicyDetails.CampusMaxAmount = Convert.ToInt64(gradeAmt[2].ToString());
                    objpolicyDetails.LateralMinAmount = Convert.ToInt64(gradeAmt[3].ToString());
                    objpolicyDetails.LateralMaxAmount = Convert.ToInt64(gradeAmt[4].ToString());
                    DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyGradeAmount]", objpolicyDetails);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Updates policy details for joining bonus.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status2", Justification = "Reviewed"),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status1", Justification = "Reviewed")]
        public static string UpdatePolicyGridDetails(SGPUploadData objpolicyDetails)
        {
            try
            {
                DataTable status1 = new DataTable();
                DataTable status2 = new DataTable();
                string policyStatus;
                policyStatus = DBHelper.ExecuteDataset("[dbo].[usp_UpdatePolicyData]",
                               objpolicyDetails).Tables[0].Rows[0].ItemArray[0].ToString();
                return policyStatus;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Updates policy details for Statutory Holiday.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status2", Justification = "Reviewed"),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status1", Justification = "Reviewed")]
        public static string UpdateStatutoryHolidayPolicyDetails(PolicyDetails objpolicyDetails)
        {
            try
            {
                DataTable status1 = new DataTable();
                DataTable status2 = new DataTable();
                string policyStatus;
                policyStatus = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyAmountDetails]",
                               objpolicyDetails).Tables[0].Rows[0].ItemArray[0].ToString();
                return policyStatus;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetAPACProjectDetailssearch(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetAPACProjectDetailsSearchByProjectId]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetAPACSchoolFeeAssociateSearch(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetAPACAssociateIDSearch]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetSARGuestHouseSearch(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetSARGuestHouseSearch]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        
        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static DataSet ActivateProjectDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_ChangeProjectStatus", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
     }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static DataSet InsertSchoolFeesPolicyDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("Usp_InsertSchoolFeesPolicyDetails", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static DataSet InsertAPACSchoolFeesPolicyDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("Usp_InsertAPACSchoolFeesPolicyDetails", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static DataSet InsertServiceApartmentRecoveryPolicyDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("Usp_InsertServiceApartmentRecoveryPolicyDetails", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

         /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static DataSet InsertTransportAllowancePolicyDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("Usp_InsertTransportAllowancePolicyDetails", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// 930165: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> RTT Details </returns>
        public static DataSet InsertLunchVoucherAllownceDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_InsertCE_RTTDays", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// 311556: Inserts new component into system
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Component Details </returns>
        public static DataSet InsertComponentDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_InsertSubComponentDetails] ", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Inserts Exception Associates into system
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Exception Associate Details </returns>
        public static DataSet InsertExpAssociateDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_APAC_InCityExceptionAssociates]", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }


        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static string UpdateAPACSchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            try
            {
                for (int i = 0; i < objinputs.AmountDetails.Count; i++)
                {
                    string[] gradeAmt = objinputs.AmountDetails[i].Split(',');
                    objinputs.PkeyId = gradeAmt[0].ToString();
                    objinputs.AssociateID = gradeAmt[1].ToString();
                    objinputs.SFAmount = gradeAmt[2].ToString();
                    objinputs.Amount1 = gradeAmt[3].ToString();
                    objinputs.Amount2 = gradeAmt[4].ToString();

                    DBHelper.ExecuteNonQuery("Usp_InsertAPACSchoolFeesPolicyDetails", objinputs);
                }

                return "Success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static string UpdateCESchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            try
            {
                for (int i = 0; i < objinputs.AmountDetails.Count; i++)
                {
                    string[] gradeAmt = objinputs.AmountDetails[i].Split(',');
                    objinputs.PkeyId = gradeAmt[0].ToString();
                    objinputs.AssociateID = gradeAmt[1].ToString();
                    objinputs.SFAmount = gradeAmt[2].ToString();
                    objinputs.Amount1 = gradeAmt[3].ToString();
                    objinputs.Amount2 = gradeAmt[4].ToString();
                    objinputs.MaxPercentage = gradeAmt[5].ToString();
                    objinputs.PayoutType = gradeAmt[6].ToString();

                    DBHelper.ExecuteNonQuery("Usp_InsertAPACSchoolFeesPolicyDetails", objinputs);
                }

                return "Success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// TO update grid data
        /// </summary>
        /// <param name="objinputs">passing object</param>
        /// <param name="franceUpdateRemarks">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateFranceSchoolFeesPolicyDetails
        (PolicyDetails objinputs, List<string> franceUpdateRemarks)
        {
            try
            {
                List<string> objStatus = new List<string>();
                PolicyDetails objUpdate = new PolicyDetails();
                for (int i = 0; i < franceUpdateRemarks.Count; i++)
                {
                    string[] gradeAmt = franceUpdateRemarks[i].Split(',');
                    objUpdate.ComponentId = Convert.ToInt32(gradeAmt[0]);
                  
                    objUpdate.AssociateID = gradeAmt[1].ToString();
                    objUpdate.SFAmount = gradeAmt[2].ToString();
                    objUpdate.Amount1 = gradeAmt[3].ToString();
                    objUpdate.Amount2 = gradeAmt[4].ToString();
                    objUpdate.MaxPercentage = gradeAmt[5].ToString();
                    objUpdate.PayoutType = gradeAmt[6].ToString();
                    objUpdate.PkeyId = gradeAmt[7].ToString();
                    objUpdate.STATUS = Convert.ToInt32(gradeAmt[8]);
                    objUpdate.LoginId = objinputs.LoginId;
                    objUpdate.CountryID = objinputs.CountryID;
                    DataSet dstemp = DBHelper.ExecuteDataset("Usp_InsertAPACSchoolFeesPolicyDetails", objUpdate);
                    objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                }

                return objStatus;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static string UpdateSchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            try
            {
                for (int i = 0; i < objinputs.AmountDetails.Count; i++)
                {
                    string[] gradeAmt = objinputs.AmountDetails[i].Split(',');
                    objinputs.PkeyId = gradeAmt[0].ToString();
                    objinputs.AssociateID = gradeAmt[1].ToString();
                    objinputs.SFAmount = gradeAmt[2].ToString();
                    DBHelper.ExecuteNonQuery("Usp_InsertSchoolFeesPolicyDetails", objinputs);
                }

                return "Success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static string UpdateServiceApartmentRecoveryPolicyDetails(PolicyDetails objinputs)
        {
            try
            {
                for (int i = 0; i < objinputs.AmountDetails.Count; i++)
                {
                    string[] gradeAmt = objinputs.AmountDetails[i].Split(',');
                    objinputs.PkeyId = gradeAmt[0].ToString();
                    objinputs.GuestHouse = gradeAmt[1].ToString();
                    objinputs.AUSSharingCost = gradeAmt[2].ToString();
                    objinputs.AUSNonSharingCost = gradeAmt[3].ToString();

                    DBHelper.ExecuteNonQuery("Usp_InsertServiceApartmentRecoveryPolicyDetails", objinputs);
                }

                return "Success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

          /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static string UpdateFranceTransportPolicyDetails(PolicyDetails objinputs)
        {
            try
            {
                for (int i = 0; i < objinputs.AmountDetails.Count; i++)
                {
                    string[] gradeAmt = objinputs.AmountDetails[i].Split(',');
                    objinputs.PkeyId = gradeAmt[0].ToString();
                    objinputs.GuestHouse = gradeAmt[1].ToString();
                    objinputs.AUSSharingCost = gradeAmt[2].ToString();
                    objinputs.EligAmt = gradeAmt[3].ToString();

                    DBHelper.ExecuteNonQuery("Usp_InsertTransportAllowancePolicyDetails", objinputs);
                }

                return "Success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        
        /// <summary>
        /// 260947: Changes User Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        public static void ChangeUserStatus(ChangeUserStatus objinputs)
        {
            try
            {
                DBHelper.ExecuteNonQuery("usp_SGPChangeUserStatus", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 547813: Get Freeze grid details -NLD.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGrid(int userID, int roleID, int countryID)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGrid", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">Country Id</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet NLDGetValidData(int componentid, int countryID)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_NLDGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">Country Id</param>
        /// <param name="componentName">Component Name</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet APACGetValidData(int componentid, int countryID, string componentName)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_APACGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    processCmd.Parameters.AddWithValue("@CompName", componentName);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">Country Id</param>
        /// <param name="componentName">Component Name</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet CEGetValidData(int componentid, int countryID, string componentName)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_CEGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    processCmd.Parameters.AddWithValue("@CompName", componentName);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">Country Id</param>
        /// <param name="componentName">Component Name</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet UKIGetValidData(int componentid, int countryID, string componentName)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_UKIGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    processCmd.Parameters.AddWithValue("@CompName", componentName);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 393656: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">Country Id</param>
        /// <param name="componentName">Component Name</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet PHLGetValidData(int componentid, int countryID, string componentName)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_PHLGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    processCmd.Parameters.AddWithValue("@CompName", componentName);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Get Freeze grid details -NLD.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGridNLD(int userID, int roleID, int countryID)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGridNLD", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Get Freeze grid details -NLD.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGridAPAC(int userID, int roleID, int countryID)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGridAPAC", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Get Freeze grid details -NLD.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGridCE(int userID, int roleID, int countryID)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGridCE", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Get Freeze grid details -NLD.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGridUKI(int userID, int roleID, int countryID)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGridUKI", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 393656: Get Freeze grid PHL.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGridPHL(int userID, int roleID, int countryID)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI(); 
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGridPHL", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 260947: Push data to MyPay.
        /// </summary>
        /// <param name="compId">Component ID.</param>
        /// <param name="userid">User ID.</param>        
        /// <param name="countryID"> Country ID </param> 
        public static void FreezePayrollData(string compId, int userid, int countryID)
        {
            try
            {
                SqlConnection conSqlConnection;
                SqlDataAdapter adapterResult = new SqlDataAdapter();
                DataSet result = new DataSet();
                using (conSqlConnection = new SqlConnection(conString))
                {
                    using (SqlCommand cmdSPData = new SqlCommand("usp_FreezePayrollData", conSqlConnection))
                    {
                        conSqlConnection.OpenWithMSI();
                        adapterResult.SelectCommand = cmdSPData;
                        cmdSPData.Connection = conSqlConnection;
                        cmdSPData.CommandType = CommandType.StoredProcedure;
                        cmdSPData.Parameters.AddWithValue("@ComponentId", compId);
                        cmdSPData.Parameters.AddWithValue("@LoginID", userid);
                        cmdSPData.Parameters.AddWithValue("@countryID", countryID);
                        cmdSPData.ExecuteNonQuery();
                        adapterResult.Fill(result);
                        conSqlConnection.Close();
                    }
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }
        }

        /// <summary>
        /// 260947: Push data to MyPay.
        /// </summary>
        /// <param name="compId">Component ID.</param>
        /// <param name="userid">User ID.</param>     
        /// <param name="countryID"> Country ID </param> 
        public static void FreezePayrollDataNLD(string compId, int userid, int countryID)
        {
            try
            {
                SqlConnection conSqlConnection;
                SqlDataAdapter adapterResult = new SqlDataAdapter();
                DataSet result = new DataSet();
                using (conSqlConnection = new SqlConnection(conString))
                {
                    using (SqlCommand cmdSPData = new SqlCommand("usp_FreezePayrollDataNLD", conSqlConnection))
                    {
                        conSqlConnection.OpenWithMSI();
                        adapterResult.SelectCommand = cmdSPData;
                        cmdSPData.Connection = conSqlConnection;
                        cmdSPData.CommandType = CommandType.StoredProcedure;
                        cmdSPData.Parameters.AddWithValue("@ComponentId", compId);
                        cmdSPData.Parameters.AddWithValue("@LoginID", userid);
                        cmdSPData.Parameters.AddWithValue("@countryID", countryID);
                        cmdSPData.ExecuteNonQuery();
                        adapterResult.Fill(result);
                        conSqlConnection.Close();
                    }
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }
        }

        /// <summary>
        /// 260947: Push data to MyPay.
        /// </summary>
        /// <param name="compId">Component ID.</param>
        /// <param name="userid">User ID.</param>     
        /// <param name="countryID"> Country ID </param> 
        /// <param name="compName"> Component Name </param> 
        public static void FreezePayrollDataAPAC(string compId, int userid, int countryID, string compName)
        {
            try
            {
                SqlConnection conSqlConnection;
                SqlDataAdapter adapterResult = new SqlDataAdapter();
                DataSet result = new DataSet();
                using (conSqlConnection = new SqlConnection(conString))
                {
                    using (SqlCommand cmdSPData = new SqlCommand("usp_FreezePayrollDataAPAC", conSqlConnection))
                    {
                        conSqlConnection.OpenWithMSI();
                        adapterResult.SelectCommand = cmdSPData;
                        cmdSPData.Connection = conSqlConnection;
                        cmdSPData.CommandType = CommandType.StoredProcedure;
                        cmdSPData.Parameters.AddWithValue("@ComponentId", compId);
                        cmdSPData.Parameters.AddWithValue("@LoginID", userid);
                        cmdSPData.Parameters.AddWithValue("@countryID", countryID);
                        cmdSPData.Parameters.AddWithValue("@compName", compName);
                        cmdSPData.ExecuteNonQuery();
                        adapterResult.Fill(result);
                        conSqlConnection.Close();
                    }
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }
        }

        /// <summary>
        /// 260947: Push data to MyPay.
        /// </summary>
        /// <param name="compId">Component ID.</param>
        /// <param name="userid">User ID.</param>     
        /// <param name="countryID"> Country ID </param> 
        /// <param name="compName"> Component Name </param> 
        public static void FreezePayrollDataCE(string compId, int userid, int countryID, string compName)
        {
            try
            {
                SqlConnection conSqlConnection;
                SqlDataAdapter adapterResult = new SqlDataAdapter();
                DataSet result = new DataSet();
                using (conSqlConnection = new SqlConnection(conString))
                {
                    using (SqlCommand cmdSPData = new SqlCommand("usp_FreezePayrollDataCE", conSqlConnection))
                    {
                        conSqlConnection.OpenWithMSI();
                        adapterResult.SelectCommand = cmdSPData;
                        cmdSPData.Connection = conSqlConnection;
                        cmdSPData.CommandType = CommandType.StoredProcedure;
                        cmdSPData.Parameters.AddWithValue("@ComponentId", compId);
                        cmdSPData.Parameters.AddWithValue("@LoginID", userid);
                        cmdSPData.Parameters.AddWithValue("@countryID", countryID);
                        cmdSPData.Parameters.AddWithValue("@compName", compName);
                        cmdSPData.ExecuteNonQuery();
                        ////adapterResult.Fill(result);
                        conSqlConnection.Close();
                    }
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }
        }

        /// <summary>
        /// 393656: Freeze data for UK & I.
        /// </summary>
        /// <param name="userid">User ID</param>
        /// <param name="countryID">Country ID</param>
        /// <returns>Data for Freeze</returns>
        public static DataSet FreezePayrollDataUKI(int userid, int countryID)
        {
            DataSet result = new DataSet();
            try
            {
                SqlConnection conSqlConnection;
                SqlDataAdapter adapterResult = new SqlDataAdapter();
                
                using (conSqlConnection = new SqlConnection(conString))
                {
                    using (SqlCommand cmdSPData = new SqlCommand("usp_FreezePayrollDataUKI", conSqlConnection))
                    {
                        conSqlConnection.OpenWithMSI();
                        adapterResult.SelectCommand = cmdSPData;
                        cmdSPData.Connection = conSqlConnection;
                        cmdSPData.CommandType = CommandType.StoredProcedure;
                        cmdSPData.Parameters.AddWithValue("@LoginID", userid);
                        cmdSPData.Parameters.AddWithValue("@countryID", countryID);
                        cmdSPData.ExecuteNonQuery();
                        adapterResult.Fill(result);
                        conSqlConnection.Close();
                    }
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }
            return result;
        }

        /// <summary>
        /// Freeze data for PHL
        /// </summary>
        /// <param name="userid">User ID</param>
        /// <param name="countryID">Country ID</param>
        /// <returns>Data for Freeze</returns>
        public static DataSet FreezePayrollDataPHL(int userid, int countryID)
        {
            DataSet result = new DataSet();
            try
            {
                SqlConnection conSqlConnection;
                SqlDataAdapter adapterResult = new SqlDataAdapter();
                
                using (conSqlConnection = new SqlConnection(conString))
                {
                    using (SqlCommand cmdSPData = new SqlCommand("usp_FreezePayrollDataPHL", conSqlConnection))
                    {
                        conSqlConnection.OpenWithMSI();
                        adapterResult.SelectCommand = cmdSPData;
                        cmdSPData.Connection = conSqlConnection;
                        cmdSPData.CommandType = CommandType.StoredProcedure;
                        cmdSPData.Parameters.AddWithValue("@LoginID", userid);
                        cmdSPData.Parameters.AddWithValue("@countryID", countryID);
                        adapterResult.Fill(result);
                        conSqlConnection.Close();
                    }
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }
            return result;
        }

        /// <summary>
        ///  393656: Push data to HCM update.
        /// </summary>
        /// <param name="userid">User ID</param>
        /// <param name="countryID">Country ID</param>
        /// <param name="status">Push Status</param>
        public static void FreezePayrollDataPushUpdate(int userid, int countryID, int status)
        {
            SqlConnection conSqlConnection = new SqlConnection(conString);
            DataSet result = new DataSet();
            try
            {
                SqlCommand cmdSPData = new SqlCommand("usp_FreezePayrollDataPushUpdate", conSqlConnection);               
                conSqlConnection.OpenWithMSI();
                cmdSPData.Connection = conSqlConnection;
                cmdSPData.CommandType = CommandType.StoredProcedure;
                cmdSPData.Parameters.AddWithValue("@LoginID", userid);
                cmdSPData.Parameters.AddWithValue("@countryID", countryID);
                cmdSPData.Parameters.AddWithValue("@status", status);
                cmdSPData.ExecuteNonQuery();

            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }
            finally
            {
                if (conSqlConnection != null)
                    conSqlConnection.Close();
            }
        }

        /// <summary>
        /// To move the DataTable data into Database
        /// </summary>
        /// <param name="dtexcel">Excel data</param>
        /// <param name="componentID">Component Group</param>
        /// <param name="loginId">Login Details</param>
        /// <param name="criteriaType">criteria Type</param>
        /// <param name="countryID">country ID </param>        
        public static void MoveAPACDatatabletoDB(
            DataTable dtexcel,
            string componentID,
            string loginId,
            string criteriaType,
            int countryID,
            int GradeAmount)
        {
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlParameter[] param = new SqlParameter[5];
                    param[0] = new SqlParameter("@ComponentID", componentID);
                    param[1] = new SqlParameter("@projectData", dtexcel);
                    param[2] = new SqlParameter("@LoginId", loginId);
                    param[3] = new SqlParameter("@CriteriaType", criteriaType);
                    param[4] = new SqlParameter("@CountryID", countryID);
                    if (Convert.ToInt32(componentID.ToString()) == 177 || Convert.ToInt32(componentID.ToString()) == 178 || Convert.ToInt32(componentID.ToString()) == 179)
                    {
                        SqlHelper.ExecuteDataset(con, CommandType.StoredProcedure, "Usp_InsertAPACProjectDetails_With_Date", param);
                    }
                    else if  ((Convert.ToInt32(componentID.ToString()) == 180 || Convert.ToInt32(componentID.ToString()) == 4
                        || Convert.ToInt32(componentID.ToString()) == 5 || Convert.ToInt32(componentID.ToString()) == 50
                        || Convert.ToInt32(componentID.ToString()) == 51 || Convert.ToInt32(componentID.ToString()) == 170
                        || Convert.ToInt32(componentID.ToString()) == 171 || Convert.ToInt32(componentID.ToString()) == 36)
                       && GradeAmount!=1)
                    {
                        SqlHelper.ExecuteDataset(con, CommandType.StoredProcedure, "Usp_InsertAPACProjectDetails_With_Date_Amount", param);
                    }
                    else if (Convert.ToInt32(componentID.ToString()) == 180 && GradeAmount == 1)
                    {
                        SqlHelper.ExecuteDataset(con, CommandType.StoredProcedure, "Usp_InsertProjectDetails_GradeAmount_NSA2", param);
                    }
                    else if ((Convert.ToInt32(componentID.ToString()) == 4|| Convert.ToInt32(componentID.ToString()) == 50
                        || Convert.ToInt32(componentID.ToString()) == 170|| Convert.ToInt32(componentID.ToString()) == 36) && GradeAmount == 1)
                    {
                        SqlHelper.ExecuteDataset(con, CommandType.StoredProcedure, "Usp_InsertProjectDetails_GradeAmount_6DA", param);
                    }
                    else if ((Convert.ToInt32(componentID.ToString()) == 5 || Convert.ToInt32(componentID.ToString()) == 51
                    || Convert.ToInt32(componentID.ToString()) == 171) && GradeAmount == 1)
                    {
                        SqlHelper.ExecuteDataset(con, CommandType.StoredProcedure, "Usp_InsertProjectDetails_GradeAmount_OCA", param);
                    }
                    else
                    {
                        SqlHelper.ExecuteDataset(con, CommandType.StoredProcedure, "Usp_InsertAPACProjectDetails", param);
                    }

                    con.Close();                 
                }
                catch (SystemException ex)
                {
                    throw ex;
                }
            }
        }

        /// <summary>
        /// To move the DataTable data into Database
        /// </summary>
        /// <param name="dtexcel">Excel data</param>
        /// <param name="componentID">Component Group</param>
        /// <param name="loginId">Login Details</param>
        /// <param name="criteriaType">criteria Type</param>
        /// <param name="countryID">country ID </param>        
        public static void MoveAPACSFDatatabletoDB(
            DataTable dtexcel,
            string componentID,
            string loginId,
            string criteriaType,
            int countryID)
        {
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();

                    SqlParameter[] param = new SqlParameter[5];
                    param[0] = new SqlParameter("@ComponentID", componentID);
                    param[1] = new SqlParameter("@AssociateData", dtexcel);
                    param[2] = new SqlParameter("@LoginId", loginId);
                    param[3] = new SqlParameter("@CriteriaType", criteriaType);
                    param[4] = new SqlParameter("@CountryID", countryID);
                    if (countryID == 14 || countryID == 15 || countryID == 16 || countryID == 17)
                    {
                        SqlHelper.ExecuteDataset(con, CommandType.StoredProcedure, 
                            "[dbo].[StagingtoMain_CE_AssociateID]", param);
                    }
                    else
                    {
                        SqlHelper.ExecuteDataset(con, CommandType.StoredProcedure, 
                            "[dbo].[StagingtoMain_AssociateID]", param);
                    }
                    con.Close();
                }
                catch (SystemException ex)
                {
                    throw ex;
                }
            }
        }

        /// <summary>
        /// 311556: Updates policy details for Sixth Day Component.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        public static string UpdateSixthDayPolicyDetails(PolicyDetails objpolicyDetails)
        {
            try
            {
                DBHelper.ExecuteNonQuery("[Policy].[usp_SavePolicyDetails]", objpolicyDetails);
                for (int i = 0; i < objpolicyDetails.GradeAmtDetails.Count; i++)
                {
                    string[] gradeAmt = objpolicyDetails.GradeAmtDetails[i].Split(',');
                    objpolicyDetails.UptoShiftHour = Convert.ToInt32(gradeAmt[0].ToString());
                    objpolicyDetails.GradeforAmt = Convert.ToInt64(gradeAmt[1].ToString());
                    objpolicyDetails.FIXEDAMOUNT = Convert.ToInt64(gradeAmt[2].ToString());
                    //// objpolicyDetails.FIXEDAMOUNT = Convert.ToInt64(gradeAmt[2].ToString());
                    DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyGradeAmount]", objpolicyDetails);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 260947: Saves New user role.
        /// </summary>
        /// <param name="objinputs">input details.</param>        
        public static void CreateUserRole(CreateUserRole objinputs)
        {
            try
            {
                DBHelper.ExecuteNonQuery("usp_SGP_CreateUserRole", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 445918: to fetch mailer details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet FetchRoleGridDetails(CreateUserRole objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_CreateUserRole", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Total rewards team data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetTotalRewardsTeamValidData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderValidRecordSGP", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 260947: Gets Component Group Names.
        /// </summary>
        /// <param name="objRoles">object role Details</param> 
        /// <returns>Component details.</returns>
        public static DataSet GetComponentGroupNames(CreateUserRole objRoles)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetComponentGroupNames", objRoles);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets dynamic data.
        /// </summary>
        /// <param name="objUser">user data</param> 
        /// <returns>Grid User details.</returns>
        public static DataSet Getdatadynamic(CreateUserRole objUser)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetGridUserDetailsDynamically", objUser);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Total rewards team data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetTotalRewardsTeamDuplicatesData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderExceptionRecord", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Gets Currency Value details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Currency drop down details.</returns>
        public static DataSet GetCurrencyDropDownDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_GetCountryCurrencyMapping]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New currency Data.
        /// </summary>
        /// <param name="objCurrencyData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveCurrencyNewData(CurrencyData objCurrencyData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_CU_InsertValidSuperAdminData]", objCurrencyData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Deletes Uploader Valid Data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet DeleteUploaderValidData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DeleteValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Deletes Uploader Valid Data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet DeleteUploaderValidDataNLD(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DeleteValidUploaderData_NLD", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Deletes Uploader Valid Data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet DeleteUploaderValidDataAPAC(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DeleteValidUploaderData_APAC", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Deletes policy Data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet DeletePolicyData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DeletePolicyData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Deletes Uploader Exception Data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Exception details.</returns>
        public static DataSet DeleteUploaderExceptionData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DeleteExceptionUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Deletes Uploader Exception Data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Exception details.</returns>
        public static DataSet DeleteUploaderExceptionDataNLD(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DeleteExceptionUploaderData_NLD", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Deletes Uploader Exception Data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Exception details.</returns>
        public static DataSet DeleteUploaderExceptionDataAPAC(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DeleteExceptionUploaderData_APAC", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates  currency Data.
        /// </summary>
        /// <param name="objCurrencyData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet ValidateExceptionCurrencyUpdateData(CurrencyData objCurrencyData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_CU_MoveExpToValid]", objCurrencyData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Gets Component details
        /// </summary>
        /// <param name="objCompDetails">Component Grid details.</param> 
        /// <returns>Component Grid details</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1806:DoNotIgnoreMethodResults",
            MessageId = "System.Data.DataSet", Justification = "Reviewed.")]
        public static DataSet GetComponentTypeandName(ComponentDetails objCompDetails)
        {
            try
            {
                // return 
                DataSet dt = new DataSet();
                dt = DBHelper.ExecuteDataset("[dbo].[usp_SGPGetComponentTypeandName]", objCompDetails);
                return dt;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Gets Component details
        /// </summary>
        /// <param name="objCompDetails">Component Grid details.</param> 
        /// <returns>Component Grid details</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1806:DoNotIgnoreMethodResults",
            MessageId = "System.Data.DataSet", Justification = "Reviewed.")]
        public static DataSet GetAPACComponentTypeandName(ComponentDetails objCompDetails)
        {
            try
            {
                // return 
                DataSet dt = new DataSet();
                dt = DBHelper.ExecuteDataset("[dbo].[usp_GetAPACComponentTypeandName]", objCompDetails);
                return dt;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Gets data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetValidViewDataCurrency(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_CU_GetViewValidRecord", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Get AllowanceType and ShiftType.
        /// </summary>
        /// <param name="objUploadData">object Uploader Details</param> 
        /// <returns>AllowanceType and ShiftType.</returns>
        public static DataSet GetAllowanceandShiftType(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGPGetAllowanceAndShiftType", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Get DaysType
        /// </summary>
        /// <param name="objUploadData">object Uploader Details</param> 
        /// <returns>AllowanceType and ShiftType.</returns>
        public static DataSet GetDaysType(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetDays]", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates  currency Data.
        /// </summary>
        /// <param name="objCurrencyData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateCurrencyData(CurrencyData objCurrencyData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_CU_UpdateValidSuperAdminData]", objCurrencyData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Get Uploader Shift Allowance Valid Data.
        /// </summary>
        /// <param name="objCompDetails">object Component Details</param> 
        /// <returns>Valid grid details to bind for Shift allowance.</returns>
        public static DataSet GetUploaderShiftAllowanceValidData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderValidRecord", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for exception grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>exception grid details.</returns>
        public static DataSet GetUploaderExceptionData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderExceptionRecord", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for exception grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>exception grid details.</returns>
        public static DataSet GetUploaderExceptionDataSGP(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderExceptionRecordSGP", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for exception grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>exception grid details.</returns>
        public static DataSet GetUploaderExceptionDataAPAC(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderExceptionRecordAPAC", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 445918: Gets Uploader data for exception grid for CE
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>exception grid details.</returns>
        public static DataSet GetUploaderExceptionDataCE(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderExceptionRecord_CE", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for exception grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>exception grid details.</returns>
        public static DataSet GetUploaderExceptionDataNLD(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderExceptionRecord_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Cut Off date details.
        /// </summary>
        /// <param name="objCompDetails">object component Details</param> 
        /// <returns>Cut Off details.</returns>
        public static DataSet GetCuttOffDateDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetCuttOffDateDetails", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Check Project Mapping
        /// </summary>
        /// <param name="objCompDetails">object component Details</param> 
        /// <returns>Project details</returns>
        public static DataSet CheckProjectMapping(PolicyDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_GetProjectDetailsForApproval", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets data template report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetDataTemplate(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_DataTemplateUploaderReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets data template report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetNLDDataTemplate(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_NLD_DataTemplateUploaderReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets data template report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetAPACDataTemplate(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_APAC_DataTemplateUploaderReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets data template report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetCEDataTemplate(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_CE_DataTemplateUploaderReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Processed data report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetProcessedReport(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_ProcessedUploaderReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Processed data report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetNLDProcessedReport(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_NLD_ProcessedUploaderReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Processed data report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetAPACProcessedReport(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_APAC_ProcessedUploaderReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Processed data report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetCEProcessedReport(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.GenerateReportDataCustom("usp_CE_ProcessedUploaderReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Get selected data for edit
        /// </summary>
        /// <param name="objUploadData">object Uploader Details</param> 
        /// <returns>AllowanceType and ApprovalExpiryDate.</returns>
        public static DataSet GetEditData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_GetUploaderEditRecord", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 260947: Gets Reversal Valid Report.
        /// </summary>
        /// <param name="objCompDetails">object component Details</param> 
        /// <returns>reversal details.</returns>
        public static DataSet GetReversalValidData(ComponentDetails objCompDetails)
        {
            try
            {
                using (APACUtilityDAL objDAL = new APACUtilityDAL())
                {
                    return DBHelper.ExecuteDataset("usp_SGP_GetReversalValidRecord", objCompDetails);
                }
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Gets Reversal Valid Record for Netherland
        /// </summary>
        /// <param name="objCompDetails">object component Details</param> 
        /// <returns>reversal details.</returns>
        public static DataSet GetReversalValidDataNLD(ComponentDetails objCompDetails)
        {
            try
            {
                using (APACUtilityDAL objDAL = new APACUtilityDAL())
                {
                    return DBHelper.ExecuteDataset("usp_NLD_GetReversalValidRecord", objCompDetails);
                }
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Reversal Exception Report.
        /// </summary>
        /// <param name="objCompDetails">object component Details</param> 
        /// <returns>reversal details.</returns>
        public static DataSet GetReversalExceptionData(ComponentDetails objCompDetails)
        {
            try
            {
                using (APACUtilityDAL objDAL = new APACUtilityDAL())
                {
                    return DBHelper.ExecuteDataset("usp_SGP_GetReversalExceptionRecord", objCompDetails);
                }
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Reversal Exception data  for Netherland
        /// </summary>
        /// <param name="objCompDetails">object component Details</param> 
        /// <returns>reversal details.</returns>
        public static DataSet GetReversalExceptionDataNLD(ComponentDetails objCompDetails)
        {
            try
            {
                using (APACUtilityDAL objDAL = new APACUtilityDAL())
                {
                    return DBHelper.ExecuteDataset("usp_NLD_GetReversalExceptionRecord", objCompDetails);
                }
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Deletes Reversal Data.
        /// </summary>
        /// <param name="objUploadData">object upload Details</param> 
        /// <returns>reversal details.</returns>
        public static DataSet DeleteReversalData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_DeleteReversalData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Processed Report.
        /// </summary>
        /// <param name="objuploaderData">object uploader Details</param> 
        /// <returns>reversal details.</returns>
        public static DataSet GetReversalProcessedReport(UploaderData objuploaderData)
        {
            try
            {
                if (objuploaderData.ComponentGroupId == 21 || objuploaderData.ComponentGroupId == 25 ||
                    objuploaderData.ComponentGroupId == 26 || objuploaderData.ComponentGroupId == 27 ||
                    objuploaderData.ComponentGroupId == 28 || objuploaderData.ComponentGroupId == 42 ||
                    ((objuploaderData.ComponentGroupId == 22 ||
                    objuploaderData.ComponentGroupId == 39) && objuploaderData.CountryId != 3) 
                    || objuploaderData.ComponentGroupId == 45 || objuploaderData.ComponentGroupId == 47 
                    || objuploaderData.ComponentGroupId == 48 ||
                    ((objuploaderData.ComponentGroupId == 49 || objuploaderData.ComponentGroupId == 50) &&
                    (objuploaderData.CountryId != 18 && objuploaderData.CountryId != 19 && objuploaderData.CountryId != 20)) ||
                    objuploaderData.ComponentGroupId == 51 || objuploaderData.ComponentGroupId == 52 ||
                    objuploaderData.ComponentGroupId == 53 || objuploaderData.ComponentGroupId == 56)
                {
                    return DBHelper.ExecuteDataset("usp_APAC_GetReversalProcessedReport", objuploaderData);
                }
                else
                {
                    return DBHelper.ExecuteDataset("usp_SGP_GetReversalProcessedReport", objuploaderData);
                }
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// 930165: Get LunchVoucherYear Data.
        /// </summary>
        /// <param name="objUploadData">object upload Details</param> 
        /// <returns>Lunch Voucher details.</returns>
        public static DataSet GetLunchVoucherYearReport(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetCE_LunchVoucherLeaveData_Report", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// 260947: Gets Reversal Data Report.
        /// </summary>
        /// <param name="objuploaderData">object uploader Details</param> 
        /// <returns>reversal details.</returns>
        public static DataSet GetReversalDataTemplate(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_GetReversalDataTemplateReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Get Project ID for associate.
        /// </summary>
        /// <param name="objcompDetails">Component Details.</param> 
        /// <returns>Associate Project ID.</returns>
        public static DataSet GetAssociateProjectIdAndName(ComponentDetails objcompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_SGP_GetAssociateInformation]", objcompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Get Project ID for associate.
        /// </summary>
        /// <param name="objcompDetails">Component Details.</param> 
        /// <returns>Associate Project ID.</returns>
        public static DataSet GetAssociateProjectIdAndNameForUploader(ComponentDetails objcompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetAssociateInformation]", objcompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Get Customer Name 
        /// </summary>
        /// <param name="objcompDetails">Component Details.</param> 
        /// <returns>Customer Name Project ID.</returns>
        public static DataSet GetCustomerName(ComponentDetails objcompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetCustomerName]", objcompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Associate Details for Joining Bonus.
        /// </summary>
        /// <param name="objcompDetails">object Component Details</param> 
        /// <returns>Associate Information.</returns>
        public static DataSet GetAssociateDetailsforJB(ComponentDetails objcompDetails)
        {
            try
            {
                if (objcompDetails.CountryID == 2)
                {
                    return DBHelper.ExecuteDataset("usp_SGP_GetAssociate_JB_Information", objcompDetails);
                }
                else if (((objcompDetails.COMPONENTGROUPID == 29 || objcompDetails.COMPONENTGROUPID == 50
                    || objcompDetails.COMPONENTGROUPID == 49 ) && (objcompDetails.CountryID != 3))
                    || ((objcompDetails.COMPONENTGROUPID == 53 || objcompDetails.COMPONENTGROUPID == 54 ||
                    objcompDetails.COMPONENTGROUPID == 55 || objcompDetails.COMPONENTGROUPID == 59 ||
                    objcompDetails.COMPONENTGROUPID == 60 || objcompDetails.COMPONENTGROUPID == 61 || 
                    objcompDetails.COMPONENTGROUPID == 62 || objcompDetails.COMPONENTGROUPID == 63 ||
                    objcompDetails.COMPONENTGROUPID == 64 || objcompDetails.COMPONENTGROUPID == 65 || 
                    objcompDetails.COMPONENTGROUPID == 67 || objcompDetails.COMPONENTGROUPID == 68 || 
                    objcompDetails.COMPONENTGROUPID == 69 || objcompDetails.COMPONENTGROUPID == 70 ||
                    objcompDetails.COMPONENTGROUPID == 57 || objcompDetails.COMPONENTGROUPID == 66 ||
                    objcompDetails.COMPONENTGROUPID == 56) &&
                    (objcompDetails.CountryID == 18 || objcompDetails.CountryID == 19)) ||
                    objcompDetails.COMPONENTGROUPID == 76 || objcompDetails.COMPONENTGROUPID == 77 || 
                    objcompDetails.COMPONENTGROUPID == 78 || objcompDetails.COMPONENTGROUPID == 82 ||
                    objcompDetails.COMPONENTGROUPID == 91 || objcompDetails.COMPONENTGROUPID == 92 || 
                    objcompDetails.COMPONENTGROUPID == 93 || objcompDetails.COMPONENTGROUPID == 95 || 
                    objcompDetails.COMPONENTGROUPID == 96 || objcompDetails.COMPONENTGROUPID == 97 ||
                    objcompDetails.COMPONENTGROUPID == 79 || objcompDetails.COMPONENTGROUPID == 80 ||
                    objcompDetails.COMPONENTGROUPID == 81 || objcompDetails.COMPONENTGROUPID == 83 ||
                    objcompDetails.COMPONENTGROUPID == 84 || objcompDetails.COMPONENTGROUPID == 71 ||
                    objcompDetails.COMPONENTGROUPID == 72 || objcompDetails.COMPONENTGROUPID == 73 ||
                    objcompDetails.COMPONENTGROUPID == 74 || objcompDetails.COMPONENTGROUPID == 75 ||
                    objcompDetails.COMPONENTGROUPID == 85 || objcompDetails.COMPONENTGROUPID == 86 ||
                    objcompDetails.COMPONENTGROUPID == 87 || objcompDetails.COMPONENTGROUPID == 88 ||
                    objcompDetails.COMPONENTGROUPID == 89 || objcompDetails.COMPONENTGROUPID == 94 ||
                    ((objcompDetails.COMPONENTGROUPID == 29 || objcompDetails.COMPONENTGROUPID == 30||
                    objcompDetails.COMPONENTGROUPID == 49 || objcompDetails.COMPONENTGROUPID == 2 ||
                    objcompDetails.COMPONENTGROUPID == 90 || objcompDetails.COMPONENTGROUPID == 58 ||
                    objcompDetails.COMPONENTGROUPID == 3) && (objcompDetails.CountryID == 20)))
                {
                    return DBHelper.ExecuteDataset("[dbo].[usp_GetAssociateInformation]", objcompDetails);
                }
                else
                {
                    return DBHelper.ExecuteDataset("[dbo].[usp_NLD_GetAssociateInformation]", objcompDetails);
                }
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Associate Details for Joining Bonus.
        /// </summary>
        /// <param name="objcompDetails">object Component Details</param> 
        /// <returns>Associate Information.</returns>
        public static DataSet GetAPACSchoolFeesAssociateDetails(ComponentDetails objcompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetAssociateInformation_APAC_SF", objcompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Associate Details for Joining Bonus.
        /// </summary>
        /// <param name="objcompDetails">object Component Details</param> 
        /// <returns>Associate Information.</returns>
        public static DataSet GetCELunchVoucherLeaveDetails(SGPUploadData objcompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[usp_GetCE_LunchVoucherLeaveData]", objcompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Reversal details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveNLDReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_NLD_InsertReversalData] ", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Reversal details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveAPACReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_APAC_InsertReversalData] ", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Reversal details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveInsuranceReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_Insurance_InsertReversalData] ", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Reversal details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveNLDSignOnBonusReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_NLD_InsertSignOnBonusReversalData] ", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Reversal details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveJBReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_JB_InsertReversalData] ", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Reversal details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveShiftPayoutReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_NSA_InsertReversalData] ", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Reversal details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveSARReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_SAR_InsertReversalData] ", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Reversal details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveAPReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_AP_InsertReversalData] ", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateNLDReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_NLD_UpdateReversalData]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateInsuranceReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_Insurance_UpdateReversalData]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_JB_UpdateReversalData]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateShiftTimepayoutReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_NSA_UpdateReversalData]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateSARReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_SAR_UpdateReversalData]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateAPACReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_APAC_UpdateReversalData]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateAPReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_AP_UpdateReversalData]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateNLDExceptionReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_NLD_MoveReversalDataToValid]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateInsuranceExceptionReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_NLD_Insurance_MoveReversalDataToValid]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_SGP_JBMoveReversalDataToValid]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionShiftTimepayoutReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_SGP_NSAMoveReversalDataToValid]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionSARReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_SGP_SARMoveReversalDataToValid]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionAPReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_SGP_APMoveReversalDataToValid]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: updates Reversal Data.
        /// </summary>
        /// <param name="objReversalData">Currency details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionAPACReversalData(TrtReversal objReversalData)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_APAC_MoveReversalDataToValid]", objReversalData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetSGPReversalViewData(TrtReversal objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_SGP_ViewValidReversalRecord]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetNLDReversalViewData(TrtReversal objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_NLD_ViewValidReversalRecord]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Get Project ID for associate.
        /// </summary>
        /// <param name="objcompDetails">Component Details.</param> 
        /// <returns>Associate Project ID.</returns>
        public static DataSet GetAssociateProjectIdAndNameForReversal(ComponentDetails objcompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_SGP_GetReversalAssociateInformation]", objcompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Report.
        /// </summary>
        /// <param name="objreport">report details.</param> 
        /// <returns>Reject Delete report details.</returns>
        public static DataSet GenerateReportDataNLD(ReportDetails objreport)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_NLD_GenerateReportData", objreport);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Report.
        /// </summary>
        /// <param name="objreport">report details.</param> 
        /// <returns>Reject Delete report details.</returns>
        public static DataSet GenerateReportDataAPAC(ReportDetails objreport)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_APAC_GenerateReportData", objreport);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Report.
        /// </summary>
        /// <param name="objreport">report details.</param> 
        /// <returns>Reject Delete report details.</returns>
        public static DataSet GenerateReportData(ReportDetails objreport)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_GenerateReportData", objreport);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Report.
        /// </summary>
        /// <param name="objreport">report details.</param> 
        /// <returns>Reject Delete report details.</returns>
        public static DataSet GenerateReportDataCE(ReportDetails objreport)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_CE_GenerateReportData", objreport);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Report.
        /// </summary>
        /// <param name="objreport">report details.</param> 
        /// <returns>Reject Delete report details.</returns>
        public static DataSet GenerateConsolidatedApprovedDataReportDataCE(ReportDetails objreport)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_CE_GenerateConsolidatedApprovedReportData", objreport);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Update Referral Bonus Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateUploaderValidData(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_UpdateValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Update Referral Bonus Exception data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateUploaderExceptionData(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_MoveExpToValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "shiftSplit1", Justification = "Reviewed")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1806:DoNotIgnoreMethodResults",
            MessageId = "System.String.Split(System.Char[])", Justification = "Reviewed.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewSARShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            try
            {
                ShiftDetails objShiftDetails1 = new ShiftDetails();
                List<string> objStatus = new List<string>();

                for (int k = 0; k < shiftData.Count; k++)
                {
                    if (shiftData[k] != null)
                    {
                        string[] shiftSplit = shiftData[k].Split(',');
                        objShiftDetails.AssociateID = Convert.ToInt64(shiftSplit[0].ToString());
                        objShiftDetails.ComponentGroupId = Convert.ToInt32(shiftSplit[1].ToString());
                        objShiftDetails.StartDate = shiftSplit[2].ToString();
                        objShiftDetails.EndDate = shiftSplit[3].ToString();
                        objShiftDetails.OccupancyType = Convert.ToInt32(shiftSplit[4].ToString());
                        objShiftDetails.TotalDays = Convert.ToInt32(shiftSplit[5].ToString());
                        objShiftDetails.ProjectId = shiftSplit[6].ToString();
                        objShiftDetails.Attachmail = shiftSplit[7].ToString();
                        for (int j = k + 1; j < shiftData.Count; j++)
                        {
                            if (shiftData[j] != null)
                            {
                                string[] shiftSplit1 = shiftData[j].Split(',');
                                objShiftDetails1.AssociateID = Convert.ToInt64(shiftSplit1[0].ToString());
                                objShiftDetails1.ComponentGroupId = Convert.ToInt32(shiftSplit1[1].ToString());
                                objShiftDetails1.StartDate = shiftSplit1[2].ToString();
                                objShiftDetails1.EndDate = shiftSplit1[3].ToString();
                                objShiftDetails1.OccupancyType = Convert.ToInt32(shiftSplit1[4].ToString());
                                objShiftDetails1.TotalDays = Convert.ToInt32(shiftSplit1[5].ToString());

                                objShiftDetails1.ProjectId = shiftSplit1[6].ToString();
                                objShiftDetails1.Attachmail = shiftSplit1[7].ToString();

                                if (objShiftDetails.ProjectId == objShiftDetails1.ProjectId &&
                                    objShiftDetails1.ComponentGroupId == 17 && objShiftDetails.ComponentGroupId == 17
                                    && objShiftDetails1.AssociateID == objShiftDetails.AssociateID &&
                                    objShiftDetails1.StartDate == objShiftDetails.StartDate &&
                                    objShiftDetails1.EndDate == objShiftDetails.EndDate &&
                                    objShiftDetails1.OccupancyType == objShiftDetails.OccupancyType &&
                                    objShiftDetails1.TotalDays == objShiftDetails.TotalDays &&
                                     objShiftDetails1.Attachmail == objShiftDetails.Attachmail)
                                {
                                    shiftData[j] = null;
                                    shiftData[k] = null;
                                }
                            }
                        }
                    }
                }

                for (int i = 0; i < shiftData.Count; i++)
                {
                    if (shiftData[i] != null)
                    {
                        string[] shiftSplit1 = shiftData[i].Split(',');
                        objShiftDetails.AssociateID = Convert.ToInt64(shiftSplit1[0].ToString());
                        objShiftDetails.ComponentGroupId = Convert.ToInt32(shiftSplit1[1].ToString());
                        objShiftDetails.StartDate = shiftSplit1[2].ToString();
                        objShiftDetails.EndDate = shiftSplit1[3].ToString();
                        objShiftDetails.OccupancyType = Convert.ToInt32(shiftSplit1[4].ToString());
                        objShiftDetails.TotalDays = Convert.ToInt32(shiftSplit1[5].ToString());

                        objShiftDetails.ProjectId = shiftSplit1[6].ToString();
                        objShiftDetails.Attachmail = shiftSplit1[7].ToString();
                        DataSet dstemp =
                        DBHelper.ExecuteDataset("usp_SGP_SAR_InsertValidUploaderData", objShiftDetails);
                        objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                    }
                    else
                    {
                        objStatus.Add("Overlap with the claims");
                    }
                }

                return objStatus;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 260947: Saves uploaded file details to DB.
        /// </summary>
        /// <param name="objFileUploadDetails">File Upload details.</param> 
        /// <returns>file upload details</returns>
        public static object SaveSGPFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            try
            {
                return DBHelper.ExecuteScalar("usp_SGP_AddMailAttachements", objFileUploadDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 260947: Saves uploaded file details to DB.
        /// </summary>
        /// <param name="objFileUploadDetails">File Upload details.</param> 
        /// <returns>file upload details</returns>
        public static object SaveCEFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            try
            {
                return DBHelper.ExecuteScalar("usp_CE_AddMailAttachements", objFileUploadDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets AppTemplate Id for SAN.
        /// </summary>
        /// <returns>Exception details.</returns>
        public static DataSet FetchAppTemplateIdforSAN()
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetAppTemplateId");
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "objShiftDetails1", Justification = "Reviewed."),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification = "Reviewed"),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "shiftSplit1", Justification = "Reviewed")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1806:DoNotIgnoreMethodResults",
            MessageId = "System.String.Split(System.Char[])", Justification = "Reviewed.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<List<string>> SaveNewSDAShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            try
            {
                ////ShiftDetails objShiftDetails1 = new ShiftDetails();
                List<List<string>> obj = new List<List<string>>();
                List<string> objStatus = new List<string>();
                List<string> objId = new List<string>();
                DataSet dstemp = new DataSet();
                               
                for (int i = 0; i < shiftData.Count; i++)
                {
                    if (shiftData[i] != null)
                    {
                        string[] shiftSplit1 = shiftData[i].Split(',');
                        if (Convert.ToInt64(shiftSplit1[8]) == 0)
                        {
                            objShiftDetails.AssociateID = Convert.ToInt64(shiftSplit1[0].ToString());
                            objShiftDetails.ComponentGroupId = Convert.ToInt32(shiftSplit1[1].ToString());
                            objShiftDetails.StartDate = shiftSplit1[2].ToString();
                            objShiftDetails.EndDate = shiftSplit1[3].ToString();
                            objShiftDetails.StartTime = shiftSplit1[4].ToString();
                            objShiftDetails.EndTime = shiftSplit1[5].ToString();
                            objShiftDetails.ShiftType = Convert.ToInt32(shiftSplit1[6]);
                            objShiftDetails.ProjectId = shiftSplit1[7].ToString();
                            ////objShiftDetails.TransportEligibility = shiftSplit1[8].ToString();
                            ////objShiftDetails.BillingDetails = shiftSplit1[9].ToString();
                            if (objShiftDetails.CountryID == 2)
                            {
                                dstemp =
                                DBHelper.ExecuteDataset("Usp_SGPShiftPayout_InsertValidUploaderData", objShiftDetails);
                            }
                            else
                            {
                                dstemp =
                                DBHelper.ExecuteDataset("Usp_APACShiftPayout_InsertValidUploaderData",
                                objShiftDetails);
                            }

                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                            objId.Add(dstemp.Tables[1].Rows[0][0].ToString());
                        }
                        else
                        {
                            UploaderData objUpload = new UploaderData();

                            objUpload.KeyId = Convert.ToInt32(shiftSplit1[8].ToString());
                            objUpload.AssociateID = Convert.ToInt32(shiftSplit1[0].ToString());
                            objUpload.StartDate = shiftSplit1[2].ToString();
                            objUpload.EndDate = shiftSplit1[3].ToString();
                            objUpload.StartTime = shiftSplit1[4].ToString();
                            objUpload.EndTime = shiftSplit1[5].ToString();
                            objUpload.ProjectId = shiftSplit1[7].ToString();
                            objUpload.ComponentGroupId = Convert.ToInt64(shiftSplit1[1].ToString());
                            objUpload.ShiftType = Convert.ToInt32(shiftSplit1[6]);
                            objUpload.LoginId = objShiftDetails.LoginId.ToString();
                            objUpload.CountryId = objShiftDetails.CountryID;
                            if (objShiftDetails.CountryID == 2)
                            {
                                dstemp = DBHelper.ExecuteDataset("Usp_SGPShiftPayout_MoveExpToValidUploaderData",
                                         objUpload);
                            }
                            else
                            {
                                dstemp = DBHelper.ExecuteDataset("Usp_APACShiftPayout_MoveExpToValidUploaderData",
                                         objUpload);
                            }

                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }
                    }
                    else
                    {
                        objStatus.Add("Overlap with the claims");
                    }
                }

                obj.Add(objStatus);
                obj.Add(objId);

                return obj;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// TO update grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="bpsSda">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateSDAGridData(ShiftDetails objShiftDetails, List<string> bpsSda)
        {
            try
            {
                List<string> objStatus = new List<string>();
                UploaderData objUpload = new UploaderData();
                for (int i = 0; i < bpsSda.Count; i++)
                {
                    string[] shiftSplit = bpsSda[i].Split(',');
                    objUpload.KeyId = Convert.ToInt32(shiftSplit[0]);
                    int type = Convert.ToInt32(shiftSplit[1]);
                    ////objUpload.AssociateId = shiftSplit[2].ToString();                  
                    objUpload.StartDate = shiftSplit[2].ToString();
                    objUpload.EndDate = shiftSplit[3].ToString();
                    objUpload.StartTime = shiftSplit[4].ToString();
                    objUpload.EndTime = shiftSplit[5].ToString();
                    objUpload.ProjectId = shiftSplit[8].ToString();
                    ////objUpload.TransportEligibility = Convert.ToInt32(shiftSplit[6]);
                    ////objUpload.BillingDetails = Convert.ToInt32(shiftSplit[7]);

                    ////objUpload.ComponentId = Convert.ToInt32(shiftSplit[8]);
                    objUpload.ComponentGroupId = Convert.ToInt32(shiftSplit[6]);
                    objUpload.ShiftType = Convert.ToInt32(shiftSplit[7]);
                    objUpload.LoginId = objShiftDetails.LoginId.ToString();
                    objUpload.CountryId = objShiftDetails.CountryID;

                    if (type == 1)
                    {
                        if (objShiftDetails.CountryID == 2)
                        {
                            DataSet dstemp = DBHelper.ExecuteDataset("Usp_SGPShiftPayout_UpdateValidUploaderData",
                                             objUpload);
                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }
                        else
                        {
                            DataSet dstemp = DBHelper.ExecuteDataset("Usp_APACShiftPayout_UpdateValidUploaderData",
                                objUpload);
                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }
                    }
                    else if (type == 2)
                    {
                        if (objShiftDetails.CountryID == 2)
                        {
                            DataSet dstemp = DBHelper.ExecuteDataset("Usp_SGPShiftPayout_MoveExpToValidUploaderData",
                                objUpload);
                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }
                        else
                        {
                            DataSet dstemp = DBHelper.ExecuteDataset("Usp_APACShiftPayout_MoveExpToValidUploaderData",
                                objUpload);
                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }
                    }
                }

                return objStatus;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification = "Reviewed"),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "shiftSplit1", Justification = "Reviewed")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1806:DoNotIgnoreMethodResults",
            MessageId = "System.String.Split(System.Char[])", Justification = "Reviewed.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<List<string>> SaveNewNSAShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            try
            {
                ////ShiftDetails objShiftDetails1 = new ShiftDetails();
                List<List<string>> obj = new List<List<string>>();
                List<string> objStatus = new List<string>();
                List<string> objId = new List<string>();
                DataSet dstemp = new DataSet();               

                for (int i = 0; i < shiftData.Count; i++)
                {
                    if (shiftData[i] != null)
                    {
                        string[] shiftSplit1 = shiftData[i].Split(',');
                        if (Convert.ToInt64(shiftSplit1[7]) == 0)
                        {
                            objShiftDetails.AssociateID = Convert.ToInt64(shiftSplit1[0].ToString());
                            objShiftDetails.ComponentGroupId = Convert.ToInt32(shiftSplit1[1].ToString());
                            objShiftDetails.StartDate = shiftSplit1[2].ToString();
                            objShiftDetails.EndDate = shiftSplit1[3].ToString();
                            objShiftDetails.StartTime = shiftSplit1[4].ToString();
                            objShiftDetails.EndTime = shiftSplit1[5].ToString();
                            objShiftDetails.ProjectId = shiftSplit1[6].ToString();
                            objShiftDetails.ShiftType = 0;
                            if (objShiftDetails.CountryID == 2)
                            {
                               dstemp =
                               DBHelper.ExecuteDataset("Usp_SGPShiftPayout_InsertValidUploaderData", objShiftDetails);
                            }

                            else if (objShiftDetails.CountryID == 6 && objShiftDetails.ComponentGroupId == 41)
                            {
                               dstemp =
                               DBHelper.ExecuteDataset("Usp_MalaysiaShiftAllowance_InsertValidUploaderData",
                               objShiftDetails);
                            }
                            else
                            {
                               dstemp =
                               DBHelper.ExecuteDataset("Usp_APACShiftPayout_InsertValidUploaderData",
                               objShiftDetails);
                            }

                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                            objId.Add(dstemp.Tables[1].Rows[0][0].ToString());
                        }
                        else
                        {
                            UploaderData objUpload = new UploaderData();

                            objUpload.KeyId = Convert.ToInt32(shiftSplit1[7].ToString());
                            objUpload.AssociateID = Convert.ToInt32(shiftSplit1[0].ToString());
                            objUpload.StartDate = shiftSplit1[2].ToString();
                            objUpload.EndDate = shiftSplit1[3].ToString();
                            objUpload.StartTime = shiftSplit1[4].ToString();
                            objUpload.EndTime = shiftSplit1[5].ToString();
                            objUpload.ProjectId = shiftSplit1[6].ToString();
                            objUpload.ComponentGroupId = Convert.ToInt64(shiftSplit1[1].ToString());
                            objUpload.ShiftType = 0;
                            objUpload.CountryId = objShiftDetails.CountryID;
                            objUpload.LoginId = objShiftDetails.LoginId.ToString();
                            if (objShiftDetails.CountryID == 2)
                            {
                                dstemp =
                                DBHelper.ExecuteDataset("Usp_SGPShiftPayout_MoveExpToValidUploaderData", objUpload);
                            }

                            else if (objShiftDetails.CountryID == 6 && objUpload.ComponentGroupId == 41)
                            {
                                dstemp =
                                DBHelper.ExecuteDataset("Usp_MalaysiaShiftAllowance_MoveExpToValidUploaderData",
                                objUpload);
                            }
                            else if (objUpload.ComponentGroupId == 16 &&
                                (objShiftDetails.CountryID == 5 || objShiftDetails.CountryID == 6) &&
                                shiftSplit1[8].ToString().Equals("success"))
                            {
                                dstemp = 
                                DBHelper.ExecuteDataset("Usp_APACShiftPayout_UpdateValidUploaderData", objUpload);
                            }
                            else
                            {
                                dstemp =
                                DBHelper.ExecuteDataset("Usp_APACShiftPayout_MoveExpToValidUploaderData", objUpload);
                            }

                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                            objId.Add(objUpload.KeyId.ToString());
                        }
                    }
                    else
                    {
                        objStatus.Add("Overlap with the claims");
                    }
                }

                obj.Add(objStatus);
                obj.Add(objId);

                return obj;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: saves new insert in ShiftAllowance Grid
        /// </summary>
        /// <param name="objpolicyDetails">object ShiftDetails</param>  
        /// <param name="policyData">Shift Data</param> 
        /// <returns>status success or failure with message</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1002:DoNotExposeGenericLists", Justification = "Reviewed")]
        public static List<string> SaveNewPolicyGrid(ShiftDetails objpolicyDetails, List<string> policyData)
        {
            ShiftDetails objpolicyDetails1 = new ShiftDetails();
            List<string> objStatus = new List<string>();

            for (int k = 0; k < policyData.Count; k++)
            {
                if (policyData[k] != null)
                {
                    string[] shiftSplit = policyData[k].Split(',');
                    objpolicyDetails.CustomerID = shiftSplit[0].ToString();
                    objpolicyDetails.Days = Convert.ToInt32(shiftSplit[1]);
                    objpolicyDetails.PolicyAmount = shiftSplit[2].ToString();
                    objpolicyDetails.CriteriaType = Convert.ToInt32(shiftSplit[3]);
                    objpolicyDetails.ComponentId = Convert.ToInt32(shiftSplit[4]);

                    for (int j = k + 1; j < policyData.Count; j++)
                    {
                        if (policyData[j] != null)
                        {
                            string[] shiftSplit1 = policyData[j].Split(',');
                            objpolicyDetails.CustomerID = shiftSplit[0].ToString();
                            objpolicyDetails.Days = Convert.ToInt32(shiftSplit[1]);
                            objpolicyDetails.PolicyAmount = shiftSplit[2].ToString();
                            objpolicyDetails.CriteriaType = Convert.ToInt32(shiftSplit[3]);
                            objpolicyDetails.ComponentId = Convert.ToInt32(shiftSplit[4]);

                            if (objpolicyDetails.CustomerID == objpolicyDetails1.CustomerID &&
                                objpolicyDetails1.Days == objpolicyDetails.Days &&
                                objpolicyDetails1.PolicyAmount == shiftSplit[2].ToString()
                                && objpolicyDetails1.CriteriaType == objpolicyDetails.CriteriaType
                                && objpolicyDetails1.ComponentId == objpolicyDetails.ComponentId)
                            {
                                policyData[j] = null;
                                policyData[k] = null;
                            }
                        }
                    }
                }
            }

            for (int i = 0; i < policyData.Count; i++)
            {
                if (policyData[i] != null)
                {
                    string[] shiftSplit1 = policyData[i].Split(',');
                    objpolicyDetails.CustomerID = shiftSplit1[0].ToString();
                    objpolicyDetails.Days = Convert.ToInt32(shiftSplit1[1]);
                    objpolicyDetails.PolicyAmount = shiftSplit1[2].ToString();
                    objpolicyDetails.CriteriaType = Convert.ToInt32(shiftSplit1[3]);
                    objpolicyDetails.ComponentId = Convert.ToInt32(shiftSplit1[4]);
                    DataSet dstemp = DBHelper.ExecuteDataset("[dbo].[usp_InsertPolicyData]", objpolicyDetails);
                    objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                }
                else
                {
                    objStatus.Add("Overlap with the claims");
                    //// objStatus.Add(null);
                }
            }

            return objStatus;
        }

        /// <summary>
        /// TO update grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="cliNsa">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateNSAGridData(ShiftDetails objShiftDetails, List<string> cliNsa)
        {
            try
            {
                List<string> objStatus = new List<string>();
                UploaderData objUpload = new UploaderData();
                for (int i = 0; i < cliNsa.Count; i++)
                {
                    string[] shiftSplit = cliNsa[i].Split(',');
                    objUpload.KeyId = Convert.ToInt32(shiftSplit[0]);
                    int type = Convert.ToInt32(shiftSplit[1]);
                    objUpload.StartDate = shiftSplit[2].ToString();
                    objUpload.EndDate = shiftSplit[3].ToString();
                    objUpload.StartTime = shiftSplit[4].ToString();
                    objUpload.EndTime = shiftSplit[5].ToString();
                    objUpload.ShiftType = 0;
                    objUpload.ComponentGroupId = Convert.ToInt32(shiftSplit[6]);
                    objUpload.LoginId = objShiftDetails.LoginId.ToString();
                    objUpload.CountryId = objShiftDetails.CountryID;
                    objUpload.ProjectId = shiftSplit[7].ToString();
                    if (type == 1)
                    {
                        if (objShiftDetails.CountryID == 2)
                        {
                            DataSet dstemp = 
                            DBHelper.ExecuteDataset("Usp_SGPShiftPayout_UpdateValidUploaderData", objUpload);
                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }

                        else if (objShiftDetails.CountryID == 6 && objUpload.ComponentGroupId == 41)
                        {
                            DataSet dstemp =
                            DBHelper.ExecuteDataset("Usp_MalaysiaShiftAllowance_UpdateValidUploaderData", objUpload);
                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }
                        else
                        {
                            DataSet dstemp =
                            DBHelper.ExecuteDataset("Usp_APACShiftPayout_UpdateValidUploaderData", objUpload);
                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }
                    }
                    else if (type == 2)
                    {
                        if (objShiftDetails.CountryID == 2)
                        {
                           DataSet dstemp = 
                           DBHelper.ExecuteDataset("Usp_SGPShiftPayout_MoveExpToValidUploaderData", objUpload);
                           objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }

                       else if (objShiftDetails.CountryID == 6 && objUpload.ComponentGroupId == 41)
                        {
                           DataSet dstemp =
                           DBHelper.ExecuteDataset("Usp_MalaysiaShiftAllowance_MoveExpToValidUploaderData", objUpload);
                           objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }
                        else
                        {
                            DataSet dstemp =
                            DBHelper.ExecuteDataset("Usp_APACShiftPayout_MoveExpToValidUploaderData", objUpload);
                            objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                        }
                    }
                }

                return objStatus;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet GetAccountNameDetails(SGPUploadData objCompDetails)
        {
            return DBHelper.ExecuteDataset("usp_GetAccountDetailsNLD", objCompDetails);
        }

        /// <summary>
        /// 311556: Gets Dropdown Details APAC
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetDropdownSPDDataUK(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetDropDownData_NLD]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Empty template url.
        /// </summary>
        /// <param name="objdetails">File Upload details.</param> 
        /// <returns>url to fetch corresponding excel.</returns>
        public static DataSet GetFAQDocument(FileUploadDetails objdetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_RetriveFAQ", objdetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 923568: To Check Associate is Servian or Contino of australia.
        /// </summary>
        /// <param name="objdetails">Passing the object.</param> 
        /// <returns>return servian associate 1 or 0</returns>
        public static DataSet IsAssociateServianContino(ComponentDetails objdetails)
        {
            try
            {
                DataSet dt = new DataSet();
                dt = DBHelper.ExecuteDataset("[dbo].[IsAssociateServianContino]", objdetails);
                return dt;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        public static string IsAssociateExist(string AssociateID)
        {
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    string status;
                    SqlParameter param = new SqlParameter();
                    param.DbType = DbType.String;
                    param.ParameterName = "@AssociateID";
                    param.Value = AssociateID;
                    status = Convert.ToString(SqlHelper.ExecuteScalar(con, CommandType.StoredProcedure, "Usp_France_Transport_existingRecordCheck", param));
                    return status;
                }
                catch (SystemException ex)
                {
                    throw ex;
                }
            }

        }
        /// <summary>
        /// 923568: To Check Associate is Servian or Contino of australia.
        /// </summary>
        /// <param name="objdetails">Passing the object.</param> 
        /// <returns>return servian associate 1 or 0</returns>
        public static DataSet GetAPACProject(ComponentDetails objdetails)
        {
            try
            {
                DataSet dt = new DataSet();
                dt = DBHelper.ExecuteDataset("[dbo].[usp_GetApacProject]", objdetails);
                return dt;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        ///// <summary>        
        ///// Method to dispose unused memory  
        ///// </summary>   
        ///// <param name="disposing">disposing true or false.</param>
        //protected virtual void Dispose(bool disposing)
        //{
        //}
    }
}

Now, explain me about the download flow clearly,if you need any other file for explanation also tell me, I can paste here.

// <copyright file="Global.asax.cs" company="Cognizant">
//     Copyright (c) Cognizant. All rights reserved.
// </copyright>
namespace MYP.UI
{
    using System;
    using System.Configuration;
    using System.Diagnostics;
    using System.Security;
    using System.Security.Cryptography.X509Certificates;
    using System.Text;
    using System.Web;
    using System.Web.Http;
    using System.Web.Mvc;
    using System.Web.Optimization;
    using System.Web.Routing;
    using Controllers;
    using CTS.OneCognizant.Platform.CoreServices;
    using MYP.BL;
    using MYP.Core;

    /// <summary>
    /// MVC Application Start Class
    /// </summary>
    public class MvcApplication : System.Web.HttpApplication
    {
        /// <summary>
        /// Application Start Logic
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.ReadabilityRules", "SA1126:PrefixCallsCorrectly", Justification = "Reviewed")]
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            WebApiConfig.Register(GlobalConfiguration.Configuration);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
            AuthConfig.RegisterAuth();
            MvcHandler.DisableMvcResponseHeader = true;
            AppDomain currentDomain = AppDomain.CurrentDomain;
            currentDomain.UnhandledException += new UnhandledExceptionEventHandler(ErrorHandler);
            try
            {
                RSAEncryption rsaEncrypt = new RSAEncryption();
                ExtensionMethod.CertFile = rsaEncrypt.GetCertificateForSignature();
                if (ConfigurationManager.AppSettings["IsKeyVault"] == "1")
                {
                    ErrorLogger errorLog = new ErrorLogger();
                    errorLog.LogInformation("App Start", "Hitting Key Vault App Start WA");
                    KeyVaultService.KeyVaultServiceClient client = new KeyVaultService.KeyVaultServiceClient("BasicHttpBinding_IKeyVaultService");
                    var res = client.FetchEncryptionKey(2394, "GPMasterKeyNP", "GPEncryptionKey2NP");

                    if (res.Result != null)
                    {
                        AESEncryption.ActualAESKey = res.Result;
                    }
                    else
                    {
                        throw new ArgumentNullException(res.ErrorMessage);
                    }

                    ExtensionMethod.AITokenUserName = UnicodeEncoding.ASCII.GetString(Convert.FromBase64String(client.GetSecret(2394, "TokenUserName")));
                    ExtensionMethod.AITokenP = UnicodeEncoding.ASCII.GetString(Convert.FromBase64String(client.GetSecret(2394, "TokenPassword")));
                    ExtensionMethod.GraphAPIClientID = Encoding.UTF8.GetString(Convert.FromBase64String(client.GetSecret(2394, "GraphAPIClientID")));
                    ExtensionMethod.GraphAPIClientSecret = Encoding.UTF8.GetString(Convert.FromBase64String(client.GetSecret(2394, "GraphAPIClientSecret")));
                    ExtensionMethod.OCMEncryptionKey = client.GetSecret(2394, "OCMEncryptionKey");
                    ExtensionMethod.YEADumpPageSize = client.GetSecret(2394, "YEADumpPageSize");
                    ExtensionMethod.TMDumpPageSize = client.GetSecret(2394, "TMDumpPageSize");

                }
                else
                {
                    UntypedDataset objResult = new UntypedDataset();
                    UntypedDataset objAIResult = new UntypedDataset();
                    HomePageBL objBL = new HomePageBL();
                    objResult = objBL.GetAESKeyValuePair();
                    objAIResult = objBL.GetAITokenUsername();

                    if (objResult.Tables[0].Rows.Count > 0)
                    {
                        AESEncryption.ActualAESKey = rsaEncrypt.DecryptRsa((byte[])objResult.Tables[0].Rows[0]["AESKey"]);
                    }

                    if (objAIResult.Tables[0].Rows.Count > 0)
                    {
                        ExtensionMethod.AITokenUserName = ExtensionMethod.DecodeBase64(objAIResult.Tables[0].Rows[0]["TokenUserName"].ToString());
                        ExtensionMethod.AITokenP = ExtensionMethod.DecodeBase64(objAIResult.Tables[0].Rows[0]["TokenPassword"].ToString());
                        ExtensionMethod.GraphAPIClientID = "";
                        ExtensionMethod.GraphAPIClientSecret = "";
                        ExtensionMethod.OCMEncryptionKey = "";
                        ExtensionMethod.YEADumpPageSize = "";
                        ExtensionMethod.TMDumpPageSize = "";

                    }
                }
            }
            catch (SystemException ex)
            {
                ex.LogException("App Start", "App Start");
            }
        }

        /// <summary>
        /// session start method
        /// </summary>
        protected void Session_Start()
        {
            if (ConfigurationManager.AppSettings["IsUserContext"].Equals("1") && !ConfigurationManager.AppSettings["IsPT"].Equals("1"))
            {
                UserContext objUser = UserContext.GetUserContext();
                string associateId = objUser.CurrentUser.UserId.ToString();
                HttpContext.Current.Session["LoginID"] = associateId;
                HttpContext.Current.Session["ActualLoginID"] = associateId;
            }
            else
            {
                string associateId = "445920";
                HttpContext.Current.Session["LoginID"] = associateId; ////"555506";
                HttpContext.Current.Session["ActualLoginID"] = associateId;
            }

            HttpContext.Current.Session["IsProxyLogin"] = "0";
            HttpContext.Current.Session["IsProxyUser"] = "0";
            if (string.IsNullOrEmpty(ExtensionMethod.AITokenUserName) || string.IsNullOrEmpty(ExtensionMethod.AITokenP) ||
                string.IsNullOrEmpty(ExtensionMethod.GraphAPIClientID) || string.IsNullOrEmpty(ExtensionMethod.GraphAPIClientSecret) ||
                string.IsNullOrEmpty(ExtensionMethod.OCMEncryptionKey))
            {

                if (ConfigurationManager.AppSettings["IsKeyVault"] == "1")
                {
                    ErrorLogger errorLog = new ErrorLogger();
                    errorLog.LogInformation("Session Start", "Hitting Key Vault Session Start WA");
                    KeyVaultService.KeyVaultServiceClient client = new KeyVaultService.KeyVaultServiceClient("BasicHttpBinding_IKeyVaultService");
                    var res = client.FetchEncryptionKey(2394, "GPMasterKeyNP", "GPEncryptionKey2NP");

                    if (res.Result != null)
                    {
                        AESEncryption.ActualAESKey = res.Result;
                    }
                    else
                    {
                        throw new ArgumentNullException(res.ErrorMessage);
                    }

                    ExtensionMethod.AITokenUserName = UnicodeEncoding.ASCII.GetString(Convert.FromBase64String(client.GetSecret(2394, "TokenUserName")));
                    ExtensionMethod.AITokenP = UnicodeEncoding.ASCII.GetString(Convert.FromBase64String(client.GetSecret(2394, "TokenPassword")));
                    ExtensionMethod.GraphAPIClientID = Encoding.UTF8.GetString(Convert.FromBase64String(client.GetSecret(2394, "GraphAPIClientID")));
                    ExtensionMethod.GraphAPIClientSecret = Encoding.UTF8.GetString(Convert.FromBase64String(client.GetSecret(2394, "GraphAPIClientSecret")));
                    ExtensionMethod.OCMEncryptionKey = client.GetSecret(2394, "OCMEncryptionKey");
                    ExtensionMethod.YEADumpPageSize = client.GetSecret(2394, "YEADumpPageSize");
                    ExtensionMethod.TMDumpPageSize = client.GetSecret(2394, "TMDumpPageSize");
                }
            }
        }

        /// <summary>
        /// Application Error
        /// </summary>
        /// <param name="sender">Sending the error values</param>
        /// <param name="e">Exception message</param>
        protected void Application_Error(object sender, EventArgs e)
        {
            Exception exception = Server.GetLastError();
            if (exception != null)
            {
                EventLog.WriteEntry("GoPerform", "Message:" + exception.Message + " Stacktrace:" + exception.StackTrace);
                Response.Clear();
                Server.ClearError();
                var routeData = new RouteData();
                routeData.Values["controller"] = "Error";
                routeData.Values["action"] = "Index";
                IController controller = new ErrorController();
                var rc = new RequestContext(new HttpContextWrapper(Context), routeData);
                controller.Execute(rc);
            }
        }

        /// <summary>
        /// Error handler
        /// </summary>
        /// <param name="sender">Sending the error values</param>
        /// <param name="args">Exception message</param>
        protected void ErrorHandler(object sender, UnhandledExceptionEventArgs args)
        {
            Exception exception = (Exception)args.ExceptionObject;
            EventLog.WriteEntry("GoPerform", "Message:" + exception.Message + " Stacktrace:" + exception.StackTrace);
        }

        /// <summary>
        /// session End method
        /// </summary>
        protected void Session_End()
        {
            if (HttpContext.Current != null)
            {
                HttpContext.Current.Session.Abandon();
            }
        }
    }
}

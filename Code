This is my Spay.DAL(APACUtilityDAL.cs)

// <copyright file="APACUtilityDAL.cs" company="CTS">
//     Company copyright tag.
// </copyright>

namespace SPay.DAL.APAC_UtilityDAL
{
    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Data;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Text;
    using Microsoft.ApplicationBlocks.Data;
    using OneC.Spay.DC.UtilityDC;
    using SPay.DC.UtilityDC;
    using AzureSQLHelper;
    using SPay.DAL.UtilityDAL;
    using System.Runtime.Remoting.Metadata.W3cXsd2001;

    /// <summary>
    /// Utility Data Layer for APAC region
    /// </summary>
    public class APACUtilityDAL : IDisposable
    {
        /// <summary>
        /// 311556: Connection string from Config.
        /// </summary>
        private static byte[] sqlManagedAzureAD1 = Convert.FromBase64String(ConfigurationManager.ConnectionStrings
        ["SQLManagedAzureAD"].ConnectionString);

        /// <summary>
        /// Decrypted Connection String
        /// </summary>
        private static string conString = Encoding.UTF8.GetString(sqlManagedAzureAD1);

        /// <summary>
        /// 311556: Disposes unused memory.
        /// </summary>        
        public void Dispose()
        {
            ////this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// 311556: Gets Policy page details for components.
        /// </summary>
        /// <param name="objcompDet">Component details.</param> 
        /// <returns>Policy Page details.</returns>
        public static DataSet GetPolicyPageDetails(ComponentDetails objcompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[AccessPolicyPage]", objcompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Set ID details for referral Bonus.
        /// </summary>
        /// <param name="objCompDet">Component details.</param> 
        /// <returns>Set ID details.</returns>
        public static DataSet GetSetIdDetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("Policy.usp_GetSetId", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 930165: Gets RTT details for referral Bonus.
        /// </summary>
        /// <param name="objCompDet">Component details.</param> 
        /// <returns>RTT details.</returns>
        public static DataSet GetRTTDetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetCE_RTTDays", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// The Get Shift Details
        /// </summary>
        /// <param name="objCompDet">The obj CompDet</param>
        /// <returns>Return the value</returns>
        public static DataSet GetShiftDetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_GetShift]", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// To save the cut off date details
        /// </summary>
        /// <param name="objinputs">Cut off date details</param>
        public static void SaveCuttOffDateDetails(SaveCuttOffDateDetails objinputs)
        {
            try
            {
                DBHelper.ExecuteNonQuery("usp_APACSaveCuttOffDateDetails", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidDataSGP(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderValidRecordSGP", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidDataAPAC(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderValidRecordAPAC", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 445918: Gets Uploader data for valid grid for CE region
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidDataCE(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderValidRecord_CE", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidDataNLD(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetUploaderValidRecord_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets OCA policy details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetOCAPolicyData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetOCAPolicyData]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Rejects Uploader valid data.
        /// </summary>
        /// <param name="objUploadData">Upload Details.</param> 
        /// <returns>Success message</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1062:Validate arguments of public methods", MessageId = "0", Justification = "Reviewed")]
        public static string RejectUploaderValidData(UploaderData objUploadData)
        {
            try
            {
                string[] pkey = objUploadData.SelectedValues.Split(',');
                string[] reason = objUploadData.RejectionReasonText.Split(',');
                for (int i = 0; i < pkey.Length; i++)
                {
                    objUploadData.SelectedData = pkey[i];
                    objUploadData.RejectionReason = reason[i].ToString();
                    DBHelper.ExecuteNonQuery("usp_RejectData", objUploadData);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Rejects Uploader valid data.
        /// </summary>
        /// <param name="objUploadData">Upload Details.</param> 
        /// <returns>Success message</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1062:Validate arguments of public methods", MessageId = "0", Justification = "Reviewed")]
        public static string RejectUploaderValidDataNLD(UploaderData objUploadData)
        {
            try
            {
                string[] pkey = objUploadData.SelectedValues.Split(',');
                string[] reason = objUploadData.RejectionReasonText.Split(',');
                for (int i = 0; i < pkey.Length; i++)
                {
                    objUploadData.SelectedData = pkey[i];
                    objUploadData.RejectionReason = reason[i].ToString();
                    DBHelper.ExecuteNonQuery("usp_RejectDataNLD", objUploadData);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Rejects Uploader valid data.
        /// </summary>
        /// <param name="objUploadData">Upload Details.</param> 
        /// <returns>Success message</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1062:Validate arguments of public methods", MessageId = "0", Justification = "Reviewed")]
        public static string RejectUploaderValidDataAPAC(UploaderData objUploadData)
        {
            try
            {
                string[] pkey = objUploadData.SelectedValues.Split(',');
                string[] reason = objUploadData.RejectionReasonText.Split(',');
                for (int i = 0; i < pkey.Length; i++)
                {
                    objUploadData.SelectedData = pkey[i];
                    objUploadData.RejectionReason = reason[i].ToString();
                    DBHelper.ExecuteNonQuery("usp_RejectDataAPAC", objUploadData);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Method to get the Tech team recipients
        /// </summary>
        /// <param name="objContAccess">object Access Details</param> 
        /// <returns>Technical team Ids.</returns>
        public static DataSet GetRejectMailerDetails(ControlAccess objContAccess)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetSGPRejectMailerDetails", objContAccess);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet ApproveUploaderValidData(ComponentDetails objCompDetails)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_ApproveData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@componentGroupId", objCompDetails.COMPONENTGROUPID);
                    processCmd.Parameters.AddWithValue("@selectedData", objCompDetails.SelectedData);
                    processCmd.Parameters.AddWithValue("@LoginId", objCompDetails.LoginId);
                    processCmd.Parameters.AddWithValue("@RoleID", objCompDetails.RoleID);
                    processCmd.Parameters.AddWithValue("@CountryId", objCompDetails.CountryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }


        /// <summary>
        /// 311556: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet ApproveUploaderValidDataNLD(ComponentDetails objCompDetails)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_ApproveDataNLD", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@componentGroupId", objCompDetails.COMPONENTGROUPID);
                    processCmd.Parameters.AddWithValue("@selectedData", objCompDetails.SelectedData);
                    processCmd.Parameters.AddWithValue("@LoginId", objCompDetails.LoginId);
                    processCmd.Parameters.AddWithValue("@RoleID", objCompDetails.RoleID);
                    processCmd.Parameters.AddWithValue("@CountryId", objCompDetails.CountryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet ApproveUploaderValidDataAPAC(ComponentDetails objCompDetails)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_ApproveDataAPAC", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@componentGroupId", objCompDetails.COMPONENTGROUPID);
                    processCmd.Parameters.AddWithValue("@selectedData", objCompDetails.SelectedData);
                    processCmd.Parameters.AddWithValue("@LoginId", objCompDetails.LoginId);
                    processCmd.Parameters.AddWithValue("@RoleID", objCompDetails.RoleID);
                    processCmd.Parameters.AddWithValue("@CountryId", objCompDetails.CountryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 311556: Method to get the Tech team recipients
        /// </summary>
        /// <param name="objContAccess">object Access Details</param> 
        /// <returns>Technical team Ids.</returns>
        public static DataSet GetApproveMailerDetails(ControlAccess objContAccess)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_ApproveMailerDetails", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ApprovedBy", objContAccess.ApprovedBy);
                    processCmd.Parameters.AddWithValue("@selectedData", objContAccess.SelectedDataValue);
                    processCmd.Parameters.AddWithValue("@componentgroupid", objContAccess.Componentgroupid);
                    processCmd.Parameters.AddWithValue("@ApprovedRoleID", objContAccess.ApprovedRoleid);
                    processCmd.Parameters.AddWithValue("@CountryID", objContAccess.CountryId);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 298312: Method to get data for sending MY PAY payment mailer
        /// </summary>
        /// <param name="flag">Flag number</param>
        /// <param name="componentId">component Id</param>
        /// <param name="compName">component Name </param>
        /// <param name="countryID">country ID</param>
        /// <returns>Mailer Details</returns>
        public static DataSet GetFreezePayrollMailerDetails(int flag, string componentId, string compName, int countryID)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollStatusMailerDetails", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@flag", flag);
                    processCmd.Parameters.AddWithValue("@componentId", componentId);
                    processCmd.Parameters.AddWithValue("@SelectedData", compName);
                    processCmd.Parameters.AddWithValue("@CountryId", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 260947: Update Referral Bonus Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateValidData(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_UpdateValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Update NLD Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateValidDataNLD(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_NLD_UpdateValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 445918: Update NLD Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateValidDataCE(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_CE_UpdateValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

       

        /// <summary>
        /// 311556: Update NLD Exception data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionDataNLD(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_NLD_MoveExpToValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Update NLD Exception data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionDataCE(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_CE_MoveExpToValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Update Referral Bonus Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateSARValidData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_SAR_InsertValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Update Referral Bonus Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateSARExceptionData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_SAR_MoveExpToValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Update Referral Bonus Valid data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet NewSARValidData(UploaderData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_SAR_InsertValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Update Joining Bonus Exception data.
        /// </summary>
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdateExceptionData(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_SGP_MoveExpToValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Technical team recipients for mail.
        /// </summary>
        /// <param name="objContAccess">object Access Details</param> 
        /// <returns>Technical team Ids.</returns>
        public static DataSet GetTechTeamRecipients(ControlAccess objContAccess)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetTechTeamRecipientsAndMailerURL", objContAccess);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Get Mailer Active Details
        /// </summary>
        /// <param name="objMail">object mail</param>      
        /// <returns>Mailer status</returns>
        public static int GetMailerActiveDetails(MailerLog objMail)
        {
            try
            {
                return Convert.ToInt32(DBHelper.ExecuteScalar("USP_GETMAILERSENDSTATUS", objMail));
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Logs mailer details.
        /// </summary>
        /// <param name="objMailerLog">object mailer log details</param>       
        public static void LogMailerDetails(MailerLog objMailerLog)
        {
            try
            {
                DBHelper.ExecuteNonQuery("usp_InsertMailerDetails", objMailerLog);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">country ID</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet SGPGetValidData(int componentid, int countryID)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_SGPGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 311556: Saves New Uploader Data.
        /// </summary>;
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveUploaderNewData(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("dbo.usp_SGP_InsertValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Uploader Data.
        /// </summary>;
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveUploaderNewDataNLD(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("dbo.usp_NLD_InsertValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Uploader Data.
        /// </summary>;
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveUploaderDataCE(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("dbo.usp_CE_ValidateUploadData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Saves New Uploader Data.
        /// </summary>;
        /// <param name="objUploadData">Uploader details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet SaveUploaderNewDataCE(SGPUploadData objUploadData)
        {
            try
            {
                return DBHelper.ExecuteDataset("dbo.usp_CE_InsertValidUploaderData", objUploadData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// TO update grid data
        /// </summary>
        /// <param name="objinputs">passing object</param>
        /// <param name="franceUpdateRemarks">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> StopPaymentUploaderValidData(UploaderData objinputs, List<string> franceUpdateRemarks)
        {
            try
            {
                List<string> objStatus = new List<string>();
                UploaderData objUpdate = new UploaderData();
                for (int i = 0; i < franceUpdateRemarks.Count; i++)
                {
                    string[] gradeAmt = franceUpdateRemarks[i].Split(',');
                    objUpdate.ComponentGroupId = Convert.ToInt32(gradeAmt[0]);
                    objUpdate.SelectedData = gradeAmt[1];
                    objUpdate.SelectedEndDate = gradeAmt[2].ToString();
                    objUpdate.LoginId = objinputs.LoginId;
                    objUpdate.CountryId= objinputs.CountryId;
                    DataSet dstemp = DBHelper.ExecuteDataset("usp_NLDPFSSStopPayment", objUpdate);
                }
                objStatus.Add("success");
                return objStatus;

            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }


        /// <summary>
        /// 311556: updates New policy Data.
        /// </summary>;
        /// <param name="objpolicyData">policy details.</param> 
        /// <returns>Valid details.</returns>
        public static DataSet UpdatePolicyData(SGPUploadData objpolicyData)
        {
            try
            {
                return DBHelper.ExecuteDataset("dbo.usp_SGP_InsertValidUploaderData", objpolicyData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets recruitment type.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Recruitment Type details.</returns>
        public static DataSet GetRecruitmentType(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetRecruitmentType", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets recruitment type.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Recruitment Type details.</returns>
        public static DataSet GetDeductionType(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDeductionType", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets recruitment type.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Recruitment Type details.</returns>
        public static DataSet GetInstallmentType(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetInstallmentType", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets recruitment type.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Recruitment Type details.</returns>
        public static DataSet GetCurrencyCode(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetCurrencyCode", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in Exception grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Exception details.</returns>
        public static DataSet GetUploaderExceptionViewData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetViewExceptionRecordForUploader", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in Exception grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Exception details.</returns>
        public static DataSet GetUploaderExceptionViewDataNLD(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetViewExceptionRecordForUploader_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in Exception grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Exception details.</returns>
        public static DataSet GetAPACUploaderExceptionViewData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetAPACViewExceptionRecordForUploader", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Special Case reasons.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Special Cases.</returns>
        public static DataSet GetSpecialCaseReasons(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetSpecialCaseReason", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Special Case reasons.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Special Cases.</returns>
        public static DataSet GetNLDSSpecialCaseReason(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetNLDSpecialCaseReason", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Background Status.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Background Status details.</returns>
        public static DataSet GetBGstatus(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetBGStatus", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Sign on bonus drop down details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetSignonBonusDropdownDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDropDownData_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Sign on bonus drop down details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetPayoutTypeonchangeofsubcomponent(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("Sp_SubcomponentChangeType", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Dropdown Details APAC
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetDropdownDetailsAPAC(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDropDownData_APAC", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Dropdown Details APAC
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetDropdownDetailsCE(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDropDownData_CE", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Dropdown Details NLD- Reversal
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetReversalDropdownDetailsNLD(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDropDownData_Reversal_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Sign on bonus drop down details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>Drop Down details.</returns>
        public static DataSet GetRelocationDropdownDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetDropDownData_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidViewData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetViewValidRecordForUploader", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetAPACUploaderValidViewData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetAPACViewValidRecordForUploader", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Uploader data for view click in valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetUploaderValidViewDataNLD(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetViewValidRecordForUploader_NLD", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets other Geography grid details for referral bonus.
        /// </summary>
        /// <param name="objCompDetails">object Component Details</param> 
        /// <returns>Other Geography grid details to bind.</returns>
        public static DataSet GetOtherGeographyUploaderData(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_GetOtherGeographyUploaderDataSGP", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 316271: Gets Currency template report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetCurrencyDataTemplateSGP(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DataCurrencyTemplateReport", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets data template report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetDataTemplateSGP(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DataTemplateUploaderReportSGP", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 877840: Gets data template report.
        /// </summary>
        /// <param name="objuploaderData">Upload Details.</param> 
        /// <returns>Report details.</returns>
        public static DataSet GetDataTemplateGradeAmount(UploaderData objuploaderData)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_DataTemplateUploaderReportGradeAmount", objuploaderData);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Gets grade details for policy.
        /// </summary>
        /// <param name="objcompDet">Component details.</param> 
        /// <returns>Grade details.</returns>
        public static DataSet GetGradeDetails(ComponentDetails objcompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_GetGradeDetails]", objcompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Other tab details for components.
        /// </summary>
        /// <param name="objcompDet">Component details.</param> 
        /// <returns>Other details.</returns>
        public static DataSet GetOtherDetails(ComponentDetails objcompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_GetOtherDetails]", objcompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Netherland Policy details for components.
        /// </summary>
        /// <param name="objcompDet">Component details.</param> 
        /// <returns>Netherland Policy details.</returns>
        public static DataSet GetNLDPolicyDetails(ComponentDetails objcompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_GetNLDPolicyDetails]", objcompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>        
        /// 311556: Gets grade details for policy.
        /// </summary>
        /// <param name="objcompDet">Component details.</param> 
        /// <returns>Grade details.</returns>
        public static DataSet GetGradeAmountDetails(ComponentDetails objcompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_GetGradeAmount]", objcompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Gets Empty template url.
        /// </summary>
        /// <param name="objdetails">File Upload details.</param> 
        /// <returns>url to fetch corresponding excel.</returns>
        public static DataSet GetEmptyTemplateURL(FileUploadDetails objdetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_RetrieveSPayKeys", objdetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets APAC project details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetAPACProjectDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetAPACProjectDetails]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets APAC project details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetServiceApartmentRecoveryPolicyDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetServiceApartmentRecoveryPolicyDetails]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        
        /// <summary>
        /// 311556: Gets School fees policy details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetSchoolFeesPolicyDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetSchoolFeesPolicyDetails]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets component details
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetPolicyComponentDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetPolicyComponentDetails]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Exception Associate details
        /// </summary>
        /// <param name="objCompDetails">Exception Associate details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetExceptionAssociateDetails(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_APAC_GetExceptionAssociateDetails]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }


        /// <summary>
        /// 311556: Gets Set ID details for referral Bonus.
        /// </summary>
        /// <param name="objCompDet">Component details.</param> 
        /// <returns>Set ID details.</returns>
        public static DataSet GetSDADetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("Policy.usp_SGP_GetSDADetails", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Statutory holiday details for referral Bonus.
        /// </summary>
        /// <param name="objCompDet">Component details.</param> 
        /// <returns>Statutory holiday details.</returns>
        public static DataSet GetStatutoryhoildayDetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("Policy.usp_SGP_GetStatutoryHoildayDetails", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Statutory holiday details for referral Bonus.
        /// </summary>
        /// <param name="objCompDet">Component details.</param> 
        /// <returns>Statutory holiday details.</returns>
        public static DataSet GetStatutoryAmountDetails(ComponentDetails objCompDet)
        {
            try
            {
                return DBHelper.ExecuteDataset("Policy.usp_SGP_GetStatutoryPayoutAmountDetails", objCompDet);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        public static string UpdateSGPPolicyDetails(SPay.DC.UtilityDC.PolicyDetails objpolicyDetails)
        {
            try
            {
                DBHelper.ExecuteNonQuery("[dbo].[Usp_SGP_UpdateMangePolicies]", objpolicyDetails);
                DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyGradeAmount]", objpolicyDetails);
                DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyDetails]", objpolicyDetails);
                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Updates policy details for referral bonus.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        public static string UpdateRBPolicyDetails(PolicyDetails objpolicyDetails)
        {
            try
            {
                DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyDetails]", objpolicyDetails);
                for (int i = 0; i < objpolicyDetails.GradeAmtDetails.Count; i++)
                {
                    string[] gradeAmt = objpolicyDetails.GradeAmtDetails[i].Split(',');
                    objpolicyDetails.GradeforAmt = Convert.ToInt32(gradeAmt[0].ToString());
                    objpolicyDetails.FIXEDAMOUNT = Convert.ToInt32(gradeAmt[1].ToString());
                    DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyGradeAmount]", objpolicyDetails);
                }

                for (int j = 0; j < objpolicyDetails.SetIdProjectIdDetails.Count; j++)
                {
                    string[] setIdPjtId = objpolicyDetails.SetIdProjectIdDetails[j].Split(',');
                    objpolicyDetails.SetId = null;
                    objpolicyDetails.GradeId = null;
                    objpolicyDetails.DepartmentId = null;
                    objpolicyDetails.InactiveDepartmentId = null;
                    objpolicyDetails.RBSetId = setIdPjtId[0].ToString();
                    ////objpolicyDetails.RBProjectId = setIdPjtId[1].ToString();
                    DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyDetails]", objpolicyDetails);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Updates policy details for joining bonus.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status2", Justification = "Reviewed"),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status1", Justification = "Reviewed")]
        public static string UpdatePolicyDetails(PolicyDetails objpolicyDetails)
        {
            try
            {
                DataSet status = new DataSet();
                DataTable status1 = new DataTable();
                DataTable status2 = new DataTable();
                string policyStatus;

                policyStatus = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyDetails]",
                               objpolicyDetails).Tables[0].Rows[0].ItemArray[0].ToString();
                if (policyStatus.Equals("Success"))
                {                    
                    if (objpolicyDetails.ComponentId == 3)
                    {
                        for (int i = 0; i < objpolicyDetails.GradeAmtDetails.Count; i++)
                        {
                            string[] gradeAmt = objpolicyDetails.GradeAmtDetails[i].Split(',');
                            objpolicyDetails.GradeforAmt = Convert.ToInt64(gradeAmt[0].ToString());
                            objpolicyDetails.CampusMinAmount = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[1])
                                                               ? gradeAmt[1] : "0");
                            objpolicyDetails.CampusMaxAmount = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[2]) 
                                                               ? gradeAmt[2] : "0");
                            objpolicyDetails.LateralMinAmount = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[3]) 
                                                               ? gradeAmt[3] : "0");
                            objpolicyDetails.LateralMaxAmount = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[4]) 
                                                               ? gradeAmt[4] : "0");
                            status = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyAmountDetails]", 
                                     objpolicyDetails);
                            policyStatus = status.Tables[0].Rows[0].ItemArray[0].ToString();

                            if (!status.Tables[0].Rows[0].ItemArray[0].Equals("Success"))
                            {
                                break;
                            }
                        }
                    }
                    else if (objpolicyDetails.ComponentId == 2 || objpolicyDetails.ComponentId == 90)
                    {
                        for (int i = 0; i < objpolicyDetails.RBGradeAmtDetails.Count; i++)
                        {
                            string[] gradeAmt = objpolicyDetails.RBGradeAmtDetails[i].Split(',');
                            objpolicyDetails.GradeforAmt = Convert.ToInt32(!string.IsNullOrEmpty(gradeAmt[0]) 
                                                           ? gradeAmt[0] : "0");
                            objpolicyDetails.FIXEDAMOUNT = Convert.ToDecimal(!string.IsNullOrEmpty(gradeAmt[1])
                                                           ? gradeAmt[1] : "0");
                            status = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyAmountDetails]",
                                     objpolicyDetails);
                            policyStatus = status.Tables[0].Rows[0].ItemArray[0].ToString();

                            if (!status.Tables[0].Rows[0].ItemArray[0].Equals("Success"))
                            {
                                break;
                            }
                        }
                    }
                    else if (objpolicyDetails.ComponentId == 55)
                    {
                        for (int i = 0; i < objpolicyDetails.SDAGradeAmtDetails.Count; i++)
                        {
                            string[] gradeAmt = objpolicyDetails.SDAGradeAmtDetails[i].Split(',');
                            objpolicyDetails.UptoShiftHour = Convert.ToInt32(!string.IsNullOrEmpty(gradeAmt[0]) 
                                                            ? gradeAmt[0] : "0");
                            objpolicyDetails.GradeforAmt = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[1])
                                                            ? gradeAmt[1] : "0");
                            objpolicyDetails.FIXEDAMOUNT = Convert.ToInt64(!string.IsNullOrEmpty(gradeAmt[2])
                                                            ? gradeAmt[2] : "0");
                            status = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyAmountDetails]",
                                     objpolicyDetails);
                            policyStatus = status.Tables[0].Rows[0].ItemArray[0].ToString();

                            if (!status.Tables[0].Rows[0].ItemArray[0].Equals("Success"))
                            {
                                break;
                            }
                        }
                    }
                    else if (objpolicyDetails.ComponentId == 88)
                    {
                        for (int i = 0; i < objpolicyDetails.StatutoryHoli.Count; i++)
                        {
                            if (objpolicyDetails.StatutoryHoli[i] != null)
                            {
                                string[] statPayout = objpolicyDetails.StatutoryHoli[i].Split(',');
                                objpolicyDetails.PkeyId = !string.IsNullOrEmpty(statPayout[0]) ? statPayout[0] : "0";
                                objpolicyDetails.Statutorydays = !string.IsNullOrEmpty(statPayout[1]) 
                                                                ? statPayout[1] : "0";
                                objpolicyDetails.IsActive = Convert.ToInt32(!string.IsNullOrEmpty(statPayout[2]) 
                                                            ? statPayout[2] : "0");
                                status = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyAmountDetails]", 
                                    objpolicyDetails);
                                policyStatus = status.Tables[0].Rows[0].ItemArray[0].ToString();
                                if (!status.Tables[0].Rows[0].ItemArray[0].Equals("Success"))
                                {
                                    break;
                                }
                            }
                        }
                    }

                    return policyStatus;
                }
                else
                {
                    return policyStatus;
                }
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Updates policy details for joining bonus.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        public static string UpdateJBPolicyDetails(PolicyDetails objpolicyDetails)
        {
            try
            {
                DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyDetails]", objpolicyDetails);
                for (int i = 0; i < objpolicyDetails.GradeAmtDetails.Count; i++)
                {
                    string[] gradeAmt = objpolicyDetails.GradeAmtDetails[i].Split(',');
                    objpolicyDetails.GradeforAmt = Convert.ToInt64(gradeAmt[0].ToString());
                    objpolicyDetails.CampusMinAmount = Convert.ToInt64(gradeAmt[1].ToString());
                    objpolicyDetails.CampusMaxAmount = Convert.ToInt64(gradeAmt[2].ToString());
                    objpolicyDetails.LateralMinAmount = Convert.ToInt64(gradeAmt[3].ToString());
                    objpolicyDetails.LateralMaxAmount = Convert.ToInt64(gradeAmt[4].ToString());
                    DBHelper.ExecuteNonQuery("[Policy].[usp_SGP_SavePolicyGradeAmount]", objpolicyDetails);
                }

                return "success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Updates policy details for joining bonus.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status2", Justification = "Reviewed"),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status1", Justification = "Reviewed")]
        public static string UpdatePolicyGridDetails(SGPUploadData objpolicyDetails)
        {
            try
            {
                DataTable status1 = new DataTable();
                DataTable status2 = new DataTable();
                string policyStatus;
                policyStatus = DBHelper.ExecuteDataset("[dbo].[usp_UpdatePolicyData]",
                               objpolicyDetails).Tables[0].Rows[0].ItemArray[0].ToString();
                return policyStatus;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 260947: Updates policy details for Statutory Holiday.
        /// </summary>
        /// <param name="objpolicyDetails">Policy details.</param> 
        /// <returns>Success or Failure message.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status2", Justification = "Reviewed"),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals",
            MessageId = "status1", Justification = "Reviewed")]
        public static string UpdateStatutoryHolidayPolicyDetails(PolicyDetails objpolicyDetails)
        {
            try
            {
                DataTable status1 = new DataTable();
                DataTable status2 = new DataTable();
                string policyStatus;
                policyStatus = DBHelper.ExecuteDataset("[Policy].[usp_APAC_SavePolicyAmountDetails]",
                               objpolicyDetails).Tables[0].Rows[0].ItemArray[0].ToString();
                return policyStatus;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetAPACProjectDetailssearch(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetAPACProjectDetailsSearchByProjectId]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetAPACSchoolFeeAssociateSearch(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetAPACAssociateIDSearch]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Gets Uploader data for valid grid.
        /// </summary>
        /// <param name="objCompDetails">Component details.</param> 
        /// <returns>valid details.</returns>
        public static DataSet GetSARGuestHouseSearch(ComponentDetails objCompDetails)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[usp_GetSARGuestHouseSearch]", objCompDetails);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        
        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static DataSet ActivateProjectDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_ChangeProjectStatus", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
     }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static DataSet InsertSchoolFeesPolicyDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("Usp_InsertSchoolFeesPolicyDetails", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static DataSet InsertAPACSchoolFeesPolicyDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("Usp_InsertAPACSchoolFeesPolicyDetails", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static DataSet InsertServiceApartmentRecoveryPolicyDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("Usp_InsertServiceApartmentRecoveryPolicyDetails", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

         /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static DataSet InsertTransportAllowancePolicyDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("Usp_InsertTransportAllowancePolicyDetails", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// 930165: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> RTT Details </returns>
        public static DataSet InsertLunchVoucherAllownceDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("usp_InsertCE_RTTDays", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// 311556: Inserts new component into system
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Component Details </returns>
        public static DataSet InsertComponentDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("[dbo].[Usp_InsertSubComponentDetails] ", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Inserts Exception Associates into system
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Exception Associate Details </returns>
        public static DataSet InsertExpAssociateDetails(ChangeUserStatus objinputs)
        {
            try
            {
                return DBHelper.ExecuteDataset("[Policy].[usp_APAC_InCityExceptionAssociates]", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }


        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static string UpdateAPACSchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            try
            {
                for (int i = 0; i < objinputs.AmountDetails.Count; i++)
                {
                    string[] gradeAmt = objinputs.AmountDetails[i].Split(',');
                    objinputs.PkeyId = gradeAmt[0].ToString();
                    objinputs.AssociateID = gradeAmt[1].ToString();
                    objinputs.SFAmount = gradeAmt[2].ToString();
                    objinputs.Amount1 = gradeAmt[3].ToString();
                    objinputs.Amount2 = gradeAmt[4].ToString();

                    DBHelper.ExecuteNonQuery("Usp_InsertAPACSchoolFeesPolicyDetails", objinputs);
                }

                return "Success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static string UpdateCESchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            try
            {
                for (int i = 0; i < objinputs.AmountDetails.Count; i++)
                {
                    string[] gradeAmt = objinputs.AmountDetails[i].Split(',');
                    objinputs.PkeyId = gradeAmt[0].ToString();
                    objinputs.AssociateID = gradeAmt[1].ToString();
                    objinputs.SFAmount = gradeAmt[2].ToString();
                    objinputs.Amount1 = gradeAmt[3].ToString();
                    objinputs.Amount2 = gradeAmt[4].ToString();
                    objinputs.MaxPercentage = gradeAmt[5].ToString();
                    objinputs.PayoutType = gradeAmt[6].ToString();

                    DBHelper.ExecuteNonQuery("Usp_InsertAPACSchoolFeesPolicyDetails", objinputs);
                }

                return "Success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// TO update grid data
        /// </summary>
        /// <param name="objinputs">passing object</param>
        /// <param name="franceUpdateRemarks">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateFranceSchoolFeesPolicyDetails
        (PolicyDetails objinputs, List<string> franceUpdateRemarks)
        {
            try
            {
                List<string> objStatus = new List<string>();
                PolicyDetails objUpdate = new PolicyDetails();
                for (int i = 0; i < franceUpdateRemarks.Count; i++)
                {
                    string[] gradeAmt = franceUpdateRemarks[i].Split(',');
                    objUpdate.ComponentId = Convert.ToInt32(gradeAmt[0]);
                  
                    objUpdate.AssociateID = gradeAmt[1].ToString();
                    objUpdate.SFAmount = gradeAmt[2].ToString();
                    objUpdate.Amount1 = gradeAmt[3].ToString();
                    objUpdate.Amount2 = gradeAmt[4].ToString();
                    objUpdate.MaxPercentage = gradeAmt[5].ToString();
                    objUpdate.PayoutType = gradeAmt[6].ToString();
                    objUpdate.PkeyId = gradeAmt[7].ToString();
                    objUpdate.STATUS = Convert.ToInt32(gradeAmt[8]);
                    objUpdate.LoginId = objinputs.LoginId;
                    objUpdate.CountryID = objinputs.CountryID;
                    DataSet dstemp = DBHelper.ExecuteDataset("Usp_InsertAPACSchoolFeesPolicyDetails", objUpdate);
                    objStatus.Add(dstemp.Tables[0].Rows[0][0].ToString());
                }

                return objStatus;
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static string UpdateSchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            try
            {
                for (int i = 0; i < objinputs.AmountDetails.Count; i++)
                {
                    string[] gradeAmt = objinputs.AmountDetails[i].Split(',');
                    objinputs.PkeyId = gradeAmt[0].ToString();
                    objinputs.AssociateID = gradeAmt[1].ToString();
                    objinputs.SFAmount = gradeAmt[2].ToString();
                    DBHelper.ExecuteNonQuery("Usp_InsertSchoolFeesPolicyDetails", objinputs);
                }

                return "Success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static string UpdateServiceApartmentRecoveryPolicyDetails(PolicyDetails objinputs)
        {
            try
            {
                for (int i = 0; i < objinputs.AmountDetails.Count; i++)
                {
                    string[] gradeAmt = objinputs.AmountDetails[i].Split(',');
                    objinputs.PkeyId = gradeAmt[0].ToString();
                    objinputs.GuestHouse = gradeAmt[1].ToString();
                    objinputs.AUSSharingCost = gradeAmt[2].ToString();
                    objinputs.AUSNonSharingCost = gradeAmt[3].ToString();

                    DBHelper.ExecuteNonQuery("Usp_InsertServiceApartmentRecoveryPolicyDetails", objinputs);
                }

                return "Success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

          /// <summary>
        /// 311556: Changes project Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        /// <returns> Project Details </returns>
        public static string UpdateFranceTransportPolicyDetails(PolicyDetails objinputs)
        {
            try
            {
                for (int i = 0; i < objinputs.AmountDetails.Count; i++)
                {
                    string[] gradeAmt = objinputs.AmountDetails[i].Split(',');
                    objinputs.PkeyId = gradeAmt[0].ToString();
                    objinputs.GuestHouse = gradeAmt[1].ToString();
                    objinputs.AUSSharingCost = gradeAmt[2].ToString();
                    objinputs.EligAmt = gradeAmt[3].ToString();

                    DBHelper.ExecuteNonQuery("Usp_InsertTransportAllowancePolicyDetails", objinputs);
                }

                return "Success";
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }
        
        /// <summary>
        /// 260947: Changes User Status.
        /// </summary>
        /// <param name="objinputs">input details.</param>         
        public static void ChangeUserStatus(ChangeUserStatus objinputs)
        {
            try
            {
                DBHelper.ExecuteNonQuery("usp_SGPChangeUserStatus", objinputs);
            }
            catch (SystemException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 547813: Get Freeze grid details -NLD.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGrid(int userID, int roleID, int countryID)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGrid", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">Country Id</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet NLDGetValidData(int componentid, int countryID)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_NLDGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">Country Id</param>
        /// <param name="componentName">Component Name</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet APACGetValidData(int componentid, int countryID, string componentName)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_APACGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    processCmd.Parameters.AddWithValue("@CompName", componentName);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">Country Id</param>
        /// <param name="componentName">Component Name</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet CEGetValidData(int componentid, int countryID, string componentName)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_CEGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    processCmd.Parameters.AddWithValue("@CompName", componentName);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">Country Id</param>
        /// <param name="componentName">Component Name</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet UKIGetValidData(int componentid, int countryID, string componentName)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_UKIGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    processCmd.Parameters.AddWithValue("@CompName", componentName);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 393656: Gets Valid data for component id.
        /// </summary>
        /// <param name="componentid">component id</param> 
        /// <param name="countryID">Country Id</param>
        /// <param name="componentName">Component Name</param> 
        /// <returns>Valid grid details.</returns>
        public static DataSet PHLGetValidData(int componentid, int countryID, string componentName)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_PHLGetValidData", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@ComponentID", componentid);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    processCmd.Parameters.AddWithValue("@CompName", componentName);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Get Freeze grid details -NLD.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGridNLD(int userID, int roleID, int countryID)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGridNLD", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Get Freeze grid details -NLD.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGridAPAC(int userID, int roleID, int countryID)
        {

            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGridAPAC", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Get Freeze grid details -NLD.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGridCE(int userID, int roleID, int countryID)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGridCE", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

        /// <summary>
        /// 547813: Get Freeze grid details -NLD.
        /// </summary>
        /// <param name="userID">User ID.</param> 
        /// <param name="roleID">Role ID.</param> 
        /// <param name="countryID">Country ID.</param> 
        /// <returns>Freeze grid details.</returns>
        public static DataSet FreezePayrollGridUKI(int userID, int roleID, int countryID)
        {
            DataSet resultDS = new DataSet();
            using (SqlConnection con = new SqlConnection(conString))
            {
                try
                {
                    con.OpenWithMSI();
                    SqlCommand processCmd = new SqlCommand("usp_GetFreezePayrollGridUKI", con);
                    processCmd.CommandType = CommandType.StoredProcedure;
                    processCmd.Parameters.AddWithValue("@AssociateID", userID);
                    processCmd.Parameters.AddWithValue("@ROLEID", roleID);
                    processCmd.Parameters.AddWithValue("@CountryID", countryID);
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = processCmd;
                    da.Fill(resultDS);
                    con.Close();
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
                return resultDS;
            }
        }

      

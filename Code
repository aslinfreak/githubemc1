#region FetchEditRenewGridData
  public static List<Dictionary<string, object>> FetchEditRenewGridData()
  {
      List<Dictionary<string, object>> rows = new List<Dictionary<string, object>>();
      try
      {

          ApprovalDetails objData = new ApprovalDetails()
          {
              ASSOCIATEID = Convert.ToInt32(HttpContext.Current.Session["UserId"].ToString()),
              RoleID = HttpContext.Current.Session["RoleId"].ToString()
          };
          DataTable gridUserDetails = UtilityBAL.FetchEditRenewGridData(objData).Tables[0];
          Dictionary<string, object> row = null;
          foreach (DataRow dr in gridUserDetails.Rows)
          {
              row = new Dictionary<string, object>();
              foreach (DataColumn col in gridUserDetails.Columns)
              {
                  row.Add(col.ColumnName, dr[col]);
              }

              rows.Add(row);
          }
      }
      catch (SystemException ex)
      {
          ErrorLogger logger = new ErrorLogger();
          logger.LogError(ex);
      }

      return rows;
  }
  #endregion FetchEditRenewGridData

  #region FilterEditRenewGrid
  public static List<Dictionary<string, object>> FilterEditRenewGrid(string componentId,
      string approvaltype, string projectId)
  {
      List<Dictionary<string, object>> rows = new List<Dictionary<string, object>>();
      try
      {

          ApprovalDetails objapprDetails = new ApprovalDetails()
          {
              ASSOCIATEID = Convert.ToInt32(HttpContext.Current.Session["UserId"].ToString()),
              RoleID = HttpContext.Current.Session["RoleId"].ToString(),
              ComponentId = Convert.ToInt16(componentId),
              ApprovalType = Convert.ToInt16(approvaltype),
              ProjectId = projectId
          };
          DataTable gridUserDetails = UtilityBAL.FilterEditRenewGrid(objapprDetails).Tables[0];
          Dictionary<string, object> row = null;
          foreach (DataRow dr in gridUserDetails.Rows)
          {
              row = new Dictionary<string, object>();
              foreach (DataColumn col in gridUserDetails.Columns)
              {
                  row.Add(col.ColumnName, dr[col]);
              }

              rows.Add(row);
          }
      }
      catch (SystemException ex)
      {
          ErrorLogger logger = new ErrorLogger();
          logger.LogError(ex);
      }

      return rows;
  }
  #endregion FilterEditRenewGrid

#region Page Load
protected void Page_Load(object sender, EventArgs e)
{
    string versionkey = ConfigurationManager.AppSettings["Version"].ToString();
    if (!this.IsPostBack)
    {
        this.hdnPostBackError.Value = "0";
    }

    string errorPopup = ConfigurationManager.AppSettings["ErrorPopUp"].ToString();
    this.hdnSession.Value = errorPopup;

    if (HttpContext.Current.Session["UserId"] != null)
    {
        this.userId = HttpContext.Current.Session["UserId"].ToString();
    }
    else
    {
        Response.Redirect("HTML/SessionTimeOut.htm?vs=" + versionkey);
    }

    string getUri = HttpContext.Current.Request.Url.AbsoluteUri;
    ////Segements
    Uri siteUri = new Uri(getUri);
    string urlStr = string.Join("", siteUri.Segments);
    urlStr = urlStr.Replace(ConfigurationManager.AppSettings["DASTSubstring"].ToString(), "");
    urlStr = urlStr.Substring(1);
    string pageListStr = HttpContext.Current.Session["PageUrlListSegments"].ToString();
    if (!pageListStr.Contains(urlStr))
    {
        Response.Redirect("HTML/AccessDenied.htm?vs=" + versionkey);
    }
    else
    {
        if (HttpContext.Current.Session["UserRoles"] != null)
        {
            if (HttpContext.Current.Session["RoleId"] != null)
            {
                this.RoleID = HttpContext.Current.Session["RoleId"].ToString();
            }
            else
            {
                Response.Redirect("HTML/SessionTimeOut.htm?vs=" + versionkey);
            }

            string[] roles = HttpContext.Current.Session["UserRoles"].ToString().Split(',');
            if (!roles.Contains(this.RoleID))
            {
                Response.Redirect("HTML/AccessDenied.htm?vs=" + versionkey);
            }
        }
        else
        {
            Response.Redirect("HTML/SessionTimeOut.htm?vs=" + versionkey);
        }
    }

    uploaddir = Path.Combine(Request.PhysicalApplicationPath, "ExcelFile");
}

#endregion Page Load

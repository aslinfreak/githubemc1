This is my CommonPages.aspx

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="CommonPages.aspx.cs" 
    Inherits="SPayWebApp.CommonPages" EnableViewStateMAC="true" %>
<%@ Import Namespace="System.Web.Optimization" %>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <meta http-equiv="X-UA-Compatible" content="IE=10" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta http-equiv="PRAGMA" content="No-Cache" />
    <meta http-equiv="Cache-control"
        content="no-cache, no-store, must-revalidate, pre-check=0, post-check=0, max-age=0, s-maxage=0" />
    <title>SpecialPay - One Cognizant </title>

     
     <asp:PlaceHolder runat="server">
      <%: Styles.Render("~/bundles/StyleBundleCommonPages") %>
      <%: Scripts.Render("~/bundles/ScriptBundleCommonPages") %>
     </asp:PlaceHolder>

    <style type="text/css">
        .checkbox, .radio {
            width: 17px;
            height: 43px;
            margin: 0 0 0 5px;
            background: url(Images/SpriteImage6.png) no-repeat -2524px -1178px;
            display: block;
            float: left;
        }

        .radio {
            background: url(Images/SpriteImage6.png) no-repeat -2355px -1301px;
        }

        .select {
            position: absolute;
            height: 6px;
            width: 16px;
            padding: 0 25px 0 6px;
            color: #000;
            font-size: 11px;
            border: 1px solid #929292;
            background: url(Images/SpriteImage6.png) no-repeat -2110px -1338px;
            line-height: 20px;
            text-indent: 3px;
        }

        #ddlRole, #selectroledrop {
        }

        #countryActive, #selectcountrydrop {
        }
        .countrySelect {
            background: url(SGP_Images/country_select_bg.png) no-repeat;
        }

            .countrySelect label {
                margin: 0 0 0 20px;
            }
    </style>

</head>
<body>
    <form id="form1" runat="server" autocomplete="off">

        <input id="hdnRoleId" type="hidden" runat="server" />
        <h1 class='spay'>Special Pay</h1>
        <div class="wrapper">
            <div class="row col-md-12 form-inline text-right py-2">
                <!--  country selct option starts  -->
                <div class="form-group">
                    <b>
                        <label class="px-2">Country</label></b>
                    <select class="form-control" id="countryActive" name="countrydrop">
                        <option value="-1">--Select Country--</option>
                    </select>
                </div>
                <div class="form-group">
                    <b>
                        <label class="px-2">
                            Role</label></b>
                    <select id='ddlRole' class="form-control" name="roledrop">
                        <option value="-1">--Select Role--</option>
                    </select>
                </div>

                <!--  country selct option ends  -->
            </div>
            <%--<div id="slider-code">
            <a class="buttons previous" ></a>
            <div class="viewport">
                <ul class="overview" id="pageMenu">
                 </ul>
            </div>
            <a class="buttons next" ></a>
        </div>--%>
            <div id="slider-code" class="row m-0 col-md-12 p-0">
                <%--<a class="buttons previous" ></a>--%>
                <div class="viewport row m-0" role="tablist">
                    <ul class="overview col-md-12 p-0 pageMenu" id="pageMenu" role="tab">
                    </ul>
                </div>
                <%--<a class="buttons next" ></a>--%>
            </div>
            <%--<div class="clear">
        </div>
        <div class="separator">
        </div>
        <div class="clear">
        </div>--%>

            <iframe width="1200" height="525" name="content" id="content_area" title="Main Content"
                role="presentation" aria-label="Special pay iframe"
                style="border: none; overflow: hidden"></iframe>

        </div>
        <asp:HiddenField ID="hdnSession" Value="" runat="server" />
        <asp:HiddenField ID="isManagedDeviceSession" Value="" runat="server" />
    </form>

 
<asp:PlaceHolder runat="server">
    <%: Scripts.Render("~/bundles/ScriptBundleCommonJSFilesSPS") %>
</asp:PlaceHolder>

</body>
</html>

This is my CommonPages.aspx.cs
[module: System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.NamingRules",
    "SA1305:FieldNamesMustNotUseHungarianNotation", Justification = "Reviewed.")]

namespace SPayWebApp
{
    #region Namespaces

    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Data;
    using System.Net;
    using System.Text.RegularExpressions;
    using System.Web;
    using System.Web.Services;
    using System.Web.UI;
    using CTS.OneCognizant.Platform.CoreServices;
    using OneC.Spay.DC.UtilityDC;
    using SPay.BAL.UtilityBAL;
    using SPay.DC.UtilityDC;
    using System.Net.NetworkInformation;
    using System.Text;


    #endregion Namespaces

    /// <summary>
    /// CommonPages class
    /// </summary>
    public partial class CommonPages : System.Web.UI.Page
    {
        #region Declarations

        ////private int pageId = 1;
        ////private SessionDetails sessionDetail;
        ////private UserInfoDC loggedInUserInfo;

        /// <summary>
        /// Associate ID
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.MaintainabilityRules",
            "SA1401:FieldsMustBePrivate", Justification = "Reviewed.")]
        protected string strAssociateId;
        public System.Web.HttpBrowserCapabilities Browser { get; set; }
        /* Initializing global object for Utility class to access utility methods if required */


        #endregion Declarations      

        #region AssignValueToSession

        /// <summary>
        /// 290050: AssignValueToSession
        /// </summary>
        /// <param name="roleId">Current User's RoleId</param>
        /// <param name="countryId">Current User's countryId</param>
        /// <param name="browserName">browser Name</param>
        /// <returns>Role Id</returns>
        [System.Web.Services.WebMethod]
        public static string AssignValueToSession(string roleId, string countryId)
        {
            if (HttpContext.Current.Session["MakeMeAsHitCheck"].ToString() != "1")
            {

                SpayUsersLog obj = new SpayUsersLog();
                string ipaddress1 = (HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"] ?? HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]).Split(',')[0].Trim();
                obj.StartDateTime = HttpContext.Current.Session["StartTime"].ToString();
                obj.EndDateTime = DateTime.Now.ToString();
                obj.LoginID = HttpContext.Current.Session["UserId"].ToString();
                obj.RoleID = roleId;
                obj.IsCountryCurrency = countryId;
                obj.BrowserName = HttpContext.Current.Session["Browser"].ToString();
                obj.SourceIP = ipaddress1;
                UtilityBAL.LogSpayUsers(obj);
            }
            HttpContext.Current.Session["RoleId"] = HttpUtility.HtmlDecode(HttpUtility.HtmlEncode(roleId));
            HttpContext.Current.Session["CountryID"] = HttpUtility.HtmlDecode(HttpUtility.HtmlEncode(countryId));
            return roleId;
        }
        #endregion AssignValueToSession

        #region FetchCountyandRolesforUser

        /// <summary>
        /// 290050: Get Roles and Pages for current User
        /// </summary>
        /// <returns>Roles and pages for user</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification = "Reviewed"),
        System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed"), WebMethod]
        public static List<List<Dictionary<string, object>>> FetchCountyandRolesforUser()
        {
            List<Dictionary<string, object>> rows = new List<Dictionary<string, object>>();
            List<Dictionary<string, object>> rows1 = new List<Dictionary<string, object>>();
            List<Dictionary<string, object>> rows2 = new List<Dictionary<string, object>>();
            List<List<Dictionary<string, object>>> rowList = new List<List<Dictionary<string, object>>>();
            try
            {
                SessionDetails objSession = new SessionDetails();
                objSession.LoginId = HttpContext.Current.Session["UserId"].ToString();
                objSession.CountryID = HttpContext.Current.Session["CountryID"].ToString();


                DataSet user = new DataSet();
                if (HttpContext.Current.Session["userDS"] == null)
                {
                    user = UtilityBAL.GetUserCountryandRoles(objSession);
                    HttpContext.Current.Session["userDS"] = user;
                }
                else
                {
                    user = (DataSet)HttpContext.Current.Session["userDS"];
                }

                if (user.Tables.Count > 0 && user.Tables[0].Rows.Count > 0)
                {
                    DataTable roles = new DataTable("UserRoles");
                    roles = user.Tables[0];
                   ////HttpContext.Current.Session["RoleId"] = dtRoles.Rows[0]["RoleID"].ToString();
                    Dictionary<string, object> row = null;
                    foreach (DataRow dr in roles.Rows)
                    {
                        row = new Dictionary<string, object>();
                        foreach (DataColumn col in roles.Columns)
                        {
                            row.Add(col.ColumnName, dr[col]);
                        }

                        rows.Add(row);
                    }

                    rowList.Add(rows);
                }

                if (user.Tables.Count > 0 && user.Tables[1].Rows.Count > 0)
                {
                    DataTable pages = new DataTable("UserPages");
                    pages = user.Tables[1];
                    Dictionary<string, object> row = null;
                    foreach (DataRow dr in pages.Rows)
                    {
                        row = new Dictionary<string, object>();
                        foreach (DataColumn col in pages.Columns)
                        {
                            row.Add(col.ColumnName, dr[col]);
                        }

                        rows1.Add(row);
                    }

                    rowList.Add(rows1);
                }

                if (user.Tables.Count > 0 && user.Tables[2].Rows.Count > 0)
                {
                    DataTable countries = new DataTable("UserCountries");
                    countries = user.Tables[2];
                    Dictionary<string, object> row = null;
                    foreach (DataRow dr in countries.Rows)
                    {
                        row = new Dictionary<string, object>();
                        foreach (DataColumn col in countries.Columns)
                        {
                            row.Add(col.ColumnName, dr[col]);
                        }

                        rows2.Add(row);
                    }

                    rowList.Add(rows2);
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }

            return rowList;
        }

        #endregion FetchCountyandRolesforUser

        #region Fetchversionkey
        /// <summary>
        /// To fetch the version key
        /// </summary>
        /// <returns>to return the version number</returns>
        [WebMethod]
        public static object Fetchversionkey()
        {
            List<string> versionkey = new List<string>();
            versionkey.Add(ConfigurationManager.AppSettings["Version"].ToString());
            return versionkey;
        }

        #endregion Fetchversionkey

        #region RolePageBindings

        /// <summary>
        /// 290050: RolePageBindings
        /// </summary>
        /// <param name="roleId">Current User's RoleId</param>
        /// <returns>Role's pages for user</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
                "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification = "Reviewed"), WebMethod]
        public static List<Dictionary<string, object>> RolePageBindings(int roleId)
        {
            List<Dictionary<string, object>> rows = new List<Dictionary<string, object>>();
            try
            {
                HttpContext.Current.Session["RoleId"] = roleId.ToString();
                UserInfoDC currentUser = new UserInfoDC();
                currentUser.RoleId = roleId;
                currentUser.LoginId = HttpContext.Current.Session["UserId"].ToString();
                currentUser.CountryID = Convert.ToInt32(HttpContext.Current.Session["CountryID"]);

                DataSet rolePages = UtilityBAL.GetPagesforCurrentRole(currentUser);
                StringBuilder sb = new StringBuilder();

                if (rolePages.Tables.Count > 0 && rolePages.Tables[0].Rows.Count > 0)
                {
                    DataTable roles = rolePages.Tables[0];
                    Dictionary<string, object> row = null;
                    HttpContext.Current.Session["PageUrlListSegments"] = "";
                    foreach (DataRow dr in roles.Rows)
                    {

                        sb.Append(dr[2].ToString());
                        sb.Append(",");

                        row = new Dictionary<string, object>();
                        foreach (DataColumn col in roles.Columns)
                        {
                            row.Add(col.ColumnName, dr[col]);
                        }

                        rows.Add(row);
                    }
                    sb.Append("FileUpload.aspx,APAC_FileUpload.aspx,Download.aspx,ExcelServices.aspx,APAC_ExcelServices.aspx");
                    HttpContext.Current.Session["PageUrlListSegments"] = sb;
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }

            return rows;
        }

        #endregion RolePageBindings

        #region AbandonSession

        /// <summary>
        /// 290050: AbandonSession
        /// </summary>
        /// <param name="browserName">Browser Data</param>
        [WebMethod]
        public static void AbandonSession(string roleID, string countryID)
        {
            try
            {
                HttpContext.Current.Session["userDS"] = null;
                string browserName = HttpContext.Current.Session["Browser"].ToString();
                if (HttpContext.Current.Session["MakeMeAsHitCheck"].ToString() != "1")
                {
                    UserContext objUser = UserContext.GetUserContext();
                    string loginId = objUser.CurrentUser.UserId;


                    SpayUsersLog obj = new SpayUsersLog();

                    string IPAddressofUser =
                   HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"] ?? HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"].Split(',')[0].Trim();

                    ////SAST Trust boundary violation
                    var regexItem = new Regex(@"^[a-zA-Z0-9_.\s]*$");
                    //if (regexItem.IsMatch(browserName))
                    //{
                    //    HttpContext.Current.Session["Browser"] = browserName;
                    //    HttpContext.Current.Session.Abandon();
                    //}

                    obj.StartDateTime = HttpContext.Current.Session["StartTime"].ToString();
                    obj.EndDateTime = DateTime.Now.ToString();
                    obj.LoginID = loginId;
                    obj.RoleID = roleID;
                    obj.BrowserName = HttpContext.Current.Session["Browser"].ToString();
                    obj.IsCountryCurrency = countryID;
                    obj.SourceIP = IPAddressofUser;
                    UtilityBAL.LogSpayUsers(obj);
                }

                else
                {
                    ////SAST Trust boundary violation
                    var regexItem = new Regex(@"^[a-zA-Z0-9_.\s]*$");

                    if (regexItem.IsMatch(browserName))
                    {
                        HttpContext.Current.Session["Browser"] = browserName;
                        HttpContext.Current.Session.Abandon();
                    }
                    // Do Nothing 

                }

            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }
        }

        #endregion AbandonSession

        #region Page Init

        /// <summary>
        /// 290050: Page Initialization
        /// </summary>
        /// <param name="sender">sender object</param>
        /// <param name="e">EventArgs e</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance",
            "CA1820:TestForEmptyStringsUsingStringLength", Justification = "Reviewed")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.StyleCop.CSharp.NamingRules",
           "SA1305:FieldNamesMustNotUseHungarianNotation", Justification = "Reviewed.")]
        protected void Page_init(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                HttpBrowserCapabilities bc = Request.Browser;
                string browsername = bc.Browser;
                string version = bc.Version;
                string browserversion = browsername + version;
                HttpContext.Current.Session["Browser"] = browserversion;
                this.Session["PageUrlListSegments"] = "";
                bool isManagedDevice = false;
                isManagedDevice = UserContext.CheckIsManagedDevice();

                string msg = String.Empty;

                if (isManagedDevice)
                {
                    this.isManagedDeviceSession.Value = "1";
                }

                else
                {
                    this.isManagedDeviceSession.Value = "0";
                }

                StringBuilder col = new StringBuilder();
                if (ConfigurationManager.AppSettings["Cache"].ToString() == "1")
                {
                    HttpContext.Current.Response.Cache.SetAllowResponseInBrowserHistory(false);
                    Response.Cache.SetCacheability(HttpCacheability.NoCache);
                    Response.Cache.SetNoStore();
                }

                string errorPopup = ConfigurationManager.AppSettings["ErrorPopUp"].ToString();
                this.hdnSession.Value = errorPopup;
                bool isMakeMeAs = false;
                string versionkey = ConfigurationManager.AppSettings["Version"].ToString();
                try
                {
                    this.Session["NoFile"] = "0";
                    if (this.Session["MakeMeAs"] == null)
                    {
                        this.strAssociateId = this.GetCurrentUser();
                    }
                    else
                    {
                        this.strAssociateId = Session["MakeMeAs"].ToString();
                        isMakeMeAs = true;
                    }

                    HttpContext.Current.Session.Add("RoleId", string.Empty);
                    HttpContext.Current.Session.Add("CountryID", string.Empty);
                    HttpContext.Current.Session.Add("Renewal", "1");



                    if (!string.IsNullOrEmpty(this.strAssociateId))
                    {
                        var regexItem = new Regex(@"^[a-zA-Z0-9_.\s]*$");
                        if (regexItem.IsMatch(this.strAssociateId))
                        {
                            HttpContext.Current.Session["UserId"] = this.strAssociateId;
                        }

                        SessionDetails objSession = new SessionDetails();
                        objSession.LoginId = this.strAssociateId;
                        DataSet user = new DataSet();
                        if (HttpContext.Current.Session["userDS"] == null)
                        {
                            user = UtilityBAL.GetUserRolesandPages(objSession);
                            HttpContext.Current.Session["userDS"] = user;
                        }
                        else
                        {
                            user = (DataSet)HttpContext.Current.Session["userDS"];
                        }


                        if (user.Tables.Count > 0 && user.Tables[3].Rows.Count > 0)
                        {
                            if (!isMakeMeAs && user.Tables[3].Rows[0][0].ToString().Contains(this.strAssociateId))
                            {
                                ////this.Session["ProxyAccessCheck"] = "1";
                                Response.Redirect("MakeMeAs.aspx?vs=" + versionkey, false);
                            }
                            else if (user.Tables[0].Rows.Count == 0)
                            {
                                ////this.Session["ProxyAccessCheck"] = "2";
                                this.Session["MakeMeAsHitCheck"] = "1";
                                Response.Redirect("HTML/AccessDenied.htm", false);
                            }
                            else
                            {

                                ////this.Session["ProxyAccessCheck"] = "0";
                                if (HttpContext.Current.Session["MakeMeAsHitCheck"] == null)
                                {
                                    this.Session["MakeMeAsHitCheck"] = "0";

                                }
                                else
                                {
                                    this.Session["MakeMeAsHitCheck"] = "1";
                                }


                                HttpContext.Current.Session["UserRoles"] = string.Empty;
                                for (int i = 0; i < user.Tables[0].Rows.Count; i++)
                                {

                                    col.Append(user.Tables[0].Rows[i]["RoleID"].ToString());
                                    col.Append(",");

                                }
                                HttpContext.Current.Session["UserRoles"] = col;

                                HttpContext.Current.Session["UserRoles"] =
                                   HttpContext.Current.Session["UserRoles"].ToString().TrimEnd(',');

                                ////HttpContext.Current.Session["UserName"] = user.Tables[4].Rows[0]["Name"].ToString();
                                ////HttpContext.Current.Session["UserName"] = user.Tables[4].Rows[0]["Name"].ToString();
                            }
                            col.Clear();
                            if (user.Tables[1].Rows.Count > 0)
                            {
                                List<string> pageUrlList = new List<string>();
                                for (int i = 0; i < user.Tables[1].Rows.Count; i++)
                                {
                                    col.Append(user.Tables[1].Rows[i]["PageUrl"].ToString());
                                    col.Append(",");
                                }

                                col.Append("FileUpload.aspx,APAC_FileUpload.aspx,Download.aspx,ExcelServices.aspx,APAC_ExcelServices.aspx");
                                HttpContext.Current.Session["PageUrlListSegments"] = col;
                            }
                        }
                        else
                        {
                            Response.Redirect("HTML/AccessDenied.htm", false);
                        }
                    }
                }
                catch (SystemException ex)
                {
                    ErrorLogger logger = new ErrorLogger();
                    logger.LogError(ex);
                }
            }
        }

        /// <summary>
        /// Gets Current user
        /// </summary>
        /// <returns>Current user id</returns>
        private string GetCurrentUser()
        {
            string loginId = string.Empty;
            try
            {
                if (ConfigurationManager.AppSettings["env"].ToString() == "1" &&
                    !string.IsNullOrEmpty(Request.QueryString["MakeMeAs"].ToString()))
                {
                    var regexNum = new Regex(@"^[0-9]*$");
                    if (regexNum.IsMatch(Request.QueryString["MakeMeAs"].ToString()))
                    {
                        loginId = HttpUtility.HtmlDecode(HttpUtility.HtmlEncode(Request.QueryString["MakeMeAs"].ToString()));
                        this.Session["MakeMeAs"] = loginId;
                    }
                }
                else
                {
                    ////UserContext objUser = UserContext.GetUserContext();
                    ////loginId = objUser.CurrentUser.UserId;
                    loginId = UserContext.GetLoggedInUserID();
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
            }

            return loginId;
        }

        #endregion Page Init
    }

}


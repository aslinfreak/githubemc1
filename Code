This is my BAL

//-----------------------------------------------------------------------
// <copyright file="APACUtilityBAL.cs" company="Special pay">
//     Copyright (c) Special pay Enterprises. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace SPay.BAL.APAC_UtilityBAL
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using System.Text;
    using OneC.Spay.DC.UtilityDC;
    using SPay.DAL.APAC_UtilityDAL;
    using SPay.DC.UtilityDC;

    /// <summary>
    /// Utility Business Layer for APAC region
    /// </summary>
    public sealed class APACUtilityBAL : IDisposable
    {
        /// <summary>
        /// Method to get the Policy Page details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>status on getting the Policy Page details</returns>
        public static DataSet GetPolicyPageDetails(ComponentDetails objcompDet)
        {
            return APACUtilityDAL.GetPolicyPageDetails(objcompDet);
        }

        /// <summary>
        /// Method to get the SetID details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>SetID details</returns>
        public static DataSet GetSetIdDetails(ComponentDetails objCompDet)
        {
            return APACUtilityDAL.GetSetIdDetails(objCompDet);
        }
        /// <summary>
        /// Method to get the RTT details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>RTT details</returns>
        public static DataSet GetRTTDetails(ComponentDetails objCompDet)
        {
            return APACUtilityDAL.GetRTTDetails(objCompDet);
        }

        /// <summary>
        /// The Get Shift Details
        /// </summary>
        /// <param name="objCompDet">The obj CompDet</param>
        /// <returns>Return the value</returns>
        public static DataSet GetShiftDetails(ComponentDetails objCompDet)
        {
            return APACUtilityDAL.GetShiftDetails(objCompDet);
        }

        /// <summary>
        /// Method to get the Grade details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>Grade Details</returns>
        public static DataSet GetGradeDetails(ComponentDetails objcompDet)
        {
            return APACUtilityDAL.GetGradeDetails(objcompDet);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetUploaderValidDataSGP(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidDataSGP(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetUploaderValidDataAPAC(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidDataAPAC(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetUploaderValidDataCE(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidDataCE(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetUploaderValidDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidDataNLD(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetOCAPolicyData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetOCAPolicyData(objCompDetails);
        }

        /// <summary>Method to get the empty template url</summary>
        /// <param name="objdetails"> passing object </param> 
        /// <returns>empty template url</returns>
        public static DataSet GetEmptyTemplateURL(FileUploadDetails objdetails)
        {
            return APACUtilityDAL.GetEmptyTemplateURL(objdetails);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveUploaderNewData(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.SaveUploaderNewData(objUploadData);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveUploaderNewDataNLD(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.SaveUploaderNewDataNLD(objUploadData);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveUploaderDataCE(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.SaveUploaderDataCE(objUploadData);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveUploaderNewDataCE(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.SaveUploaderNewDataCE(objUploadData);
        }


        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="franceSFUpdate"> List of Shift Data </param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> StopPaymentUploaderValidData(UploaderData objShiftDetails, List<string> franceSFUpdate)
        {
            return APACUtilityDAL.StopPaymentUploaderValidData(objShiftDetails, franceSFUpdate);
        }


        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateValidDataNLD(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateValidDataNLD(objUploadData);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateValidDataCE(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateValidDataCE(objUploadData);
        }

       
        /// <summary>Method to update the joining bonus exception data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the joining bonus exception data </returns>
        public static DataSet UpdateExceptionDataNLD(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateExceptionDataNLD(objUploadData);
        }

        /// <summary>Method to update the joining bonus exception data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the joining bonus exception data </returns>
        public static DataSet UpdateExceptionDataCE(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateExceptionDataCE(objUploadData);
        }

        /// <summary>
        /// 298312: Method to get My pay TRT Payment Mailer Details
        /// </summary>
        /// <param name="flag">Flag number</param>
        /// <param name="componentId">component Id</param>
        /// <param name="compName">component Name</param>
        /// <param name="countryID">country ID</param>
        /// <returns>My pay status Mailer</returns>
        public static DataSet GetFreezePayrollMailerDetails(int flag, string componentId, string compName, int countryID)
        {
            return APACUtilityDAL.GetFreezePayrollMailerDetails(flag, componentId, compName, countryID);
        }

        /// <summary>Method to get the report with valid data in push to my pay page</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>Valid data report</returns>
        public static DataSet GenerateReportDataAPAC(ReportDetails objreport)
        {
            return APACUtilityDAL.GenerateReportDataAPAC(objreport);
        }

        /// <summary>Method to get the report with valid data in push to my pay page</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>Valid data report</returns>
        public static DataSet GenerateReportDataNLD(ReportDetails objreport)
        {
            return APACUtilityDAL.GenerateReportDataNLD(objreport);
        }

        /// <summary>Method to get the report with valid data in push to my pay page</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>Valid data report</returns>
        public static DataSet GenerateReportData(ReportDetails objreport)
        {
            return APACUtilityDAL.GenerateReportData(objreport);
        }

        /// <summary>Method to get the report with valid data in push to my pay page</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>Valid data report</returns>
        public static DataSet GenerateReportDataCE(ReportDetails objreport)
        {
            return APACUtilityDAL.GenerateReportDataCE(objreport);
        }

        /// <summary>
        /// to Get consolidated Approved Data Report for country wise
        /// </summary>
        /// <param name="objreport"></param>
        /// <returns></returns>
        public static DataSet GenerateConsolidatedApprovedDataReportDataCE(ReportDetails objreport)
        {
            return APACUtilityDAL.GenerateConsolidatedApprovedDataReportDataCE(objreport);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateValidData(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateValidData(objUploadData);
        }

        /// <summary>Method to get the Tech team recipients</summary>
        /// <param name="objContAccess">passing object </param>
        /// <returns>Tech team recipients</returns>
        public static DataSet GetTechTeamRecipients(ControlAccess objContAccess)
        {
            return APACUtilityDAL.GetTechTeamRecipients(objContAccess);
        }

        /// <summary>Method to get the rejected data in valid tab for the uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Rejected data</returns>
        public static string RejectUploaderValidData(UploaderData objUploadData)
        {
            return APACUtilityDAL.RejectUploaderValidData(objUploadData);
        }

        /// <summary>Method to get the rejected data in valid tab for the uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Rejected data</returns>
        public static string RejectUploaderValidDataNLD(UploaderData objUploadData)
        {
            return APACUtilityDAL.RejectUploaderValidDataNLD(objUploadData);
        }

        /// <summary>Method to get the reject mailer recipients</summary>
        /// <param name="objContAccess">passing object </param>
        /// <returns>Tech team recipients</returns>
        public static DataSet GetRejectMailerDetails(ControlAccess objContAccess)
        {
            return APACUtilityDAL.GetRejectMailerDetails(objContAccess);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet ApproveUploaderValidData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.ApproveUploaderValidData(objCompDetails);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet ApproveUploaderValidDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.ApproveUploaderValidDataNLD(objCompDetails);
        }

        /// <summary>Method to get the Approve mailer recipients</summary>
        /// <param name="objContAccess">passing object </param>
        /// <returns>Tech team recipients</returns>
        public static DataSet GetApproveMailerDetails(ControlAccess objContAccess)
        {
            return APACUtilityDAL.GetApproveMailerDetails(objContAccess);
        }

        /// <summary>
        /// Method to get mailers that is active
        /// </summary>
        /// <param name="objMail">passing object</param>
        /// <returns>active mailer status</returns>
        public static int GetMailerActiveDetails(MailerLog objMail)
        {
            return APACUtilityDAL.GetMailerActiveDetails(objMail);
        }

        /// <summary>
        /// Method to log mailer details
        /// </summary>
        /// <param name="objMailerLog"> passing object</param>
        public static void LogMailerDetails(MailerLog objMailerLog)
        {
            APACUtilityDAL.LogMailerDetails(objMailerLog);
        }

        /// <summary>Method to update the joining bonus exception data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the joining bonus exception data </returns>
        public static DataSet UpdateExceptionData(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateExceptionData(objUploadData);
        }

        /// <summary>Method to get the recruitment type for referral bonus</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Recruitment type for referral bonus</returns>
        public static DataSet GetRecruitmentType(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetRecruitmentType(objCompDetails);
        }

        /// <summary>Method to get the recruitment type for referral bonus</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Recruitment type for referral bonus</returns>
        public static DataSet GetDeductionType(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetDeductionType(objCompDetails);
        }

        /// <summary>Method to get the recruitment type for referral bonus</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Recruitment type for referral bonus</returns>
        public static DataSet GetInstallmentType(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetInstallmentType(objCompDetails);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param>
        /// <param name="countryID">country ID </param>
        /// <returns>valid data pushed</returns>
        public static DataSet SGPGetValidData(int componentid, int countryID)
        {
            return APACUtilityDAL.SGPGetValidData(componentid, countryID);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param> 
        /// <param name="countryID">CountryID ID </param> 
        /// <returns>valid data pushed</returns>
        public static DataSet NLDGetValidData(int componentid, int countryID)
        {
            return APACUtilityDAL.NLDGetValidData(componentid, countryID);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param> 
        /// <param name="countryID">Country Id </param> 
        /// <param name="componentName">Component Name</param> 
        /// <returns>valid data pushed</returns>
        public static DataSet APACGetValidData(int componentid, int countryID, string componentName)
        {
            return APACUtilityDAL.APACGetValidData(componentid, countryID, componentName);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param> 
        /// <param name="countryID">Country Id </param> 
        /// <param name="componentName">Component Name</param> 
        /// <returns>valid data pushed</returns>
        public static DataSet CEGetValidData(int componentid, int countryID, string componentName)
        {
            return APACUtilityDAL.CEGetValidData(componentid, countryID, componentName);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param> 
        /// <param name="countryID">Country Id </param> 
        /// <param name="componentName">Component Name</param> 
        /// <returns>valid data pushed</returns>
        public static DataSet UKIGetValidData(int componentid, int countryID, string componentName)
        {
            return APACUtilityDAL.UKIGetValidData(componentid, countryID, componentName);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="componentid">component id </param> 
        /// <param name="countryID">Country Id </param> 
        /// <param name="componentName">Component Name</param> 
        /// <returns>valid data pushed</returns>
        public static DataSet PHLGetValidData(int componentid, int countryID, string componentName)
        {
            return APACUtilityDAL.PHLGetValidData(componentid, countryID, componentName);
        }

        /// <summary>Method to get the recruitment type for referral bonus</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Recruitment type for referral bonus</returns>
        public static DataSet GetCurrencyCode(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetCurrencyCode(objCompDetails);
        }

        /// <summary>Method to view the exception data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the exception data for uploader</returns>
        public static DataSet GetUploaderExceptionViewData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionViewData(objCompDetails);
        }

        /// <summary>Method to view the exception data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the exception data for uploader</returns>
        public static DataSet GetUploaderExceptionViewDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionViewDataNLD(objCompDetails);
        }

        /// <summary>Method to view the exception data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the exception data for uploader</returns>
        public static DataSet GetAPACUploaderExceptionViewData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACUploaderExceptionViewData(objCompDetails);
        }

        /// <summary>
        /// Method to get the Special case reason
        /// </summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Special Case Reason</returns>
        public static DataSet GetSpecialCaseReasons(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetSpecialCaseReasons(objCompDetails);
        }

        /// <summary>
        /// Method to get the Special case reason
        /// </summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Special Case Reason</returns>
        public static DataSet GetNLDSSpecialCaseReason(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetNLDSSpecialCaseReason(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetBGstatus(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetBGstatus(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetSignonBonusDropdownDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetSignonBonusDropdownDetails(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetPayoutTypeonchangeofsubcomponent(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetPayoutTypeonchangeofsubcomponent(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetDropdownDetailsAPAC(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetDropdownDetailsAPAC(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetDropdownDetailsCE(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetDropdownDetailsCE(objCompDetails);
        }

        /// <summary>Method to call popup details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Returns Reversal POPUP details</returns>
        public static DataSet GetReversalDropdownDetailsNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetReversalDropdownDetailsNLD(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetRelocationDropdownDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetRelocationDropdownDetails(objCompDetails);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet GetUploaderValidViewData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidViewData(objCompDetails);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet GetAPACUploaderValidViewData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACUploaderValidViewData(objCompDetails);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet GetUploaderValidViewDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderValidViewDataNLD(objCompDetails);
        }

        /// <summary>
        /// Method to get data for other geography tab
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>data in other geography</returns>
        public static DataSet GetOtherGeographyUploaderData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetOtherGeographyUploaderData(objCompDetails);
        }

        /// <summary>Method to get the template for  currency template</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetCurrencyDataTemplateSGP(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetCurrencyDataTemplateSGP(objuploaderData);
        }

        /// <summary>
        /// Method to Cut off date details
        /// </summary>
        /// <param name="objinputs"> passing object</param>
        public static void SaveCuttOffDateDetails(SaveCuttOffDateDetails objinputs)
        {
            APACUtilityDAL.SaveCuttOffDateDetails(objinputs);
        }

        /// <summary>
        /// Method to get the other details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>status on getting the other details</returns>
        public static DataSet GetOtherDetails(ComponentDetails objcompDet)
        {
            return APACUtilityDAL.GetOtherDetails(objcompDet);
        }

        /// <summary>
        /// Method to get the other details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>status on getting the other details</returns>
        public static DataSet GetNLDPolicyDetails(ComponentDetails objcompDet)
        {
            return APACUtilityDAL.GetNLDPolicyDetails(objcompDet);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetDataTemplateSGP(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetDataTemplateSGP(objuploaderData);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetDataTemplateGradeAmount(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetDataTemplateGradeAmount(objuploaderData);
        }

        /// <summary>
        /// Method to get the grade amount details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>grade amount details</returns>
        public static DataSet GetGradeAmountDetails(ComponentDetails objcompDet)
        {
            return APACUtilityDAL.GetGradeAmountDetails(objcompDet);
        }

        /// <summary>
        /// 311556: Method to move Singapore special pay out
        /// </summary>
        /// <param name="objpolicyDetails">policy object</param>
        /// <returns>string status</returns>
        public static string UpdateSGPPolicyDetails(SPay.DC.UtilityDC.PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdateSGPPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to get the SetID details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>SetID details</returns>
        public static DataSet GetSDADetails(ComponentDetails objCompDet)
        {
            using (APACUtilityDAL objDAL = new APACUtilityDAL())
            {
                return APACUtilityDAL.GetSDADetails(objCompDet);
            }
        }

        /// <summary>
        /// Method to get the Statutory holiday details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>Statutory holiday details</returns>
        public static DataSet GetStatutoryhoildayDetails(ComponentDetails objCompDet)
        {
            return APACUtilityDAL.GetStatutoryhoildayDetails(objCompDet);
        }

        /// <summary>
        /// Method to get the Statutory holiday details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>Statutory holiday details</returns>
        public static DataSet GetStatutoryAmountDetails(ComponentDetails objCompDet)
        {
            return APACUtilityDAL.GetStatutoryAmountDetails(objCompDet);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetAPACProjectDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACProjectDetails(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetServiceApartmentRecoveryPolicyDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetServiceApartmentRecoveryPolicyDetails(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetSchoolFeesPolicyDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetSchoolFeesPolicyDetails(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetPolicyComponentDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetPolicyComponentDetails(objCompDetails);
        }

        /// <summary>Method to get the valid data for Exception Associates</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetExceptionAssociateDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetExceptionAssociateDetails(objCompDetails);
        }



        /// <summary>Method to update the policy details for referral bonus</summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the referral bonus policy details </returns>
        public static string UpdateRBPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdateRBPolicyDetails(objpolicyDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetAPACProjectDetailssearch(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACProjectDetailssearch(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetAPACSchoolFeeAssociateSearch(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACSchoolFeeAssociateSearch(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetSARGuestHouseSearch(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetSARGuestHouseSearch(objCompDetails);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet ActivateProjectDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.ActivateProjectDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet InsertSchoolFeesPolicyDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertSchoolFeesPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet InsertAPACSchoolFeesPolicyDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertAPACSchoolFeesPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet InsertServiceApartmentRecoveryPolicyDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertServiceApartmentRecoveryPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet InsertTransportAllowancePolicyDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertTransportAllowancePolicyDetails(objinputs);
        }
        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static DataSet InsertLunchVoucherAllownceDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertLunchVoucherAllownceDetails(objinputs);
        }
        /// <summary>
        /// Component Details
        /// </summary>
        /// <param name="objinputs">object details</param>
        /// <returns>component name details</returns>
        public static DataSet InsertComponentDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertComponentDetails(objinputs);
        }


        /// <summary>
        /// Exception Associate Details
        /// </summary>
        /// <param name="objinputs">object details</param>
        /// <returns>Exception Associate ID details</returns>
        public static DataSet InsertExpAssociateDetails(ChangeUserStatus objinputs)
        {
            return APACUtilityDAL.InsertExpAssociateDetails(objinputs);
        }


        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static string UpdateAPACSchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            return APACUtilityDAL.UpdateAPACSchoolFeesPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="franceSFUpdate"> List of Shift Data </param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateFranceSchoolFeesPolicyDetails
        (PolicyDetails objShiftDetails, List<string> franceSFUpdate)
        {
            return APACUtilityDAL.UpdateFranceSchoolFeesPolicyDetails(objShiftDetails, franceSFUpdate);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static string UpdateCESchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            return APACUtilityDAL.UpdateCESchoolFeesPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static string UpdateSchoolFeesPolicyDetails(PolicyDetails objinputs)
        {
            return APACUtilityDAL.UpdateSchoolFeesPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static string UpdateServiceApartmentRecoveryPolicyDetails(PolicyDetails objinputs)
        {
            return APACUtilityDAL.UpdateServiceApartmentRecoveryPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Project Details</returns>
        public static string UpdateFranceTransportPolicyDetails(PolicyDetails objinputs)
        {
            return APACUtilityDAL.UpdateFranceTransportPolicyDetails(objinputs);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        public static void ChangeUserStatus(ChangeUserStatus objinputs)
        {
            APACUtilityDAL.ChangeUserStatus(objinputs);
        }

        /// <summary>
        /// Method to update the policy details for Joining Bonus
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Joining Bonus Policy details  </returns>
        public static string UpdatePolicyDetails(PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdatePolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to update the Statutory Holiday for policy details 
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Statutory Holiday Policy details  </returns>
        public static string UpdateStatutoryHolidayPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdateStatutoryHolidayPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to update the policy details for Joining Bonus
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Joining Bonus Policy details  </returns>
        public static string UpdateJBPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdateJBPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to update the policy details for Joining Bonus
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Joining Bonus Policy details  </returns>
        public static string UpdatePolicyGridDetails(SGPUploadData objpolicyDetails)
        {
            return APACUtilityDAL.UpdatePolicyGridDetails(objpolicyDetails);
        }

        /// <summary>
        /// 311556: Method to move Singapore special pay out
        /// </summary>
        /// <param name="dtexcel">Excel records to be processed</param>
        /// <param name="componentID">Component Group details</param>
        /// <param name="loginId">User details</param>
        /// <param name="criteriaType">Criteria Type</param>
        /// <param name="countryID">country ID </param>
        public static void MoveAPACDatatabletoDB(
            DataTable dtexcel,
            string componentID,
            string loginId,
            string criteriaType,
            int countryID,
            int GradeAmount)
        {
            APACUtilityDAL.MoveAPACDatatabletoDB(dtexcel, componentID, loginId, criteriaType, countryID, GradeAmount);
        }

        /// <summary>
        /// 311556: Method to move Singapore special pay out
        /// </summary>
        /// <param name="dtexcel">Excel records to be processed</param>
        /// <param name="componentID">Component Group details</param>
        /// <param name="loginId">User details</param>
        /// <param name="criteriaType">Criteria Type</param>
        /// <param name="countryID">country ID </param>
        public static void MoveAPACSFDatatabletoDB(
            DataTable dtexcel,
            string componentID,
            string loginId,
            string criteriaType,
            int countryID)
        {
            APACUtilityDAL.MoveAPACSFDatatabletoDB(dtexcel, componentID, loginId, criteriaType, countryID);
        }

        /// <summary>
        /// Method to update the policy details for Sixth day allowance
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the policy details on Sixth Day Allowance</returns>
        public static string UpdateSixthDayPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return APACUtilityDAL.UpdateSixthDayPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to Create the User Role
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        public static void CreateUserRole(CreateUserRole objinputs)
        {
            APACUtilityDAL.CreateUserRole(objinputs);
        }

        /// <summary>
        /// Method to get the mailer details
        /// </summary>
        /// <param name="objinputs">passing object </param>
        /// <returns>valid data for Total rewards team</returns>
        public static DataSet FetchRoleGridDetails(CreateUserRole objinputs)
        {
            return APACUtilityDAL.FetchRoleGridDetails(objinputs);
        }


        /// <summary>
        /// Method to get the valid data for Total rewards team
        /// </summary>
        /// <param name="objCompDetails">passing object </param>
        /// <returns>valid data for Total rewards team</returns>
        public static DataSet GetTotalRewardsTeamValidData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetTotalRewardsTeamValidData(objCompDetails);
        }

        /// <summary>
        /// Method to get the HCM cut off end date
        /// </summary>
        /// <param name="objRoles"> passing object</param>
        /// <returns>HCM cut off end date</returns>
        public static DataSet GetComponentGroupNames(CreateUserRole objRoles)
        {
            return APACUtilityDAL.GetComponentGroupNames(objRoles);
        }

        /// <summary>Method to get dynamic data</summary>
        /// <param name="objUser">passing object </param>
        /// <returns>Dynamic data</returns>
        public static DataSet Getdatadynamic(CreateUserRole objUser)
        {
            return APACUtilityDAL.Getdatadynamic(objUser);
        }

        /// <summary>
        /// Method to get the duplicate data for Total rewards team
        /// </summary>
        /// <param name="objCompDetails">passing object </param>
        /// <returns>duplicate data for Total rewards team</returns>
        public static DataSet GetTotalRewardsTeamDuplicatesData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetTotalRewardsTeamDuplicatesData(objCompDetails);
        }

        /// <summary>Method to Get Currency Drop Down Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Currency details</returns>
        public static DataSet GetCurrencyDropDownDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetCurrencyDropDownDetails(objCompDetails);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objCurrencyData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveCurrencyNewData(CurrencyData objCurrencyData)
        {
            return APACUtilityDAL.SaveCurrencyNewData(objCurrencyData);
        }

        /// <summary>Method to update the currency new data into the table </summary>
        /// <param name="objCurrencyData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet ValidateExceptionCurrencyUpdateData(CurrencyData objCurrencyData)
        {
            return APACUtilityDAL.ValidateExceptionCurrencyUpdateData(objCurrencyData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeleteUploaderValidData(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderValidData(objUploadData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeleteUploaderValidDataNLD(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderValidDataNLD(objUploadData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeleteUploaderValidDataAPAC(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderValidDataAPAC(objUploadData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeletePolicyData(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeletePolicyData(objUploadData);
        }

        /// <summary>Method to Delete the exception data by Uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>data that is present in exception for uploader</returns>
        public static DataSet DeleteUploaderExceptionData(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderExceptionData(objUploadData);
        }

        /// <summary>Method to Delete the exception data by Uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>data that is present in exception for uploader</returns>
        public static DataSet DeleteUploaderExceptionDataNLD(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderExceptionDataNLD(objUploadData);
        }

        /// <summary>Method to Delete the exception data by Uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>data that is present in exception for uploader</returns>
        public static DataSet DeleteUploaderExceptionDataAPAC(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteUploaderExceptionDataAPAC(objUploadData);
        }

        /// <summary>Method to Get customize grid Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Customize grid details</returns>
        public static DataSet GetComponentTypeandName(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetComponentTypeandName(objCompDetails);
        }

        /// <summary>Method to Get customize grid Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Customize grid details</returns>
        public static DataSet GetAPACComponentTypeandName(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetAPACComponentTypeandName(objCompDetails);
        }

        /// <summary>Method to view the valid data for an currency</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data</returns>
        public static DataSet GetValidViewDataCurrency(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetValidViewDataCurrency(objCompDetails);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGrid(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGrid(userID, roleID, countryID);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGridNLD(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGridNLD(userID, roleID, countryID);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGridAPAC(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGridAPAC(userID, roleID, countryID);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGridCE(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGridCE(userID, roleID, countryID);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGridUKI(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGridUKI(userID, roleID, countryID);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <param name="countryID"> countryID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet FreezePayrollGridPHL(int userID, int roleID, int countryID)
        {
            return APACUtilityDAL.FreezePayrollGridPHL(userID, roleID, countryID);
        }

        /// <summary>Method to push data to my pay</summary>
        /// <param name="compId"> string data type </param>
        /// <param name="userid"> integer data type </param> 
        /// <param name="countryID"> Country ID </param> 
        public static void FreezePayrollData(string compId, int userid, int countryID)
        {
            APACUtilityDAL.FreezePayrollData(compId, userid, countryID);
        }

        /// <summary>Method to push data to my pay</summary>
        /// <param name="compId"> string data type </param>
        /// <param name="userid"> integer data type </param> 
        /// <param name="countryID"> Country ID </param> 
        /// <param name="compName"> Component Name </param> 
        public static void FreezePayrollDataAPAC(string compId, int userid, int countryID, string compName)
        {
            APACUtilityDAL.FreezePayrollDataAPAC(compId, userid, countryID, compName);
        }

        /// <summary>Method to push data to my pay</summary>
        /// <param name="compId"> string data type </param>
        /// <param name="userid"> integer data type </param> 
        /// <param name="countryID"> Country ID </param> 
        /// <param name="compName"> Component Name </param> 
        public static void FreezePayrollDataCE(string compId, int userid, int countryID, string compName)
        {
            APACUtilityDAL.FreezePayrollDataCE(compId, userid, countryID, compName);
        }

        /// <summary>
        /// Freeze data for UK & I
        /// </summary>
        /// <param name="userid">User ID.</param>
        /// <param name="countryID">Country ID</param>
        /// <returns>Freeze Data</returns>
        public static DataSet FreezePayrollDataUKI(int userid, int countryID)
        {
            return APACUtilityDAL.FreezePayrollDataUKI(userid, countryID);
        }

        /// <summary>
        /// Freeze data for PHL
        /// </summary>
        /// <param name="userid">User ID.</param>
        /// <param name="countryID">Country ID</param>
        /// <returns>Freeze Data</returns>
        public static DataSet FreezePayrollDataPHL(int userid, int countryID)
        {
            return APACUtilityDAL.FreezePayrollDataPHL(userid, countryID);
        }

        /// <summary>
        /// Freeze data pushed update
        /// </summary>
        /// <param name="userid">User ID.</param>
        /// <param name="countryID">Country ID</param>
        /// <param name="status">push status</param>
        public static void FreezePayrollDataPushUpdate(int userid, int countryID, int status)
        {
            APACUtilityDAL.FreezePayrollDataPushUpdate(userid, countryID, status);
        }

        /// <summary>Method to push data to my pay</summary>
        /// <param name="compId"> string data type </param>
        /// <param name="userid"> integer data type </param> 
        /// <param name="countryID"> Country ID </param> 
        public static void FreezePayrollDataNLD(string compId, int userid, int countryID)
        {
            APACUtilityDAL.FreezePayrollDataNLD(compId, userid, countryID);
        }

        /// <summary>
        /// Method to get allowance and the corresponding shift type
        /// </summary> 
        /// <param name="objUploadData">passing object</param> 
        /// <returns>allowance and the corresponding shift type</returns>
        public static DataSet GetAllowanceandShiftType(UploaderData objUploadData)
        {
            return APACUtilityDAL.GetAllowanceandShiftType(objUploadData);
        }

        /// <summary>
        /// Method to get days type
        /// </summary> 
        /// <param name="objUploadData">passing object</param> 
        /// <returns>allowance and the corresponding shift type</returns>
        public static DataSet GetDaysType(UploaderData objUploadData)
        {
            return APACUtilityDAL.GetDaysType(objUploadData);
        }

        /// <summary>Method to update the currency new data into the table </summary>
        /// <param name="objCurrencyData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateCurrencyData(CurrencyData objCurrencyData)
        {
            return APACUtilityDAL.UpdateCurrencyData(objCurrencyData);
        }

        /// <summary>
        /// Method to valid data for shift allowance to Uploader
        /// </summary>
        /// <param name="objCompDetails"> passing object</param>
        /// <returns>Shift allowance valid data</returns>
        public static DataSet GetUploaderShiftAllowanceValidData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderShiftAllowanceValidData(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionData(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionDataSGP(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionDataSGP(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionDataAPAC(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionDataAPAC(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionDataCE(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionDataCE(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetUploaderExceptionDataNLD(objCompDetails);
        }

        /// <summary>
        /// Method to get the cut off date details
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>cut off date details</returns>
        public static DataSet GetCuttOffDateDetails(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetCuttOffDateDetails(objCompDetails);
        }

        /// <summary>
        /// Method to Check Project Mapping
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>project details</returns>
        public static DataSet CheckProjectMapping(PolicyDetails objCompDetails)
        {
            return APACUtilityDAL.CheckProjectMapping(objCompDetails);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetDataTemplate(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetDataTemplate(objuploaderData);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetNLDDataTemplate(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetNLDDataTemplate(objuploaderData);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetAPACDataTemplate(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetAPACDataTemplate(objuploaderData);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetCEDataTemplate(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetCEDataTemplate(objuploaderData);
        }

        /// <summary>Method to get the Processed Report</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Processed Report</returns>
        public static DataSet GetProcessedReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetProcessedReport(objuploaderData);
        }

        /// <summary>Method to get the Processed Report</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Processed Report</returns>
        public static DataSet GetNLDProcessedReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetNLDProcessedReport(objuploaderData);
        }

        /// <summary>Method to get the Processed Report</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Processed Report</returns>
        public static DataSet GetAPACProcessedReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetAPACProcessedReport(objuploaderData);
        }

        /// <summary>Method to get the Processed Report</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Processed Report</returns>
        public static DataSet GetCEProcessedReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetCEProcessedReport(objuploaderData);
        }

        /// <summary>
        /// Method to get allowance type and approval type with expiry date
        /// </summary>
        /// <param name="objUploadData"> passing object</param>
        /// <returns>gets approval expiry date with approval type</returns>
        public static DataSet GetEditData(UploaderData objUploadData)
        {
            return APACUtilityDAL.GetEditData(objUploadData);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetAssociateProjectIdAndNameForUploader(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetAssociateProjectIdAndNameForUploader(objcompDetails);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetCustomerName(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetCustomerName(objcompDetails);
        }

        /// <summary>Method to get the associate details for joining bonus</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>associate details for joining bonus</returns>
        public static DataSet GetAssociateDetailsforJB(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetAssociateDetailsforJB(objcompDetails);
        }

        /// <summary>Method to get the associate details for joining bonus</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>associate details for joining bonus</returns>
        public static DataSet GetAPACSchoolFeesAssociateDetails(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetAPACSchoolFeesAssociateDetails(objcompDetails);
        }

        /// <summary>Method to get the associate details for joining bonus</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>associate details for joining bonus</returns>
        public static DataSet GetCELunchVoucherLeaveDetails(SGPUploadData objcompDetails)
        {
            return APACUtilityDAL.GetCELunchVoucherLeaveDetails(objcompDetails);
        }
        /// <summary>
        /// Method to get the reversal valid data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>reversal valid data</returns>
        public static DataSet GetReversalValidData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetReversalValidData(objCompDetails);
        }

        /// <summary>
        /// Method to get the reversal valid data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>reversal valid data</returns>
        public static DataSet GetReversalValidDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetReversalValidDataNLD(objCompDetails);
        }

        /// <summary>
        /// Method to get the reversal exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>reversal exception data</returns>
        public static DataSet GetReversalExceptionData(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetReversalExceptionData(objCompDetails);
        }

        /// <summary>
        /// Method to get the reversal exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>reversal exception data</returns>
        public static DataSet GetReversalExceptionDataNLD(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetReversalExceptionDataNLD(objCompDetails);
        }

        /// <summary>
        /// Method to delete the reversal data
        /// </summary>
        /// <param name="objUploadData"> passing object</param>
        /// <returns>status of the delete reversal data </returns>
        public static DataSet DeleteReversalData(UploaderData objUploadData)
        {
            return APACUtilityDAL.DeleteReversalData(objUploadData);
        }

        /// <summary>
        /// Method to get the processed reversal report
        /// </summary>
        /// <param name="objuploaderData">passing object</param>
        /// <returns>processed reversal report</returns>
        public static DataSet GetReversalProcessedReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetReversalProcessedReport(objuploaderData);
        }
        /// <summary>
        /// Method to get the Lunch Voucher year report
        /// </summary>
        /// <param name="objuploaderData">passing object</param>
        /// <returns>Lunch Voucher Year Report</returns>
        public static DataSet GetLunchVoucherYearReport(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetLunchVoucherYearReport(objuploaderData);
        }
        /// <summary>
        /// Method to get the reversal data template
        /// </summary>
        /// <param name="objuploaderData">passing object</param>
        /// <returns>reversal data template</returns>
        public static DataSet GetReversalDataTemplate(UploaderData objuploaderData)
        {
            return APACUtilityDAL.GetReversalDataTemplate(objuploaderData);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetAssociateProjectIdAndName(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetAssociateProjectIdAndName(objcompDetails);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveNLDReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveNLDReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveAPACReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveAPACReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveJBReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveJBReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveShiftPayoutReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveShiftPayoutReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveSARReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveSARReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveAPReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.SaveAPReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateNLDReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateNLDReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateShiftTimepayoutReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateShiftTimepayoutReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateSARReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateSARReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateAPReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateAPReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateAPACReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateAPACReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateNLDExceptionReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateNLDExceptionReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateExceptionReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionShiftTimepayoutReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateExceptionShiftTimepayoutReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionSARReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateExceptionSARReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionAPReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateExceptionAPReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionAPACReversalData(TrtReversal objReversalData)
        {
            return APACUtilityDAL.UpdateExceptionAPACReversalData(objReversalData);
        }

        /// <summary>Method to view the valid data for an currency</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data</returns>
        public static DataSet GetSGPReversalViewData(TrtReversal objCompDetails)
        {
            return APACUtilityDAL.GetSGPReversalViewData(objCompDetails);
        }

        /// <summary>Method to view the valid data for an currency</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data</returns>
        public static DataSet GetNLDReversalViewData(TrtReversal objCompDetails)
        {
            return APACUtilityDAL.GetNLDReversalViewData(objCompDetails);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetAssociateProjectIdAndNameForReversal(ComponentDetails objcompDetails)
        {
            return APACUtilityDAL.GetAssociateProjectIdAndNameForReversal(objcompDetails);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateUploaderValidData(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateUploaderValidData(objUploadData);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateUploaderExceptionData(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.UpdateUploaderExceptionData(objUploadData);
        }

        /// <summary>Method to save the file upload details to database</summary>
        /// <param name="objFileUploadDetails"> passing object </param> 
        /// <returns>file upload details</returns>
        public static object SaveSGPFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            return APACUtilityDAL.SaveSGPFileUploadDetailstoDB(objFileUploadDetails);
        }

        /// <summary>Method to save the file upload details to database</summary>
        /// <param name="objFileUploadDetails"> passing object </param> 
        /// <returns>file upload details</returns>
        public static object SaveCEFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            return APACUtilityDAL.SaveCEFileUploadDetailstoDB(objFileUploadDetails);
        }

        /// <summary>Method to get the app template ID for SAN</summary>
        /// <returns>app template ID for SAN</returns>
        public static DataSet FetchAppTemplateIdforSAN()
        {
            return APACUtilityDAL.FetchAppTemplateIdforSAN();
        }

        /// <summary>
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification = "Reviewed."),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1002:DoNotExposeGenericLists", Justification = "Reviewed")]
        public static List<List<string>> SaveNewSDAShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return APACUtilityDAL.SaveNewSDAShiftGrid(objShiftDetails, shiftData);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="bpsSda">List of Shift Data</param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateSDAGridData(ShiftDetails objShiftDetails, List<string> bpsSda)
        {
            return APACUtilityDAL.UpdateSDAGridData(objShiftDetails, bpsSda);
        }

        /// <summary>
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification = "Reviewed."),
         System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<List<string>> SaveNewNSAShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return APACUtilityDAL.SaveNewNSAShiftGrid(objShiftDetails, shiftData);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="cliNsa"> List of Shift Data </param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateNSAGridData(ShiftDetails objShiftDetails, List<string> cliNsa)
        {
            return APACUtilityDAL.UpdateNSAGridData(objShiftDetails, cliNsa);
        }

        /// <summary>
        /// Method to save the shift details
        /// </summary>
        /// <param name="objpolicyDetails"> passing object</param>
        /// <param name="policyData"> List of Shift Data </param>
        /// <returns>returns the status</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewPolicyGrid(ShiftDetails objpolicyDetails, List<string> policyData)
        {
            return APACUtilityDAL.SaveNewPolicyGrid(objpolicyDetails, policyData);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet GetAccountNameDetails(SGPUploadData objUploadData)
        {
            return APACUtilityDAL.GetAccountNameDetails(objUploadData);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetDropdownSPDDataUK(ComponentDetails objCompDetails)
        {
            return APACUtilityDAL.GetDropdownSPDDataUK(objCompDetails);
        }

        /// <summary>Method to get the empty template url</summary>
        /// <param name="objdetails"> passing object </param> 
        /// <returns>empty template url</returns>
        public static DataSet GetFAQDocument(FileUploadDetails objdetails)
        {
            return APACUtilityDAL.GetFAQDocument(objdetails);
        }

        /// <summary>
        /// Method to check associate is servian or contino of Australia
        /// </summary>
        /// <param name="objdetails">passing object </param>
        /// <returns>servian assocites</returns>
        public static DataSet IsAssociateServianContino(ComponentDetails objdetails)
        {
            return APACUtilityDAL.IsAssociateServianContino(objdetails);
        }


        public static string IsAssociateExist(string associateId)
        {
            return APACUtilityDAL.IsAssociateExist(associateId);
        }
        /// <summary>
        /// Method to check associate is servian or contino of Australia
        /// </summary>
        /// <param name="objdetails">passing object </param>
        /// <returns>servian assocites</returns>
        public static DataSet GetAPACProject(ComponentDetails objdetails)
        {
            return APACUtilityDAL.GetAPACProject(objdetails);
        }

        /// <summary>
        /// Method to Dispose
        /// </summary>
        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }
    }
}




//-----------------------------------------------------------------------
// <copyright file="UtilityBAL.cs" company="Special pay">
//     Copyright (c) Special pay Enterprises. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
namespace SPay.BAL.UtilityBAL
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using OneC.Spay.DC.UtilityDC;
    using SPay.DAL.UtilityDAL;
    using SPay.DC.UtilityDC;
    using System.Security.Cryptography;
    using System.IO;
    using System.Text;

    /// <summary>
    /// Class for UtilityBAL
    /// </summary>
    public sealed class UtilityBAL : IDisposable
    {
        /// <summary>
        /// Method to log the exception
        /// </summary>
        /// <param name="errDetail"> passing object </param> 
        public static void LogException(ErrorDetails errDetail)
        {
            UtilityDAL.LogException(errDetail);
        }

        /// <summary>
        /// Method to Dispose
        /// </summary>
        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Method to save the approval upload details in first time tab
        /// </summary>
        /// <param name="objFileUploadDetails"> passing object </param> 
        /// <returns>to get the status on saving the file upload details in first time tab for approvals</returns>
        public static string SaveFirstTimeFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            return UtilityDAL.SaveFirstTimeFileUploadDetailstoDB(objFileUploadDetails);
        }

        /// <summary>
        /// Method to get the type of approval
        /// </summary>
        /// <param name="objRole"> passing object </param> 
        /// <returns>approval types</returns>
        public static DataSet GetApprovalTypes(CreateUserRole objRole)
        {
            return UtilityDAL.GetApprovalTypes(objRole);
        }

        /// <summary>
        /// Method to get the Department Group
        /// </summary>
        /// <returns>Department Group</returns>
        public static DataSet FetchDepartmentGroup()
        {
            return UtilityDAL.FetchDepartmentGroup();
        }

        /// <summary>
        /// Method to get the My pay component names
        /// </summary>
        /// <returns>My pay component names</returns>
        public static DataSet FetchMyPayComponentNames()
        {
            return UtilityDAL.FetchMyPayComponentNames();
        }

        /// <summary>
        /// Method to get the Roles and pages
        /// </summary>
        /// <param name="sessionDetail"> passing object </param> 
        /// <returns>get the pages according to roles</returns>
        public static DataSet GetUserRolesandPages(SessionDetails sessionDetail)
        {
            return UtilityDAL.GetUserRolesandPages(sessionDetail);
        }

        /// <summary>
        /// Method to get the Roles and pages
        /// </summary>
        /// <param name="sessionDetail"> passing object </param> 
        /// <returns>get the pages according to roles</returns>
        public static DataSet GetUserCountryandRoles(SessionDetails sessionDetail)
        {
            return UtilityDAL.GetUserCountryandRoles(sessionDetail);
        }

        /// <summary>
        /// Method to get the Roles and pages
        /// </summary>
        /// <param name="sessionDetail"> passing object </param> 
        /// <returns>get the pages according to roles</returns>
        public static DataSet GetCountryDetails(SessionDetails sessionDetail)
        {
            return UtilityDAL.GetCountryDetails(sessionDetail);
        }

        /// <summary>
        /// Method to get the RoleNames
        /// </summary>
        /// <param name="currentUser"> integer data type </param> 
        /// <returns>role names according to the component</returns>
        public static DataSet GetPagesforCurrentRole(UserInfoDC currentUser)
        {
            return UtilityDAL.GetPagesforCurrentRole(currentUser);
        }

        /// <summary>
        /// Method to save the Component Details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>status on saving the component details</returns>
        public static DataSet SaveComponentDetails(ComponentDetails objCompDet)
        {
            return UtilityDAL.SaveComponentDetails(objCompDet);
        }

        /// 298521 starts here
        /// ManageRoles.aspx starts here
        /// <summary>Method to get the Component Names </summary>
        /// <param name="objUserRole"> passing object </param> 
        /// <returns>Component Names according to user</returns>
        public static DataSet FetchComponentNames(CreateUserRole objUserRole)
        {
            return UtilityDAL.FetchComponentNames(objUserRole);
        }

        /// <summary>
        /// Method to get the RoleNames
        /// </summary>
        /// <param name="componentid"> integer data type </param> 
        /// <returns>role names according to the component</returns>
        public static DataSet GetRoleNames(int componentid)
        {
            return UtilityDAL.GetRoleNames(componentid);
        }

        /// <summary>
        /// Method to Create the User Role
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        public static void CreateUserRole(CreateUserRole objinputs)
        {
            UtilityDAL.CreateUserRole(objinputs);
        }

        /// <summary>
        /// Method to get the User Details in Grid
        /// </summary>
        /// <param name="objRoles"> passing object </param> 
        /// <returns>User Details in Grid</returns>
        public static DataSet FetchGridUserDetails(CreateUserRole objRoles)
        {
            return UtilityDAL.FetchGridUserDetails(objRoles);
        }

        /// <summary>
        /// Method to change the status of user
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        public static void ChangeUserStatus(ChangeUserStatus objinputs)
        {
            UtilityDAL.ChangeUserStatus(objinputs);
        }

        ////ManageRoles.aspx ends here

        ////298521 ends here

        /// <summary>
        /// Method to get the component Details in Grid
        /// </summary>
        /// <returns>component Details in Grid</returns>
        public static DataSet FetchGridComponentDetails()
        {
            return UtilityDAL.FetchGridComponentDetails();
        }

        /// <summary>
        /// Method to toggle the component status
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>toggled component status</returns>
        public static string ToggleComponentStatus(ComponentDetails objcompDet)
        {
            return UtilityDAL.ToggleComponentStatus(objcompDet);
        }

        /// <summary>
        /// Method to get the count of uploader for a particular project
        /// </summary>
        /// <param name="objUser"> passing object </param> 
        /// <returns>count of uploader for a particular project</returns>
        public static int GetUploadersCount(CreateUserRole objUser)
        {
            return UtilityDAL.GetUploadersCount(objUser);
        }

        /// <summary>
        /// Method to get the RoleNames
        /// </summary>
        /// <returns> to get the RoleNames </returns>
        public static DataSet GetRoleNames()
        {
            return UtilityDAL.GetRoleNames();
        }

        /// <summary>Method to get the template for  currency template</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetProjectTemplate(UploaderData objuploaderData)
        {
            return UtilityDAL.GetProjectTemplate(objuploaderData);
        }

        /// <summary>Method to get the template for  currency template</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet DownloadTrutimeReport(ComponentDetails objuploaderData)
        {
            return UtilityDAL.DownloadTrutimeReport(objuploaderData);
        }

        /// <summary>
        /// Method to get the approval details for the grid
        /// </summary>
        /// <returns>Approval details for Grid</returns>
        public static DataSet FetchGridApprovalDetails()
        {
            return UtilityDAL.FetchGridApprovalDetails();
        }

        /// <summary>
        /// Method to verify the grid details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>data for Grid</returns>
        public static DataSet GetVerifyGridDetails(ComponentDetails objCompDet)
        {
            return UtilityDAL.GetVerifyGridDetails(objCompDet);
        }

        /// <summary>
        /// Method to get the SetID details
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>SetID details</returns>
        public static DataSet GetSetIdDetails(ComponentDetails objCompDet)
        {
            return UtilityDAL.GetSetIdDetails(objCompDet);
        }

        /// 388582
        /// <summary>
        /// Method to get the SetID and ProjectID for Referral bonus
        /// </summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>SetID and ProjectID for Referral bonus</returns>
        public static DataSet GetRBSetIDProjectId(ComponentDetails objCompDet)
        {
            return UtilityDAL.GetRBSetIDProjectId(objCompDet);
        }

        /// <summary>
        /// Method to verify the rejected approval in update
        /// </summary>
        /// <param name="objAppDetails"> passing object </param> 
        /// <returns>status on verifying the reject status</returns>
        public static string UpdateVerifyRejectStats(ApprovalDetails objAppDetails)
        {
            return UtilityDAL.UpdateVerifyRejectStats(objAppDetails);
        }

        /// <summary>
        /// Method to get the Grade details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>Grade Details</returns>
        public static DataSet GetGradeDetails(ComponentDetails objcompDet)
        {
            return UtilityDAL.GetGradeDetails(objcompDet);
        }

        /// <summary>
        /// Method to get the Grade amount details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>Grade amount Details</returns>
        public static DataSet GetBPSGradeAmountDetails(ComponentDetails objcompDet)
        {
            return UtilityDAL.GetBPSGradeAmountDetails(objcompDet);
        }

        /// <summary>
        /// Method to get the Grade amount details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>Grade amount Details</returns>
        public static DataSet GetDISGradeAmountDetails(ComponentDetails objcompDet)
        {
            return UtilityDAL.GetDISGradeAmountDetails(objcompDet);
        }
        /// <summary>
        /// Method to get the renew approval list
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Department Details</returns>
        public static DataSet GetRenewalList(ApprovalDetails objinputs)
        {
            return UtilityDAL.GetRenewalList(objinputs);
        }

        /// <summary>
        /// Method to get the department details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>Department Details</returns>
        public static DataSet GetDepartmentDetails(ComponentDetails objcompDet)
        {
            return UtilityDAL.GetDepartmentDetails(objcompDet);
        }

        /// <summary>
        /// Method to get the Account details for BPS shift allowance
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>Account Details</returns>
        public static DataSet GetAccountDetails(ComponentDetails objcompDet)
        {
            return UtilityDAL.GetAccountDetails(objcompDet);
        }

        /// <summary>
        /// Method to Save the file upload details in renew approvals page
        /// </summary>
        /// <param name="objFileUploadDetails"> passing object </param> 
        /// <returns>status on saving the file upload details in renew approvals</returns>
        public static string SaveRenewalFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            return UtilityDAL.SaveRenewalFileUploadDetailstoDB(objFileUploadDetails);
        }

        /// <summary>
        /// Method to get the grade amount details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>grade amount details</returns>
        public static DataSet GetGradeAmountDetails(ComponentDetails objcompDet)
        {
            return UtilityDAL.GetGradeAmountDetails(objcompDet);
        }

        /// <summary>
        /// Method to get the other details
        /// </summary>
        /// <param name="objcompDet"> passing object </param> 
        /// <returns>status on getting the other details</returns>
        public static DataSet GetOtherDetails(ComponentDetails objcompDet)
        {
            return UtilityDAL.GetOtherDetails(objcompDet);
        }

        /// <summary>
        /// Method to update the policy details for Joining Bonus
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Joining Bonus Policy details  </returns>
        public static string UpdateJBPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateJBPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to update the policy details for Joining Bonus
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Joining Bonus Policy details  </returns>
        public static string UpdateGYMPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateGYMPolicyDetails(objpolicyDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetGymPolicyDetails(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetGymPolicyDetails(objCompDetails);
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet DeletePolicyData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.DeletePolicyData(objCompDetails);
        }

        /// <summary>
        /// Method to update the policy details for Cognizant Business allowance
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the Joining Bonus Policy details  </returns>
        public static string UpdateCBAPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateCBAPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to update the policy details for Sixth day allowance
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the policy details on Sixth Day Allowance</returns>
        public static string UpdateSixthDayPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateSixthDayPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to update the policy details for On Call Allowance
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the policy details for on call allowance </returns>
        public static string UpdateOCAPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateOCAPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to update the policy details for Night Shift Allowance
        /// </summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the night shift allowance policy details</returns>
        public static string UpdateNSAPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateNSAPolicyDetails(objpolicyDetails);
        }

        /// <summary>
        /// Method to get the shift timings for night shift allowance
        /// </summary>
        /// <returns>shift timings for night shift allowance</returns>
        public static DataSet FetchNSAShiftTiming()
        {
            return UtilityDAL.FetchNSAShiftTiming();
        }

        /// <summary>Method to update the policy details for referral bonus</summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the referral bonus policy details </returns>
        public static string UpdateRBPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateRBPolicyDetails(objpolicyDetails);
        }

        /// <summary>Method to update the policy details for BPS</summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the BPS policy details </returns>
        public static string UpdateBPSPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateBPSPolicyDetails(objpolicyDetails);
        }

        /// <summary>Method to update the policy details for BPS</summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the BPS policy details </returns>
        public static string UpdateBPSNSAPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateBPSNSAPolicyDetails(objpolicyDetails);
        }

        /// <summary>Method to update the policy details for BPS</summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the BPS policy details </returns>
        public static string UpdateBPSSDAPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateBPSSDAPolicyDetails(objpolicyDetails);
        }

        /// <summary>Method to update the policy details for BPS</summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the DIS policy details </returns>
        public static string UpdateDISPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateDISPolicyDetails(objpolicyDetails);
        }

        /// <summary>Method to update the policy details for BPS</summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the BPS policy details </returns>
        public static string UpdateBPSTransportPolicyDetails(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateBPSTransportPolicyDetails(objpolicyDetails);
        }

        /// <summary>Method to update the policy details for BPS</summary>
        /// <param name="objpolicyDetails"> passing object </param> 
        /// <returns>status on updating the BPS policy details </returns>
        public static string UpdateBPSTransportAmountDetail(PolicyDetails objpolicyDetails)
        {
            return UtilityDAL.UpdateBPSTransportAmountDetail(objpolicyDetails);
        }

        /// <summary>Method to populate the component by approval type</summary>
        /// <param name="objCompDet"> passing object </param> 
        /// <returns>component by approval type</returns>
        public static DataSet PopulateComponentByType(ComponentDetails objCompDet)
        {
            return UtilityDAL.PopulateComponentByType(objCompDet);
        }

        /// <summary>Method to get the empty template url</summary>
        /// <param name="objdetails"> passing object </param> 
        /// <returns>empty template url</returns>
        public static DataSet GetEmptyTemplateURL(FileUploadDetails objdetails)
        {
            return UtilityDAL.GetEmptyTemplateURL(objdetails);
        }

        /// <summary>Method to get the empty template url</summary>
        /// <param name="objdetails"> passing object </param> 
        /// <returns>empty template url</returns>
        public static DataSet GetUseManuals(FileUploadDetails objdetails)
        {
            return UtilityDAL.GetUseManuals(objdetails);
        }

        /// <summary>Method to check whether the associate id is valid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <returns>status on checking the valid associate ID</returns>
        public static int CheckValidAssociateID(int userID)
        {
            return UtilityDAL.CheckValidAssociateID(userID);
        }

        /// <summary>Method to save the file upload details to database</summary>
        /// <param name="objFileUploadDetails"> passing object </param> 
        public static string SaveFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
           return UtilityDAL.SaveFileUploadDetailstoDB(objFileUploadDetails);
        }

        /// <summary>Method to save the file upload details to database</summary>
        /// <param name="objFileUploadDetails"> passing object </param> 
        /// <returns>file upload details</returns>
        public static object SaveTrtFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            if (objFileUploadDetails.ComponentGroupID == 43)
            {
                return UtilityDAL.SaveGymFileUploadDetailstoDB(objFileUploadDetails);
            }
            else if (objFileUploadDetails.ComponentGroupID == 44)
            {
                return UtilityDAL.SaveORFileUploadDetailstoDB(objFileUploadDetails);
            }
            else if (objFileUploadDetails.ComponentGroupID == 105)
            {
                return UtilityDAL.SaveNewCompFileUploadDetailstoDB(objFileUploadDetails);
            }
            else
            {
                return UtilityDAL.SaveTrtFileUploadDetailstoDB(objFileUploadDetails);
            }
        }

        /// <summary>Method to get the valid data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>valid data for uploader</returns>
        public static DataSet GetUploaderValidData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderValidData(objCompDetails);
        }

        /// <summary>
        /// Method to get the valid data for Total rewards team
        /// </summary>
        /// <param name="objCompDetails">passing object </param>
        /// <returns>valid data for Total rewards team</returns>
        public static DataSet GetTotalRewardsTeamValidData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetTotalRewardsTeamValidData(objCompDetails);
        }

        /// <summary>
        /// Method to get the duplicate data for Total rewards team
        /// </summary>
        /// <param name="objCompDetails">passing object </param>
        /// <returns>duplicate data for Total rewards team</returns>
        public static DataSet GetTotalRewardsTeamDuplicatesData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetTotalRewardsTeamDuplicatesData(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader for total rewards</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionDataTRT(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderExceptionDataTRT(objCompDetails);
        }

        /// <summary>Method to get the exception data for uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>exception data for uploader</returns>
        public static DataSet GetUploaderExceptionData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderExceptionData(objCompDetails);
        }

        /// <summary>Method to get the app template ID for SAN</summary>
        /// <returns>app template ID for SAN</returns>
        public static DataSet FetchAppTemplateIdforSAN()
        {
            return UtilityDAL.FetchAppTemplateIdforSAN();
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet GetUploaderValidViewData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderValidViewData(objCompDetails);
        }

        /// <summary>Method to view the valid data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data for uploader</returns>
        public static DataSet ApproveUploaderValidData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.ApproveUploaderValidData(objCompDetails);
        }

        /// <summary>Method to view the valid data for an currency</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data</returns>
        public static DataSet GetValidViewDataCurrency(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetValidViewDataCurrency(objCompDetails);
        }

        /// <summary>Method to view the valid data for an currency</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the valid data</returns>
        public static DataSet GetTrtSpecialInputsViewData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetTrtSpecialInputsViewData(objCompDetails);
        }

        /// <summary>Method to view the exception data for an uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>view the exception data for uploader</returns>
        public static DataSet GetUploaderExceptionViewData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderExceptionViewData(objCompDetails);
        }

        /// <summary>
        /// Method to get the Special case reason
        /// </summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Special Case Reason</returns>
        public static DataSet GetSpecialCaseReasons(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetSpecialCaseReasons(objCompDetails);
        }

        /// <summary>Method to get the BG Status</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>BG status</returns>
        public static DataSet GetBGstatus(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetBGstatus(objCompDetails);
        }

        /// <summary>Method to Get Currency Drop Down Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Currency details</returns>
        public static DataSet GetCurrencyDropDownDetails(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetCurrencyDropDownDetails(objCompDetails);
        }

        /// <summary>Method to Get Currency Drop Down Details</summary>     
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Currency details</returns>
        public static DataSet GetCityDropDownDetails(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetCityDropDownDetails(objCompDetails);
        }

        /// <summary>Method to Get Component Name Drop Down Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>component details</returns>
        public static DataSet GetComponentDropdownDetails(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetComponentDropdownDetails(objCompDetails);
        }

        /// <summary>Method to Get customize grid Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Customize grid details</returns>
        public static DataSet GetCustomizeGridData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetCustomizeGridData(objCompDetails);
        }

        /// <summary>Method to Get Periods wise Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Periods wise Details</returns>
        public static DataSet FetchQuarterDetails(ComponentDetails objCompDetails)
        {
            return UtilityDAL.FetchQuarterDetails(objCompDetails);
        }

        /// <summary>Method to Get customize grid Details</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Customize grid details</returns>
        public static DataSet GetComponentTypeandName(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetComponentTypeandName(objCompDetails);
        }

        /// <summary>Method to get the recruitment type for referral bonus</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>Recruitment type for referral bonus</returns>
        public static DataSet GetRecruitmentType(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetRecruitmentType(objCompDetails);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the Notice pay valid data</returns>
        public static DataSet UpdateNoticePayValidData(UploaderData objUploadData)
        {
            return UtilityDAL.UpdateNoticePayValidData(objUploadData);
        }

        /// <summary>Method to update the Notice pay exception data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the notice pay exception data</returns>
        public static DataSet UpdateNoticePayExceptionData(UploaderData objUploadData)
        {
            return UtilityDAL.UpdateNoticePayExceptionData(objUploadData);
        }

        /// <summary>Method to update the referral bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus valid data</returns>
        public static DataSet UpdateReferralValidData(UploaderData objUploadData)
        {
            return UtilityDAL.UpdateReferralValidData(objUploadData);
        }

        /// <summary>Method to update the referral bonus exception data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the referral bonus exception data </returns>
        public static DataSet UpdateReferralExceptionData(UploaderData objUploadData)
        {
            return UtilityDAL.UpdateReferralExceptionData(objUploadData);
        }

        /// <summary>Method to update the joining bonus valid data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the joining bonus valid data </returns>
        public static DataSet UpdateJoiningValidData(UploaderData objUploadData)
        {
            return UtilityDAL.UpdateJoiningValidData(objUploadData);
        }

        /// <summary>Method to update the joining bonus exception data</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Status on updating the joining bonus exception data </returns>
        public static DataSet UpdateJoiningExceptionData(UploaderData objUploadData)
        {
            return UtilityDAL.UpdateJoiningExceptionData(objUploadData);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveUploaderNewData(UploaderData objUploadData)
        {
            return UtilityDAL.SaveUploaderNewData(objUploadData);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveTrtUploaderNewData(TRTUploader objUploadData)
        {
            return UtilityDAL.SaveTrtUploaderNewData(objUploadData);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveGymUploaderNewData(UploaderData objUploadData)
        {
            return UtilityDAL.SaveGymUploaderNewData(objUploadData);
        }

        /// <summary>Method to insert the uploader new data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveCBANewData(CBAUploader objUploadData)
        {
            return UtilityDAL.SaveCBANewData(objUploadData);
        }

        /// <summary>Method to insert the uploader valid data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateTrtInputsValidData(TRTUploader objUploadData)
        {
            return UtilityDAL.UpdateTrtInputsValidData(objUploadData);
        }

        /// <summary>Method to insert the uploader valid data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateGymInputsValidData(UploaderData objUploadData)
        {
            return UtilityDAL.UpdateGymInputsValidData(objUploadData);
        }

        /// <summary>Method to insert the uploader valid data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateCBAValidData(CBAUploader objUploadData)
        {
            return UtilityDAL.UpdateCBAValidData(objUploadData);
        }

        /// <summary>Method to insert the uploader exception data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateCbaExceptionData(CBAUploader objUploadData)
        {
            return UtilityDAL.UpdateCbaExceptionData(objUploadData);
        }

        /// <summary>Method to insert the uploader exception to valid data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateTrtInputsExceptionData(TRTUploader objUploadData)
        {
            return UtilityDAL.UpdateTrtInputsExceptionData(objUploadData);
        }

        /// <summary>Method to insert the uploader exception to valid data into the table </summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateGymInputsExceptionData(UploaderData objUploadData)
        {
            return UtilityDAL.UpdateGymInputsExceptionData(objUploadData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objCurrencyData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveCurrencyNewData(CurrencyData objCurrencyData)
        {
            return UtilityDAL.SaveCurrencyNewData(objCurrencyData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveTrtReversalData(TrtReversal objReversalData)
        {
            return UtilityDAL.SaveTrtReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveBPSReversalData(TrtReversal objReversalData)
        {
            return UtilityDAL.SaveBPSReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveITReversalData(TrtReversal objReversalData)
        {
            return UtilityDAL.SaveITReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveGymReversalData(TrtReversal objReversalData)
        {
            return UtilityDAL.SaveGymReversalData(objReversalData);
        }

        /// <summary>Method to insert the currency new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet SaveORReversalData(TrtReversal objReversalData)
        {
            return UtilityDAL.SaveORReversalData(objReversalData);
        }

        /// <summary>Method to update the currency new data into the table </summary>
        /// <param name="objCurrencyData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateCurrencyData(CurrencyData objCurrencyData)
        {
            return UtilityDAL.UpdateCurrencyData(objCurrencyData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateReversalData(TrtReversal objReversalData)
        {
            return UtilityDAL.UpdateReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateReversalBPSData(TrtReversal objReversalData)
        {
            return UtilityDAL.UpdateReversalBPSData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateReversalITData(TrtReversal objReversalData)
        {
            return UtilityDAL.UpdateReversalITData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionReversalData(TrtReversal objReversalData)
        {
            return UtilityDAL.UpdateExceptionReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionBPSReversalData(TrtReversal objReversalData)
        {
            return UtilityDAL.UpdateExceptionBPSReversalData(objReversalData);
        }

        /// <summary>Method to update the reversal new data into the table </summary>
        /// <param name="objReversalData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet UpdateExceptionITReversalData(TrtReversal objReversalData)
        {
            return UtilityDAL.UpdateExceptionITReversalData(objReversalData);
        }

        /// <summary>Method to update the currency new data into the table </summary>
        /// <param name="objCurrencyData"> passing object </param> 
        /// <returns> Status for saving the uploader data in new popup </returns>
        public static DataSet ValidateExceptionCurrencyUpdateData(CurrencyData objCurrencyData)
        {
            return UtilityDAL.ValidateExceptionCurrencyUpdateData(objCurrencyData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeleteUploaderValidData(UploaderData objUploadData)
        {
            return UtilityDAL.DeleteUploaderValidData(objUploadData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeleteTrutimeData(UploaderData objUploadData)
        {
            return UtilityDAL.DeleteTrutimeData(objUploadData);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet SendTrutimeData(UploaderData objUploadData)
        {
            return UtilityDAL.SendTrutimeData(objUploadData);
        }

        /// <summary>Method to Delete the exception data by Uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>data that is present in exception for uploader</returns>
        public static DataSet DeleteUploaderExceptionData(UploaderData objUploadData)
        {
            return UtilityDAL.DeleteUploaderExceptionData(objUploadData);
        }

        /// <summary>Method to get the verify mailer data for approval</summary>
        /// <param name="objApprDetails"> passing object </param> 
        /// <returns>verify mailer data for approval</returns>
        public static DataSet GetApprovalVerifyMailerData(ApprovalDetails objApprDetails)
        {
            return UtilityDAL.GetApprovalVerifyMailerData(objApprDetails);
        }

        /// <summary>Method to get the template for  currency template</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetCurrencyDataTemplate(UploaderData objuploaderData)
        {
            return UtilityDAL.GetCurrencyDataTemplate(objuploaderData);
        }

        /// <summary>Method to get the template for  currency template</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetPolicyData(UploaderData objuploaderData)
        {
            return UtilityDAL.GetPolicyData(objuploaderData);
        }

        /// <summary>Method to get the template for  currency template</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetAccountDataTemplate(UploaderData objuploaderData)
        {
            return UtilityDAL.GetAccountDataTemplate(objuploaderData);
        }

        /// <summary>Method to get the template for every component</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Template for the Component</returns>
        public static DataSet GetDataTemplate(UploaderData objuploaderData)
        {
            return UtilityDAL.GetDataTemplate(objuploaderData);
        }

        ///// <summary>Method to get the Processed Report</summary>
        ///// <param name="objuploaderData"> passing object </param> 
        ///// <returns>Processed Report</returns>
        //public SqlDataReader GetProcessedReports(UploaderData objuploaderData)
        //{
        //    using (UtilityDAL UtilityDAL = new UtilityDAL())
        //    {
        //        return UtilityDAL.GetProcessedReports(objuploaderData);
        //    }
        //}

        /// <summary>Method to get the Processed Report</summary>
        /// <param name="objuploaderData"> passing object </param> 
        /// <returns>Processed Report</returns>
        public static DataSet GetProcessedReport(UploaderData objuploaderData)
        {
            return UtilityDAL.GetProcessedReport(objuploaderData);
        }

        /// <summary>Method to get the rejected data in valid tab for the uploader</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>Rejected data</returns>
        public static string RejectUploaderValidData(UploaderData objUploadData)
        {
            return UtilityDAL.RejectUploaderValidData(objUploadData);
        }

        /// <summary>Method to get the filter data  for the role Uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>filter data for the role uploader</returns>
        public static DataSet GetUploaderFilterData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderFilterData(objCompDetails);
        }

        /// <summary>Method to get the filter data  for the role Uploader</summary>
        /// <param name="objCompDetails"> passing object </param> 
        /// <returns>filter data for the role uploader</returns>
        public static DataSet GetPfssFilterDropdownData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetPfssFilterDropdownData(objCompDetails);
        }

        /// <summary>Method to get the referrer details for referral bonus</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>details for referrer</returns>
        public static DataSet GetReferrerdetails(ComponentDetails objcompDetails)
        {
            return UtilityDAL.GetReferrerdetails(objcompDetails);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetAssociateProjectId(ComponentDetails objcompDetails)
        {
            return UtilityDAL.GetAssociateProjectId(objcompDetails);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetAssociateProjectIdAndName(ComponentDetails objcompDetails)
        {
            return UtilityDAL.GetAssociateProjectIdAndName(objcompDetails);
        }

        /// <summary>
        /// 311556: To get report types
        /// </summary>
        /// <param name="objCompDetails">Component Details</param>
        /// <returns>reports for component selected</returns>
        public static DataSet GetReportTypes(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetReportTypes(objCompDetails);
        }

        /// <summary> Method to get the project ID for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Project id for the associate</returns>
        public static DataSet GetAssociateProjectIdAndNameForUploader(ComponentDetails objcompDetails)
        {
            return UtilityDAL.GetAssociateProjectIdAndNameForUploader(objcompDetails);
        }

        /// <summary>Method to get the associate details for joining bonus</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>associate details for joining bonus</returns>
        public static DataSet GetAssociateDetailsforJB(ComponentDetails objcompDetails)
        {
            return UtilityDAL.GetAssociateDetailsforJB(objcompDetails);
        }

        /// <summary>Method to get the headers for excel</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>headers for excel</returns>
        public static DataSet GetExcelHeaders(ComponentDetails objcompDetails)
        {
            return UtilityDAL.GetExcelHeaders(objcompDetails);
        }

        /// <summary>Method to get the data for my pay grid</summary>
        /// <param name="userID"> integer data type </param> 
        /// <param name="roleID"> roleID integer data type </param>  
        /// <returns>data for push to my pay page grid</returns>
        public static DataSet MyPayPushGrid(int userID, int roleID)
        {
            return UtilityDAL.MyPayPushGrid(userID, roleID);
        }

        /// <summary>Method to get the valid data in push to my pay page</summary>
        /// <param name="compid"> integer data type </param> 
        /// <param name="componentid">component id </param> 
        /// <returns>valid data pushed</returns>
        public static DataSet GetValidData(int compid, int componentid)
        {
            return UtilityDAL.GetValidData(compid, componentid);
        }

        /// <summary>Method to push data to my pay</summary>
        /// <param name="mypaycompid"> my pay component </param> 
        /// <param name="compId"> string data type </param>
        /// <param name="userid"> integer data type </param> 
        public static void PushDataToMyPay(string mypaycompid, string compId, int userid)
        {
            UtilityDAL.PushDataToMyPay(mypaycompid, compId, userid);
        }

        /// <summary> Method to get the uploader cut off date</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>uploader cut off date</returns>
        public static DataSet GetUploaderCutOffDate(UploaderData objUploadData)
        {
            return UtilityDAL.GetUploaderCutOffDate(objUploadData);
        }

        /// <summary> Method to get the uploader cut off date</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>uploader cut off date</returns>
        public static DataSet GetTopUpdetails(UploaderData objUploadData)
        {
            return UtilityDAL.GetTopUpdetails(objUploadData);
        }

        /// <summary> Method to get the uploader cut off date</summary>
        /// <param name="objUploadData"> passing object </param> 
        /// <returns>uploader cut off date</returns>
        public static DataSet GetCurrencyCutOffDate(UploaderData objUploadData)
        {
            return UtilityDAL.GetCurrencyCutOffDate(objUploadData);
        }

        /// <summary>Method to get the report with exception data </summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>Exception data report</returns>
        public static DataSet GetExceptionReport(ReportDetails objreport)
        {
            return UtilityDAL.GetExceptionReport(objreport);
        }

        /// <summary>Method to get the report with valid data in push to my pay page </summary>
        /// <param name="objreport">passing object </param> 
        /// <returns>Valid data report</returns>
        public static DataSet GetValidReport(ReportDetails objreport)
        {
            return UtilityDAL.GetValidReport(objreport);
        }

        /// <summary>Method to get the data that is rejected or deleted for a particular component</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>data that is rejected or deleted</returns>
        public static DataSet GetRejectDeleteReport(ReportDetails objreport)
        {
            return UtilityDAL.GetRejectDeleteReport(objreport);
        }

        /// <summary>Method to get the report with valid data in push to my pay page</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>Valid data report</returns>
        public static DataSet GenerateReportData(ReportDetails objreport)
        {
             
            return UtilityDAL.GenerateReportDataCustom(objreport);
        }

        /// <summary>Method to get My pay push Report</summary>
        /// <param name="objreport"> passing object </param> 
        /// <returns>My pay Push Report</returns>
        public static DataSet GetMyPayPushReport(ReportDetails objreport)
        {
            return UtilityDAL.GetMyPayPushReport(objreport);
        }

        /// <summary>Method to get Payment Status Report</summary>
        /// <param name="objreport">passing object </param>
        /// <returns>Payment Status Report</returns>
        public static DataSet GetPaymentStatusReport(ReportDetails objreport)
        {
            return UtilityDAL.GetPaymentStatusReport(objreport);
        }

        /// <summary>Method to get Referee Details</summary>
        /// <param name="objcompDetails">passing object </param>
        /// <returns>Referee Details</returns>
        public static DataSet GetRefreedetails(ComponentDetails objcompDetails)
        {
            return UtilityDAL.GetRefreedetails(objcompDetails);
        }

        /// <summary>Method to get dynamic data</summary>
        /// <param name="objUser">passing object </param>
        /// <returns>Dynamic data</returns>
        public static DataSet Getdatadynamic(CreateUserRole objUser)
        {
            return UtilityDAL.Getdatadynamic(objUser);
        }

        /// <summary>Method to download query data</summary>
        /// <param name="query"> string data type </param>
        /// <returns>Query data</returns>
        public static DataSet DownloadQueryData(string query)
        {
            return UtilityDAL.DownloadQueryData(query);
        }

        /// <summary>check whether the projectID is valid</summary>
        /// <param name="projectID"> string data type </param>
        /// <returns> Status for checking the valid project ID</returns>
        public static int CheckValidProjectID(string projectID)
        {
            return UtilityDAL.CheckValidProjectID(projectID);
        }

        /// <summary>Method to get the Tech team recipients</summary>
        /// <param name="objContAccess">passing object </param>
        /// <returns>Tech team recipients</returns>
        public static DataSet GetTechTeamRecipients(ControlAccess objContAccess)
        {
            return UtilityDAL.GetTechTeamRecipients(objContAccess);
        }

        /// <summary>Method to insert the super Admin</summary>
        /// <param name="objinputs">passing object</param>
        public static DataSet InsertSuperAdmin(CreateUserRole objinputs)
        {
            return UtilityDAL.InsertSuperAdmin(objinputs);
        }

        /// <summary>
        /// Method to get the reversal valid data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>reversal valid data</returns>
        public static DataSet GetReversalValidData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetReversalValidData(objCompDetails);
        }

        /// <summary>
        /// Method to get the reversal exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>reversal exception data</returns>
        public static DataSet GetReversalExceptionData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetReversalExceptionData(objCompDetails);
        }

        /// <summary>
        /// Method to get the reversal data template
        /// </summary>
        /// <param name="objuploaderData">passing object</param>
        /// <returns>reversal data template</returns>
        public static DataSet GetReversalDataTemplate(UploaderData objuploaderData)
        {
            return UtilityDAL.GetReversalDataTemplate(objuploaderData);
        }

        /// <summary>
        /// Method to get the processed reversal report
        /// </summary>
        /// <param name="objuploaderData">passing object</param>
        /// <returns>processed reversal report</returns>
        public static DataSet GetReversalProcessedReport(UploaderData objuploaderData)
        {
            return UtilityDAL.GetReversalProcessedReport(objuploaderData);
        }

        /// <summary>
        /// Method to get the reversal data
        /// </summary>
        /// <param name="objreport"> passing object</param>
        /// <returns>reversal report</returns>
        public static DataSet GetReversalReport(ReportDetails objreport)
        {
            return UtilityDAL.GetReversalReport(objreport);
        }

        /// <summary>
        /// Method to delete the reversal data
        /// </summary>
        /// <param name="objUploadData"> passing object</param>
        /// <returns>status of the delete reversal data </returns>
        public static DataSet DeleteReversalData(UploaderData objUploadData)
        {
            return UtilityDAL.DeleteReversalData(objUploadData);
        }

        /// <summary>
        /// Method to log mailer details
        /// </summary>
        /// <param name="objMailerLog"> passing object</param>
        public static void LogMailerDetails(MailerLog objMailerLog)
        {
            UtilityDAL.LogMailerDetails(objMailerLog);
        }

        /// <summary>
        /// Method to get error mailer recipients
        /// </summary>
        /// <returns>error mailer recipients</returns>
        public static DataSet FetchErrorMailerRecipients()
        {
            return UtilityDAL.FetchErrorMailerRecipients();
        }

        /// <summary>
        /// Method to get My pay service credentials
        /// </summary>
        /// <returns>My pay service credentials</returns>
        public static DataSet FetchMyPayServiceCredentials()
        {
            return UtilityDAL.FetchMyPayServiceCredentials();
        }

        /// <summary>
        /// Method to get project details for approval
        /// </summary>
        /// <param name="objDetails">passing object</param>
        /// <returns>project details for approval</returns>
        public static DataSet GetProjectDetailsForApproval(ApprovalDetails objDetails)
        {
            return UtilityDAL.GetProjectDetailsForApproval(objDetails);
        }

        #region Manage Cutoff Dates
        /// <summary>
        /// Method to get the HCM cut off end date
        /// </summary>
        /// <param name="objRoles"> passing object</param>
        /// <returns>HCM cut off end date</returns>
        public static DataSet GetComponentGroupNames(CreateUserRole objRoles)
        {
            return UtilityDAL.GetComponentGroupNames(objRoles);
        }

        /// <summary>
        /// Method to save the HCM cut off end date
        /// </summary>
        /// <param name="objCutOffDetails">passing  object</param>
        public static void SaveHCMCuttOffEndDate(CuttOffDateStatusUpdate objCutOffDetails)
        {
            UtilityDAL.SaveHCMCuttOffEndDate(objCutOffDetails);
        }

        /// <summary>
        /// Method to get the HCM cut off end date
        /// </summary>
        /// <returns>HCM cut off end date</returns>
        public static DataSet FetchHCMCuttOffEndDate()
        {
            return UtilityDAL.FetchHCMCuttOffEndDate();
        }

        /// <summary>
        /// Method to get the HCM cut off end date
        /// </summary>
        /// <param name="objUserRole">passing object</param>
        /// <returns>HCM cut off end date</returns>
        public static DataSet FetchSuperAdminCurrencyCutOffDate(CreateUserRole objUserRole)
        {
            return UtilityDAL.FetchSuperAdminCurrencyCutOffDate(objUserRole);
        }

        /// <summary>
        /// Method to get the cut off date details
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>cut off date details</returns>
        public static DataSet GetCuttOffDateDetails(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetCuttOffDateDetails(objCompDetails);
        }

        /// <summary>
        /// Method to Cut off date details
        /// </summary>
        /// <param name="objinputs"> passing object</param>
        public static void SaveCuttOffDateDetails(SaveCuttOffDateDetails objinputs)
        {
            UtilityDAL.SaveCuttOffDateDetails(objinputs);
        }

        #endregion Manage Cutoff Dates

        /// <summary>
        /// Method to Save the first time approvals
        /// </summary>
        /// <param name="objApprDetails">passing object</param>
        /// <returns> status of the first time save </returns>
        public static string SaveFirstTimewithProjectDetailstoDB(ApprovalDetails objApprDetails)
        {
            return UtilityDAL.SaveFirstTimewithProjectDetailstoDB(objApprDetails);
        }

        /// <summary>
        /// Method to Save the monthly yearly approvals
        /// </summary>
        /// <param name="objApprDetails">passing object</param>
        /// <returns> status of the first time save </returns>
        public static DataSet SaveMonthlyYearlytoDB(ApprovalDetails objApprDetails)
        {
            return UtilityDAL.SaveMonthlyYearlytoDB(objApprDetails);
        }

        /// <summary>
        /// Method to edit filter in renew approval grid
        /// </summary>
        /// <param name="objapprDetails">passing object</param>
        /// <returns>updated data in renew approval grid</returns>
        public static DataSet FilterEditRenewGrid(ApprovalDetails objapprDetails)
        {
            return UtilityDAL.FilterEditRenewGrid(objapprDetails);
        }

        /// <summary>
        /// Method to edit the renew approval data
        /// </summary>
        /// <param name="objApprDetails"> passing object</param>
        /// <returns>Data with the renewal</returns>
        public static DataSet FetchEditRenewGridData(ApprovalDetails objApprDetails)
        {
            return UtilityDAL.FetchEditRenewGridData(objApprDetails);
        }

        /// <summary>
        /// Method to edit the renew approval data
        /// </summary>
        /// <param name="objApprDetails"> passing object</param>
        /// <returns>Data with the renewal</returns>
        public static DataSet FetchMessage(UploaderData objApprDetails)
        {
            return UtilityDAL.FetchMessage(objApprDetails);
        }

        /// <summary>
        /// Method to edit the renew approval data
        /// </summary>
        /// <param name="objApprDetails"> passing object</param>
        /// <returns>Data with the renewal</returns>
        public static DataSet GetMarqueeMessage(UploaderData objApprDetails)
        {
            return UtilityDAL.GetMarqueeMessage(objApprDetails);
        }

        /// <summary>
        /// Method to get Roles with approval type
        /// </summary>
        /// <param name="objComp"> passing object</param>
        /// <returns>Roles with approval type</returns>
        public static DataSet GetRolesBasedOnApprovalType(ComponentDetails objComp)
        {
            return UtilityDAL.GetRolesBasedOnApprovalType(objComp);
        }

        /// <summary>
        /// Method to get components with approval type
        /// </summary>
        /// <returns>components with approval type</returns>
        public static DataSet FetchComponentsWithApprovalType()
        {
            return UtilityDAL.FetchComponentsWithApprovalType();
        }

        /// <summary>
        /// to Fetch Role Search Filter
        /// </summary>
        /// <param name="obj">country name details</param>
        /// <returns>role details</returns>
        public static DataSet FetchRoleSearchFilter(ComponentDetails obj)
        {
            return UtilityDAL.FetchRoleSearchFilter(obj);
        }

        /// <summary>
        /// Method to check the project ID that is configured
        /// </summary>
        /// <param name="objUser">passing object</param>
        /// <returns>Status of the project ID configured </returns>
        public static int CheckConfiguredProjectID(CreateUserRole objUser)
        {
            return UtilityDAL.CheckConfiguredProjectID(objUser);
        }

        /// <summary>
        /// Method to get project approver details
        /// </summary>
        /// <param name="objApprDetails"> passing object</param>
        /// <returns>get Project Approval Details</returns>
        public static DataSet GetProjectApproverDetails(ApprovalDetails objApprDetails)
        {
            return UtilityDAL.GetProjectApproverDetails(objApprDetails);
        }

        /// <summary>
        /// Method to get Approval type with project details to database
        /// </summary>
        /// <param name="objApprDetails"> passing object</param>
        /// <returns> Status on updating the approval type </returns>
        public static string UpdateApprovalwithProjectDetailstoDB(ApprovalDetails objApprDetails)
        {
            return UtilityDAL.UpdateApprovalwithProjectDetailstoDB(objApprDetails);
        }

        /// <summary>
        /// Method to valid data for shift allowance to Uploader
        /// </summary>
        /// <param name="objCompDetails"> passing object</param>
        /// <returns>Shift allowance valid data</returns>
        public static DataSet GetUploaderShiftAllowanceValidData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderShiftAllowanceValidData(objCompDetails);
        }

        /// <summary>
        /// Method to valid data for shift allowance to Uploader
        /// </summary>
        /// <param name="objCompDetails"> passing object</param>
        /// <returns>Shift allowance valid data</returns>
        public static TrutimeMainEntity GetNSAValidRecord(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetNSAValidRecord(objCompDetails);
        }

        /// <summary>
        /// Method renew with project details
        /// </summary>
        /// <param name="objApprDetails"> passing object</param>
        /// <returns> Status of the project details </returns>
        public static string UpdateRenewalwithProjectDetailstoDB(ApprovalDetails objApprDetails)
        {
            return UtilityDAL.UpdateRenewalwithProjectDetailstoDB(objApprDetails);
        }

        /// <summary>
        /// Method to renew file upload details
        /// </summary>
        /// <param name="objFileUploadDetails">passing object</param>
        /// <returns>status of renewal</returns>
        public static string SaveRenewFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            return UtilityDAL.SaveRenewFileUploadDetailstoDB(objFileUploadDetails);
        }

        /// <summary>
        /// Method to get maximum of remainder days
        /// </summary>
        /// <returns>get maximum of remainder days</returns>
        public static DataSet FetchMaximumReminderDays()
        {
            return UtilityDAL.FetchMaximumReminderDays();
        }

        /// <summary>
        /// Method to get Stop payment report
        /// </summary>
        /// <param name="objreport"> passing object</param>
        /// <returns>Stop Payment Report</returns>
        public static DataSet GetStopPaymentReport(ReportDetails objreport)
        {
            return UtilityDAL.GetStopPaymentReport(objreport);
        }

        /// <summary>
        /// Method to get Currency Report
        /// </summary>
        /// <param name="objreport"> passing object</param>
        /// <returns>Currency Update Report</returns>
        public static DataSet GetCurrencyUpdateReport(ReportDetails objreport)
        {
            return UtilityDAL.GetCurrencyUpdateReport(objreport);
        }

        /// <summary>
        /// Method to get allowance and the corresponding shift type
        /// </summary> 
        /// <param name="objUploadData">passing object</param> 
        /// <returns>allowance and the corresponding shift type</returns>
        public static DataSet GetAllowanceandShiftType(UploaderData objUploadData)
        {
            return UtilityDAL.GetAllowanceandShiftType(objUploadData);
        }

        /// <summary>
        /// Method to get allowance type and approval type with expiry date
        /// </summary>
        /// <param name="objUploadData"> passing object</param>
        /// <returns>gets approval expiry date with approval type</returns>
        public static DataSet GetAllowanceTypeandApprovalExpiryDate(UploaderData objUploadData)
        {
            return UtilityDAL.GetAllowanceTypeandApprovalExpiryDate(objUploadData);
        }

        /// <summary>
        /// Method to get allowance type and approval type with expiry date
        /// </summary>
        /// <param name="objUploadData"> passing object</param>
        /// <returns>gets approval expiry date with approval type</returns>
        public static DataSet GetEditBPSValidData(UploaderData objUploadData)
        {
            return UtilityDAL.GetEditBPSValidData(objUploadData);
        }

        /// <summary>
        /// Method to get data for other geography tab
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>data in other geography</returns>
        public static DataSet GetOtherGeographyUploaderData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetOtherGeographyUploaderData(objCompDetails);
        }

        /// <summary>
        /// Method to get projectID for shift allowance
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <returns>projectID for shift allowance</returns>
        public static DataSet FetchProjIDforShiftUser(ShiftDetails objShiftDetails)
        {
            return UtilityDAL.FetchProjIDforShiftUser(objShiftDetails);
        }

        /// <summary>
        /// Method to get projectID for shift allowance
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <returns>projectID for shift allowance</returns>
        public static DataSet FetchProjIDforShiftUser_ReviewNSA(ShiftDetails objShiftDetails)
        {
            return UtilityDAL.FetchProjIDforShiftUser_ReviewNSA(objShiftDetails);
        }

        /// <summary>
        /// Method to get approval expiry details for shift allowance
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <returns>Gets shift allowance approval expiry mailers</returns>
        public static DataSet GetShiftApprovalExpiryDetails(ShiftDetails objShiftDetails)
        {
            return UtilityDAL.GetShiftApprovalExpiryDetails(objShiftDetails);
        }

        /// <summary>
        /// Method to get uploader exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>Gets the exception data for shift allowance</returns>
        public static DataSet GetUploaderShiftAllowanceExceptionData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderShiftAllowanceExceptionData(objCompDetails);
        }

        /// <summary>
        /// Method to get uploader exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>Gets the exception data for shift allowance</returns>
        public static DataSet GetBPSSDAUploaderExceptionData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetBPSSDAUploaderExceptionData(objCompDetails);
        }

        /// <summary>
        /// Method to get uploader exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>Gets the exception data for shift allowance</returns>
        public static DataSet GetBPSNSAUploaderExceptionData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetBPSNSAUploaderExceptionData(objCompDetails);
        }

        /// <summary>
        /// Method to get uploader exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>Gets the exception data for shift allowance</returns>
        public static DataSet GetBPSTransportUploaderExceptionData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetBPSTransportUploaderExceptionData(objCompDetails);
        }

        /// <summary>
        /// Method to get uploader exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>Gets the exception data for TRT</returns>
        public static DataSet GetUploaderTrtExceptionData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderTrtExceptionData(objCompDetails);
        }

        /// <summary>
        /// Method to get uploader exception data
        /// </summary>
        /// <param name="objCompDetails">passing object</param>
        /// <returns>Gets the exception data for CBA</returns>
        public static DataSet GetUploaderCBAExceptionData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderCBAExceptionData(objCompDetails);
        }

        /// <summary>
        /// Method to verify data in cut off date
        /// </summary>
        /// <param name="objData">passing  object</param>
        /// <returns>Cut off date with role name and activity</returns>
        public static DataSet GetVerifyDataRoleCutOffEndDate(ComponentDetails objData)
        {
            return UtilityDAL.GetVerifyDataRoleCutOffEndDate(objData);
        }

        /// <summary>
        /// Method to save the shift details
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="shiftData"> List of Shift Data </param>
        /// <returns>returns the status</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewShiftDetails(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewShiftDetails(objShiftDetails, shiftData);
        }

        /// <summary>
        /// Method to save the shift details
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="shiftData"> List of Shift Data </param>
        /// <returns>returns the status</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewITShiftDetails(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewITShiftDetails(objShiftDetails, shiftData);
        }

        /// <summary>
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewBPSSDAShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewBPSSDAShiftGrid(objShiftDetails, shiftData);
        }

        /// <summary>
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewBPSUBSShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewBPSUBSShiftGrid(objShiftDetails, shiftData);
        }

        /// <summary>
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewCLINSAShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewCLINSAShiftGrid(objShiftDetails, shiftData);
        }

        /// <summary>
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design",
            "CA1002:DoNotExposeGenericLists", Justification = "Reviewed")]
        public static List<string> SaveNewBPSNSAShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewBPSNSAShiftGrid(objShiftDetails, shiftData);
        }

        /// <summary>
        /// TO save grid data
        /// </summary>
        /// <param name="objShiftDetails">passing object</param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>save data</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewBPSTransportShiftGrid(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewBPSTransportShiftGrid(objShiftDetails, shiftData);
        }

        /// <summary>
        /// Method to stop payment
        /// </summary>
        /// <param name="objUploadData">passing Object </param>
        /// <returns>return status</returns>
        public static string StopPaymentUploaderValidData(UploaderData objUploadData)
        {
            return UtilityDAL.StopPaymentUploaderValidData(objUploadData);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="shiftData"> List of Shift Data </param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateShiftAllowanceGridData(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.UpdateShiftAllowanceGridData(objShiftDetails, shiftData);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="bpsSda">List of Shift Data</param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateBPSSDAGridData(ShiftDetails objShiftDetails, List<string> bpsSda)
        {
            return UtilityDAL.UpdateBPSSDAGridData(objShiftDetails, bpsSda);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="ubsnsa">List of Shift Data</param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateUBSNSAGridData(ShiftDetails objShiftDetails, List<string> ubsnsa)
        {
            return UtilityDAL.UpdateUBSNSAGridData(objShiftDetails, ubsnsa);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="cliNsa"> List of Shift Data </param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateBPSNSAGridData(ShiftDetails objShiftDetails, List<string> cliNsa)
        {
            return UtilityDAL.UpdateBPSNSAGridData(objShiftDetails, cliNsa);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="bpsTransport"> List of Shift Data </param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateBPSTransportGridData(ShiftDetails objShiftDetails, List<string> bpsTransport)
        {
            return UtilityDAL.UpdateBPSTransportGridData(objShiftDetails, bpsTransport);
        }

        /// <summary> Details of the login in Spay 
        /// </summary>
        /// <param name="objLog">passing object</param>
        /// <returns> Spay logged in users</returns>
        public static string LogSpayUsers(SpayUsersLog objLog)
        {
            return UtilityDAL.LogSpayUsers(objLog);
        }

        /// <summary>
        /// Method to get mailers that is active
        /// </summary>
        /// <param name="objMail">passing object</param>
        /// <returns>active mailer status</returns>
        public static int GetMailerActiveDetails(MailerLog objMail)
        {
            return UtilityDAL.GetMailerActiveDetails(objMail);
        }

        /// <summary>
        /// Method to check associate and project 
        /// </summary>
        /// <param name="objData">passing object</param>
        /// <returns>true or false</returns>
        public static DataSet CheckAssociateProjectMapping(CreateUserRole objData)
        {
            return UtilityDAL.CheckAssociateProjectMapping(objData);
        }

        /// <summary>
        /// Method to save file upload details
        /// </summary>
        /// <param name="objFileUploadDetails">passing object</param>
        public static void SaveMyPayFileUploadDetailstoDB(FileUploadDetails objFileUploadDetails)
        {
            UtilityDAL.SaveMyPayFileUploadDetailstoDB(objFileUploadDetails);
        }

        /// <summary>
        /// Method to get the My pay PushData
        /// </summary>
        /// <param name="objData">passing object</param>
        /// <returns>My pay push data</returns>
        public static DataSet GetMyPayGridData(CreateUserRole objData)
        {
            return UtilityDAL.GetMyPayGridData(objData);
        }

        /// <summary>
        ///  Method to get superAdmin
        /// </summary>
        /// <param name="objUser"> passing object </param>
        /// <returns>Super admins</returns>
        public static DataSet GetSuperAdmins(UserInfoDC objUser)
        {
            return UtilityDAL.GetSuperAdmins(objUser);
        }

        /// <summary>
        /// 290050: Method to get Tech team IDs for Mailer
        /// </summary>
        /// <returns>Tech team IDs for Mailer</returns>
        public static DataSet FetchTechTeamRecipientsAndMailerURL()
        {
            return UtilityDAL.FetchTechTeamRecipientsAndMailerURL();
        }

        /// <summary>
        /// 290050: Method to get other geo upload mailer details
        /// </summary>
        /// <param name="objUploadData"> passing object </param>
        /// <returns> other geography upload mailer details</returns>
        public static DataSet GetOtherGeoUploadMailerDetails(UploaderData objUploadData)
        {
            return UtilityDAL.GetOtherGeoUploadMailerDetails(objUploadData);
        }

        /// <summary>Method to get the reject mailer recipients</summary>
        /// <param name="objContAccess">passing object </param>
        /// <returns>Tech team recipients</returns>
        public static DataSet GetRejectMailerDetails(ControlAccess objContAccess)
        {
            return UtilityDAL.GetRejectMailerDetails(objContAccess);
        }

        /// <summary>Method to get the Approve mailer recipients</summary>
        /// <param name="objContAccess">passing object </param>
        /// <returns>Tech team recipients</returns>
        public static DataSet GetApproveMailerDetails(ControlAccess objContAccess)
        {
            return UtilityDAL.GetApproveMailerDetails(objContAccess);
        }

        /// <summary>
        /// Method to trigger mail on role creation 
        /// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>output for triggering mailers </returns>
        public static DataSet FetchRoleGridDetails(CreateUserRole objinputs)
        {
            return UtilityDAL.FetchRoleGridDetails(objinputs);
        }
        /// <summary>
        /// 877840:method to activate projects/// </summary>
        /// <param name="objinputs"> passing object </param> 
        /// <returns>Confirmation of project activation </returns>

        public static DataSet ActivateProjectDetails(ChangeUserStatus objinputs)
        {
            return UtilityDAL.ActivateProjectDetails(objinputs);
        }

        /// <summary>
        /// Method to save the shift details
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="shiftData"> List of Shift Data </param>
        /// <returns>returns the status</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewDiscretionaryShiftDetails(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewDiscretionaryShiftDetails(objShiftDetails, shiftData);
        }

        /// <summary>
        /// The Get Uploader Allowance Exception Data IND
        /// </summary>
        /// <param name="objCompDetails">the obj Comp Details</param>
        /// <returns>return the value</returns>
        public static DataSet GetUploaderAllowanceExceptionDataIND(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetUploaderAllowanceExceptionDataIND(objCompDetails);
        }

        /// <summary>Method to delete the exception data by uploader</summary>
        /// <param name="objUploadData"> passing object </param>  
        /// <returns>data that is present in valid data by uploader</returns>
        public static DataSet DeleteINDUploaderData(UploaderData objUploadData)
        {
            return UtilityDAL.DeleteINDUploaderData(objUploadData);
        }

        /// <summary>
        /// Method to update the shift allowance grid data
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="shiftData"> List of Shift Data </param>
        /// <returns>all data with updated one</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> UpdateINDGridData(int IntUserID, List<string> shiftData)
        {
            return UtilityDAL.UpdateINDGridData(IntUserID, shiftData);
        }
        /// <summary>
        /// Method to save the shift details
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="shiftData"> List of Shift Data </param>
        /// <returns>returns the status</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewStandByShiftDetails(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewStandByShiftDetails(objShiftDetails, shiftData);
        }
        /// <summary>
        /// Method to save the shift details
        /// </summary>
        /// <param name="objShiftDetails"> passing object</param>
        /// <param name="shiftData"> List of Shift Data </param>
        /// <returns>returns the status</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists",
            Justification = "Reviewed")]
        public static List<string> SaveNewDboShiftDetails(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewDboShiftDetails(objShiftDetails, shiftData);
        }
        /// <summary>
        /// Method to get allowance type and approval type with expiry date
        /// </summary>
        /// <param name="objUploadData"> passing object</param>
        /// <returns>gets approval expiry date with approval type</returns>
        public static DataSet GetEditINDValidData(UploaderData objUploadData)
        {
            return UtilityDAL.GetEditINDValidData(objUploadData);
        }

        /// <summary>
        /// Method to get OWA flag status
        /// </summary>
        /// <returns>Flag</returns>
        public static int GetOWAStatus(int Country)
        {
            return UtilityDAL.GetOWAStatus(Country);
        }

        /// <summary> Method to get the Allowance Amount for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Allowance Amount for the associate</returns>
        public static DataSet GetAssociateShiftDetails(ComponentDetails objcompDetails)
        {
            return UtilityDAL.GetAssociateShiftDetails(objcompDetails);
        }
        /// <summary> Method to get the Allowance Amount for the Associate</summary>
        /// <param name="objcompDetails"> passing object </param> 
        /// <returns>Allowance Amount for the associate</returns>
        public static DataSet GetNSAAmount(ComponentDetails objcompDetails)
        {
            return UtilityDAL.GetNSAAmount(objcompDetails);
        }

        /// <summary>Method to get File Upload Count</summary>
        /// <param name="strUserId"> passing object </param>  
        /// <returns> 1 or 0 </returns>
        public static DataSet GetFileUploadCount(UploaderData objUploadData)
        {
            return UtilityDAL.GetFileUploadCount(objUploadData);
        }

        /// <summary>Method to get Exception record</summary>
        /// <param name="objCompDetails"> passing object </param>  
        /// <returns> 1 or 0 </returns>
        public static DataSet GetPMIndiaExceptionData(ComponentDetails objCompDetails)
        {
            return UtilityDAL.GetPMIndiaExceptionData(objCompDetails);
        }

        /// <summary>
        /// Method to get Save NSA2 record
        /// </summary>
        /// <param name="objShiftDetails">passing object </param>
        /// <param name="shiftData">shift Data</param>
        /// <returns>Success/Failure Message</returns>
        public static List<string> SaveNewNsa2ShiftDetails(ShiftDetails objShiftDetails, List<string> shiftData)
        {
            return UtilityDAL.SaveNewNsa2ShiftDetails(objShiftDetails, shiftData);
        }

        /// <summary>
        /// The Encrypt
        /// </summary>
        /// <param name="encryptString">The encrypt String</param>
        /// <param name="key">The key</param>
        /// <returns>Return the value</returns>        
        private static int SecureNumber()
        {
            using (RNGCryptoServiceProvider rnd = new RNGCryptoServiceProvider())
            {
                byte[] reandomNumberByte = new byte[4];
                rnd.GetBytes(reandomNumberByte);
                return BitConverter.ToInt32(reandomNumberByte, 0) & int.MaxValue;
            }
        }

		/// <summary>
		/// The Encrypt
		/// </summary>
		/// <param name="encryptString">encrypt String</param>
		/// <param name="key">the key</param>
		/// <returns>return string</returns>
		public static string Encrypt(string encryptString, string key)
        {
            var randomNumber = SecureNumber();
            string finalEncryptedString = encryptString + "," + randomNumber.ToString();
            byte[] clearBytes = Encoding.Unicode.GetBytes(finalEncryptedString);
            using (Aes encryptor = Aes.Create())
            {
                Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(key, new byte[] {
                    0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76
                });
                encryptor.Key = pdb.GetBytes(32);
                encryptor.IV = pdb.GetBytes(16);
                using (MemoryStream ms = new MemoryStream())
                {
                    using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(clearBytes, 0, clearBytes.Length);
                        cs.Close();
                    }
                    encryptString = Convert.ToBase64String(ms.ToArray());
                }
            }

            return encryptString;
        }
    }
}

This is my OCM under WebApp

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.OleDb;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI;
using System.Xml.Linq;
using CAS.Security.Application;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using ECMCommon;
using ECMSharedServices;
using OneC.Spay.DC.UtilityDC;
using SPay.BAL.APAC_UtilityBAL;
using SPay.BAL.UtilityBAL;
using SPay.DC.UtilityDC;

namespace SPayWebApp
{
    /// <summary>
    /// OCM Service class.
    /// </summary>
    public partial class OCM_Service : System.Web.UI.Page
    {
        protected string userId, RoleID, ComponentGroupID, projectID, ComponentID, CountryId, Date, remarks;

        /// <summary>
        /// Page load for OCM.
        /// </summary>
        /// <param name="sender">The object that raised the event.</param>
        /// <param name="e">The event data.</param>
        protected void Page_load(object sender, EventArgs e)
        {
            try
            {
                if (Request.QueryString["close"] == "1")
                {
                    string script =
                    "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandlerocmclose');</script>";
                    Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                }

                string componentGroupID = this.Request.Form["componentGroupID"];
                int flag = Convert.ToInt32(this.Request.Form["flag"]);
                string page = this.Request.Form["page"];
                string remarks = this.Request.Form["remarks"];
                string projectID = this.Request.Form["projectID"];
                string approverID = this.Request.Form["approverID"];
                string fileUploadID = this.Request.Form["fileUploadID"];
                string fileName = this.Request.Form["fileName"];
                string approvalmail = this.Request.Form["approvalmail"];
                string attachMail = this.Request.Form["attachMail"];
                string type = this.Request.Form["type"];
                string primaryKeyIdstring = this.Request.Form["primaryKeyIdstring"];
                string response = this.Request.Form["response"];
                string button = this.Request.Form["button"];
                string date = this.Request.Form["date"];
                string ComponentId = this.Request.Form["componentid"];
                int isBulkapproval = Convert.ToInt32(this.Request.Form["isBulkApproval"]);
                string inputRemarks = this.Request.Form["inputRemarks"];
                string approvalMailfileName = this.Request.Form["approvalMailfileName"];
                approverID = approverID == "null" ? null : approverID;
                componentGroupID = (componentGroupID == "" || componentGroupID == "null") ? "0" : componentGroupID;
                ComponentId = (ComponentId == "" || ComponentId == "null") ? "0" : ComponentId;

                if (HttpContext.Current.Session["RoleID"] != null)
                {
                    this.RoleID = HttpContext.Current.Session["RoleID"].ToString();
                }

                FileUploadDetails objFileUploadDetails = new FileUploadDetails();
                objFileUploadDetails.Page = page;
                objFileUploadDetails.Flag = flag;
                objFileUploadDetails.Response = response;
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    this.userId = HttpContext.Current.Session["UserId"].ToString();
                }

                int CountryID = Convert.ToInt32(HttpContext.Current.Session["CountryID"]);

                if (response == "success")
                {
                    objFileUploadDetails.ComponentGroupID = Convert.ToInt32(componentGroupID);
                    if (page == "isReversal")
                    {
                        objFileUploadDetails.IsReversal = 1;

                    }
                    if (page == "isVerify")
                    {
                        objFileUploadDetails.IsVerify = 1;
                    }

                    if (page == "isVerifyBulk")
                    {
                        objFileUploadDetails.IsVerifyBulk = 1;
                    }

                    if (page == "isCurrencyUpdate")
                    {
                        objFileUploadDetails.IsCurrencyUpdate = 1;
                    }

                    if (page == "isReviewNSA")
                    {
                        objFileUploadDetails.IsReviewNSA = 1;
                        objFileUploadDetails.DateYear = date;
                    }
                    if (page == "isManageApproval" && inputRemarks == "BulkApproval") // Bulk approval Project in Manage Approval Page India
                    {
                        objFileUploadDetails.IsBulkApproval = 1;
                        objFileUploadDetails.ComponentGroupID = 2;
                        objFileUploadDetails.InputRemarks = inputRemarks;
                    }

                    objFileUploadDetails.LoginId = this.userId;
                    objFileUploadDetails.ProjectId = projectID;
                    objFileUploadDetails.CountryID = CountryID;
                    objFileUploadDetails.LoginId = this.userId;
                    objFileUploadDetails.ApprovedBy = approverID;
                    objFileUploadDetails.Remarks = remarks;
                    objFileUploadDetails.SelectedData = primaryKeyIdstring;
                    objFileUploadDetails.ComponentID = Convert.ToInt32(ComponentId);
                    objFileUploadDetails.RoleID = Convert.ToInt32(RoleID);

                    if (componentGroupID == "5" || componentGroupID == "102" || componentGroupID == "103" || componentGroupID == "104")
                    {
                        objFileUploadDetails.InputRemarks = remarks;
                    }

                    if (flag == 1)//bulk upload
                    {
                        objFileUploadDetails.FileUploadId = fileUploadID;
                        objFileUploadDetails.AttachMail1 = approvalmail;
                        objFileUploadDetails.AttachMail2 = attachMail;
                        objFileUploadDetails.FileContentId = "";
                        objFileUploadDetails.FileExtension = System.IO.Path.GetExtension(fileName).ToLower();
                        objFileUploadDetails.ApprovalMailfileName = approvalMailfileName;
                        UtilityBAL.SaveFileUploadDetailstoDB(objFileUploadDetails);

                        string script =
                        "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandlerocmsuccesspopup');</script>";
                        Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);

                    }
                    else if (flag == 2) //mail attach
                    {
                        objFileUploadDetails.Mailuploadid = fileUploadID;
                        objFileUploadDetails.Type = type;
                        object successmsg = new object();
                        if (componentGroupID == "5" && (RoleID == "9" || RoleID == "7"))
                        {
                            objFileUploadDetails.ApprovalMailfileName = fileName;
                        }
                        if (CountryID == 1)
                        {
                            successmsg = UtilityBAL.SaveTrtFileUploadDetailstoDB(objFileUploadDetails);
                        }
                        else if (this.ComponentGroupID == "51")
                        {
                            successmsg = APACUtilityBAL.SaveCEFileUploadDetailstoDB(objFileUploadDetails);
                        }
                        else
                        {
                            successmsg = APACUtilityBAL.SaveSGPFileUploadDetailstoDB(objFileUploadDetails);
                        }

                        if (successmsg.ToString() == "Mail Attachemnt is already available")
                        {
                            string script1 =
                               "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandlerocmfilealreadyavailable');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script1);
                        }
                        else
                        {
                            string script =
                               "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandlerocmsuccesspopup');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                    }

                    else if (flag == 3)
                    {
                        HttpContext.Current.Session["FileUploadID"] = fileUploadID;
                        HttpContext.Current.Session["MailUploadID"] = approvalmail;
                        HttpContext.Current.Session["SplCaseMail"] = attachMail;
                        HttpContext.Current.Session["ApprovalMailfileName"] = fileName;
                        if (button == "1")
                        {
                            string script =
                              "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandlerocm');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }
                        else
                        {
                            string script =
                        "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandlerocmedit');</script>";
                            Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
                        }

                    }
                }
            }
            catch (SystemException ex)
            {
                ErrorLogger logger = new ErrorLogger();
                logger.LogError(ex);
                string script =
                        "<script type='text/javascript'>parent.$(parent.document).trigger('eventhandlerocmError');</script>";
                Page.ClientScript.RegisterStartupScript(this.GetType(), "onload", script);
            }

        }
    }
}


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPayWebApp
{


    public partial class OCM_Service
    {

        /// <summary>
        /// form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm form1;
    }
}


